globalize_all_functions

struct
{

	int functionref()            getNumTeamsRemainingCallback

} file


bool function IsSpectator( entity player )
{
	if ( !IsValid( player ) )
		return false

	return player.GetTeam() == TEAM_SPECTATOR
}



int function GetEnemyTeam( int team )
{
	if ( IsMultiTeamPvPGame() )
		return TEAM_UNASSIGNED

	if ( team == TEAM_SPECTATOR )
		return TEAM_UNASSIGNED

	Assert( team == TEAM_IMC || team == TEAM_MILITIA )

	return (TEAM_IMC + TEAM_MILITIA) - team
}


array<int> function GetAllEnemyTeams( int team )
{
	array<int> resultArray
	if ( Is2TeamPvPGame() || IsSingleTeamMode() )
	{
		resultArray.append( GetEnemyTeam( team ) )
		return resultArray
	}

	int maxTeams = GetCurrentPlaylistVarInt( "max_teams", MAX_TEAMS )
	Assert( team >= TEAM_MULTITEAM_FIRST )
	Assert( team <= TEAM_MULTITEAM_LAST )

	for ( int i = TEAM_MULTITEAM_FIRST; i < TEAM_MULTITEAM_FIRST + maxTeams; ++i )
	{
		if ( i == team )
			continue

		resultArray.append( i )
	}

	return resultArray
}


array<int> function GetAllTeams()
{
	array<int> resultArray

	int maxTeams = GetCurrentPlaylistVarInt( "max_teams", MAX_TEAMS )

	for ( int i = TEAM_MULTITEAM_FIRST; i < TEAM_MULTITEAM_FIRST + maxTeams; ++i )
	{
		resultArray.append( i )
	}

	return resultArray
}


int function GetDefaultNonSpectatorTeam()
{
	int resultTeam

	if ( Is2TeamPvPGame() )
		resultTeam = TEAM_IMC
	else
		resultTeam = TEAM_MULTITEAM_FIRST

	return resultTeam
}


array<int> function GetAllValidPlayerTeams()
{
	array<int> teams
	foreach ( player in GetPlayerArray() )
	{
		int t = player.GetTeam()
		if ( !teams.contains( t ) )
		{
			teams.append( t )
		}
	}
	return teams
}

array<int> function GetAllValidConnectedPlayerTeams()
{
	array<int> teams
	foreach ( player in GetPlayerArray() )
	{





		int t = player.GetTeam()
		if ( !teams.contains( t ) )
		{
			teams.append( t )
		}
	}
	return teams
}

int function GetOtherTeam( int team )
{
	if ( team == TEAM_SPECTATOR )
		return TEAM_UNASSIGNED

	array<int> teams = GetAllValidPlayerTeams()
	foreach ( t in teams )
	{
		if ( t != team )
			return t
	}

	Warning( "Used GetOtherTeam() with less than 2 teams" )
	return TEAM_UNASSIGNED
}


bool function ArePlayersAllies( entity playerA, entity playerB )
{
	if ( playerA.GetTeam() == playerB.GetTeam() )
		return true


		if ( IsTeamInAlliance( playerA.GetTeam(), ALLIANCE_A ) && IsTeamInAlliance( playerB.GetTeam(), ALLIANCE_A )
				|| IsTeamInAlliance( playerA.GetTeam(), ALLIANCE_B ) && IsTeamInAlliance( playerB.GetTeam(), ALLIANCE_B ) )
		{
			return true
		}


	return false
}

bool function AllegianceCheck( int req, entity entA, entity entB )
{
	if ( req == eAllegiance.IRRELEVANT )
		return true
	if ( req == eAllegiance.FRIENDLY_ONLY )
		return IsFriendlyTeam( entA.GetTeam(), entB.GetTeam() )
	if ( req == eAllegiance.ENEMY_ONLY )
		return IsEnemyTeam( entA.GetTeam(), entB.GetTeam() )

	Assert( false, ("Unhandled allegience req #:" + req) )
	return false
}

array<entity> function GetArrayOfPossibleAlliesForPlayer( entity player, bool includeAlliance = true )
{
	array<entity> allyArray
	int team = player.GetTeam()

	if ( includeAlliance && AllianceProximity_IsUsingAlliances() )
	{
		int alliance = AllianceProximity_GetAllianceFromTeam( team )
		allyArray = AllianceProximity_GetAllPlayersInAlliance( alliance, true )
	}
	else
	{
		allyArray = GetPlayerArrayOfTeam_Alive( team )
	}
	allyArray.removebyvalue( player )

	return allyArray
}

table<int, int> function GetPlayerTeamCountTable()
{
	array<entity> players = GetPlayerArray()
	table<int, int> resultTable

	foreach ( player in players )
	{
		int team = player.GetTeam()
		if ( team in resultTable )
		{
			++resultTable[ team ]
		}
		else
		{
			resultTable[ team ] <- 1
		}
	}

	return resultTable
}


bool function IsPlayerOnTeam( entity player, int teamNum )
{
	Assert( IsValid( player ) )

	array<entity> teamPlayerArray = GetPlayerArrayOfTeam( teamNum )
	return teamPlayerArray.contains( player )
}
array<int> function GetTeamsForPlayers( array<entity> playersToUse )
{
	array<int> results
	foreach ( player in playersToUse )
	{
		int team = player.GetTeam()
		if ( !results.contains( team ) )
			results.append( team )
	}

	return results
}

void function AddCallback_GetNumTeamsRemaining( int functionref() callbackFunc )
{
	file.getNumTeamsRemainingCallback = callbackFunc
}

int function GetNumTeamsRemaining()
{
	if ( file.getNumTeamsRemainingCallback != null )
	{
		return file.getNumTeamsRemainingCallback()
	}

	return GetTeamsForPlayers( GetPlayerArray_AliveConnected() ).len()
}


int function GetNumTeamsExisting()
{
	return GetTeamsForPlayers( GetPlayerArray() ).len()
}

int function GetNumberAliveTeammates( entity player )
{
	array<entity> teammates = GetPlayerArrayOfTeam( player.GetTeam() )
	ArrayRemoveDead( teammates )
	return teammates.len()
}

bool function GameTeams_TeamHasDeadPlayers( int team )
{
	array<entity> teamPlayers = GetPlayerArrayOfTeam( team )
	foreach ( entity teamPlayer in teamPlayers )
	{
		if ( !IsAlive( teamPlayer ) )
			return true
	}
	return false
}

array<entity> function GetFriendlySquadArrayForPlayer( entity player )
{
	int team = player.GetTeam()
	if ( IsTeamRabid( team ) )
		return [player]

	return GetPlayerArrayOfTeam( team )
}






















#if INTELLIJ_OUTLINE_SECTION_MARKER
void function _____________Sorting___________________________(){}
#endif
int function SortByTeamMemberIndex( entity a, entity b )
{
	if ( a.GetTeamMemberIndex() > b.GetTeamMemberIndex() )
		return 1
	else if ( a.GetTeamMemberIndex() < b.GetTeamMemberIndex() )
		return -1

	return 0
}

array<entity> function GetSortedPlayers( IntFromEntityCompare compareFunc, int team )
{
	array<entity> players

	if ( team != 0 )
		players = GetPlayerArrayOfTeam( team )
	else
		players = GetPlayerArray()

	players.sort( compareFunc )

	return players
}

table<int, array<entity> > function ArrangePlayersByTeam( array<entity> players )
{
	table<int, array<entity> > out = {}
	foreach ( entity player in players )
	{
		int team = player.GetTeam()
		if ( team in out )
			out[team].append( player )
		else
			out[team] <- [ player ]
	}
	return out
}

int function AlphabeticalPlayerSort( entity a, entity b )
{
	if ( a.GetPlayerName() > b.GetPlayerName() )
		return 1

	if ( a.GetPlayerName() < b.GetPlayerName() )
		return -1

	return 0
}































#if INTELLIJ_OUTLINE_SECTION_MARKER
void function _____________Bots___________________________(){}
#endif

bool function AreMultipleHumansInTeam( int teamIndex )
{
	int numHumans         = 0
	array<entity> players = GetPlayerArrayOfTeam( teamIndex )
	foreach ( player in players )
	{
		if ( !player.IsBot() )
		{
			numHumans++
			if ( numHumans >= 2 )
				return true
		}
	}
	return false
}


int function GameTeams_GetNumLivingPlayers( int teamIndex = TEAM_ANY )
{
	int noOfLivingPlayers = 0

	array<entity> players
	if ( teamIndex == TEAM_ANY )
		players = GetPlayerArray()
	else
		players = GetPlayerArrayOfTeam( teamIndex )

	foreach ( player in players )
	{
		if ( !IsAlive( player ) )
			continue

		++noOfLivingPlayers
	}

	return noOfLivingPlayers
}

bool function TeamHasBots( int team )
{
	array<entity> teammates = GetPlayerArrayOfTeam( team )
	foreach ( player in teammates )
	{
		if ( player.IsBot() )
			return true
	}

	return false
}

#if INTELLIJ_OUTLINE_SECTION_MARKER
void function _____________SetTeam___________________________(){}
#endif

void function SetTeam( entity ent, int team )
{

		ent.Code_SetTeam( team )








































}


void function SetAllPlayersToTeam( int teamNum = 5 )
{
	SetTeam_All( teamNum )
}

void function SetTeam_All( int teamNum = 5 )
{
	array< entity > allPlayers = GetPlayerArray()
	foreach( player in allPlayers )
	{
		if( IsValid( player ) )
			SetTeam( player, teamNum )
	}
}

void function SetTeam_ByPlayerName( string playerName, int teamNum = 5 )
{
	array< entity > allPlayers = GetPlayerArray()
	foreach( player in allPlayers )
	{
		if( IsValid( player ) && ( player.GetPlayerName() == playerName ))
		{
			SetTeam( player, teamNum )
			return
		}
	}
}

void function SetTeam_ByPlayerNumbers( int minNdx, int maxNdx, int teamNum = 5 )
{
	Assert( minNdx <= maxNdx, format( "ERROR: %s(): minNdx needs to be <= maxNdx." ))

	array< entity > allPlayers = GetPlayerArray()

	Assert( minNdx <= allPlayers.len(), format( "ERROR: %s(): minNdx needs to be <= # of all players." ))

	for( int i = minNdx; i <= maxNdx; i++ )
	{
		if( IsValid( allPlayers[i] ) )
			SetTeam( allPlayers[i], teamNum )
	}
}

#if INTELLIJ_OUTLINE_SECTION_MARKER
void function _____________Jumpmaster___________________________(){}
#endif

entity function GetJumpmasterForTeam( int team, bool mustBeAlive = true )
{
	entity jumpMaster

	array<entity> teammates = mustBeAlive ? GetPlayerArrayOfTeam_Alive( team ) : GetPlayerArrayOfTeam( team )

	foreach ( entity player in teammates )
	{
		if ( !player.GetPlayerNetBool( "playerInPlane" ) && Survival_RequireJumpmasterInPlane() )
			continue

		if ( !player.GetPlayerNetBool( "isJumpingWithSquad" ) )
			continue

		if ( player.GetPlayerNetBool( "isJumpmaster" ) )
			return player
	}

	return jumpMaster
}


int function GetNumPlayersJumpingWithSquad( int team, bool mustBeAlive = true  )
{
	int count               = 0
	array<entity> teammates = mustBeAlive ? GetPlayerArrayOfTeam_Alive( team ) : GetPlayerArrayOfTeam( team )
	foreach ( entity player in teammates )
	{
		if ( !player.GetPlayerNetBool( "playerInPlane" ) && Survival_RequireJumpmasterInPlane() )
			continue

		if ( !player.GetPlayerNetBool( "isJumpingWithSquad" ) )
			continue

		count++
	}

	return count
}


#if INTELLIJ_OUTLINE_SECTION_MARKER
void function _____________GetAllPlayers___________________________(){}
#endif

array< entity > function GetAllPlayersByRealm( int realm, bool mustBeAlive = true )
{
	array<entity> players = GetPlayerArray()
	array< entity > playersInRealm = []
	foreach( player in players)
	{
		if( !IsValid( player ) )
			continue

		if( mustBeAlive && !IsAlive( player ) )
			continue

		bool inRealmCheck = false
		array< int > playerRealms = player.GetRealms()
		foreach( playerRealm in playerRealms )
		{
			inRealmCheck = inRealmCheck || ( playerRealm == realm )
		}

		if( !inRealmCheck )
			continue

		playersInRealm.append( player )
	}

	return playersInRealm
}


array<entity> function GetFriendlySquadArrayForPlayer_AliveConnected( entity player )
{
	int team = player.GetTeam()
	if ( IsTeamRabid( team ) )
	{
		if ( !IsAlive( player ) )
			return []




		return [player]
	}

	return GetPlayerArrayOfTeam_AliveConnected( team )
}


array<entity> function GetPlayerArrayOfTeam_AliveConnected( int team )
{
	return GetFilteredArray_Connected( GetPlayerArrayOfTeam_Alive( team ) )
}


array<entity> function GetPlayerArrayOfTeam_AliveNotBleedingOut( int team )
{
	return GetFilteredArray_NotBleedingOut( GetPlayerArrayOfTeam_Alive( team ) )
}


array<entity> function GetPlayerArrayOfTeam_Connected( int team )
{
	return GetFilteredArray_Connected( GetPlayerArrayOfTeam( team ) )
}


array<entity> function GetPlayerArray_AliveConnected()
{
	return GetFilteredArray_Connected( GetPlayerArray_Alive() )
}


array<entity> function GetFilteredArray_Connected( array<entity> playerArray )
{
	array<entity> results
	foreach ( player in playerArray )
	{




		results.append( player )
	}

	return results
}


array<entity> function GetFilteredArray_NotBleedingOut( array<entity> playerArray )
{
	array<entity> results
	foreach ( player in playerArray )
	{
		Bleedout_IsBleedingOut( player )
		continue
		results.append( player )
	}

	return results
}


array<entity> function GetPlayerArray_ConnectedNotSpectatorTeam()
{
	array<entity> results
	array<entity> playerArray = GetPlayerArray()
	foreach ( player in playerArray )
	{




		if ( player.GetTeam() == TEAM_SPECTATOR )
			continue

		results.append( player )
	}

	return results
}

