global function Lobby_AddLocalPlayer
global function AddCallback_OnPlayerAddedToLobby
global function Lobby_SetBannerSkin
global function ToggleHighlightOnRadioPlayProp
#if DEV
global function DEV_SetLobbyBannerSkin
#endif

const asset MARVIN_MDL = $"mdl/robots/marvin/marvin_base_v2.rmdl"
const asset MARVIN_TRAY_MDL = $"mdl/props/marvin_tray/marvin_tray.rmdl"
#if DEV
global function MarvinTriggerAnimThread
global function DEV_PlayMarvinAnim
global function SetupRadioPlayProp
#endif

global function Lobby_OnReadyFX


const int LOBBY_BANNER_DEFAULT_SKIN_INDEX = 0
const int LOBBY_BANNER_MIXTAPE_SKIN_INDEX = 1
const int LOBBY_BANNER_LTM_SKIN_INDEX = 2

const int LOBBY_EVENT1_SKIN_OFFSET = 3
const int LOBBY_EVENT2_SKIN_OFFSET = 6

const asset CAMERA_FLASH_READY_UP_EFFECT = $"P_lobby_s20_cameraflash"

struct
{
	array<void functionref( entity )> onPlayerAddedToLobbyCallbacks

	array<entity> lobbyBanners
	array<entity> lobbyBases
#if DEV
		bool overrideLobbyBanner = false
#endif

	entity marvin
	bool specificAnimPlaying = false
	float specificAnimCooldown = 0
	entity cameraEffectEnt

	array< entity > radioPlayProps

	float readyUpCooldown = 0
	float readyUpCooldownTime = 15.0

	bool registeredForPartyMemberCallback = false
	bool radioPlayPropsSetup = false

} file

void function Lobby_AddLocalPlayer()
{
	entity player = GetLocalClientPlayer()
	Assert( IsValid( player ) )

	player.FreezeControlsOnClient()
	player.HideCrosshairNames()

	SetStandardAbilityBindingsForPilot( player )
	RefreshPresentationType()

	RegisterSignal("MarvinKillIdleThread")


	
	
	
	RunUIScript( "Lobby_EnableMinimapCoordsOnConnect", player.GetPlayerName() )


	foreach ( func in file.onPlayerAddedToLobbyCallbacks )
		func( player )

	if ( !file.registeredForPartyMemberCallback )
	{
		AddCallback_OnClientPartyMemberAdded( OnPartyMemberAdded )
		file.registeredForPartyMemberCallback = true
	}

	CacheLobbyBannerEnt()
	SetupEventProps()
	SetupEventBase()

	PrecacheModel( MARVIN_MDL )
	PrecacheModel( MARVIN_TRAY_MDL )

	SetupMarvin()
	SetupRadioPlayProp()

	RunUIScript( "MaybeSendPINSettingsEvent" )
}

void function AddCallback_OnPlayerAddedToLobby( void functionref( entity ) onPlayerAddedToLobbyCallback )
{
	Assert( ! ( file.onPlayerAddedToLobbyCallbacks.contains( onPlayerAddedToLobbyCallback ) ), "Attempted to add same callback to onPlayerAddedToLobbyCallbacks twice." )

	file.onPlayerAddedToLobbyCallbacks.append( onPlayerAddedToLobbyCallback )
}

void function CacheLobbyBannerEnt()
{
	file.lobbyBanners = GetEntArrayByScriptName( "lobby_banner" )
	file.lobbyBases = GetEntArrayByScriptName( "lobby_base" )

	PrecacheParticleSystem( CAMERA_FLASH_READY_UP_EFFECT )

	array<entity> camereEffectEnts = GetEntArrayByScriptName( "readyup_effect" )

	if ( camereEffectEnts.len() == 1 )
		file.cameraEffectEnt = camereEffectEnts[0]

	if ( IsLobbyEvent1Active() )
	{
		file.readyUpCooldownTime = 60
	}

	




}

void function Lobby_OnReadyFX( bool isReady )
{
	if ( !isReady )
		return

	float now = ClientTime()

	if ( file.readyUpCooldown != 0 && now < (file.readyUpCooldown + file.readyUpCooldownTime))
		return

	file.readyUpCooldown = now

	if ( IsLobbyEvent1Active() )
	{
		thread Event1ReadyFX()
	}
	else if ( IsLobbyEvent2Active()  )
	{
		
	}
	else
	{
		thread NonEventLobbyReadyUp()
	}
}

void function NonEventLobbyReadyUp()
{
	if ( !IsValid(file.cameraEffectEnt) )
		return

	StartParticleEffectInWorld( GetParticleSystemIndex ( CAMERA_FLASH_READY_UP_EFFECT ) , file.cameraEffectEnt.GetOrigin(),  file.cameraEffectEnt.GetAngles() )

	thread MarvinTriggerAnimThread( "mrvn_lobby_s20_idle_surprised" )
}

void function Event1ReadyFX()
{
	if ( RandomFloat( 1.0 ) <= 0.1 )
		thread MarvinTriggerAnimThread( "mrvn_lobby_s20_prowler", true )
}

void function Lobby_SetBannerSkin( string playlist )
{
	if( file.lobbyBanners.len() == 0 )
	{
		
		CacheLobbyBannerEnt()

		if( file.lobbyBanners.len() == 0 )
		{
			Warning( "Lobby_SetBannerSkin - No lobby_banner entity found!" )
			return
		}
	}

	string playlistName = GetParty().playlistName
	int skinIndex =  LOBBY_BANNER_DEFAULT_SKIN_INDEX

	if ( GetPlaylistVarBool( playlistName, "is_limited_mode", false ) )
		skinIndex =  LOBBY_BANNER_LTM_SKIN_INDEX
	else if ( GetPlaylistVarString( playlistName, "ui_slot", "" ) == "mixtape" )
		skinIndex =  LOBBY_BANNER_MIXTAPE_SKIN_INDEX

#if DEV
		if ( file.overrideLobbyBanner )
			return
#endif

	if ( IsLobbyEvent1Active() )
	{
		skinIndex = skinIndex + LOBBY_EVENT1_SKIN_OFFSET
	}

	if ( IsLobbyEvent2Active() )
	{
		skinIndex = skinIndex + LOBBY_EVENT2_SKIN_OFFSET
	}

	Lobby_SetBannerSkinInternal ( skinIndex )
}

void function Lobby_SetBannerSkinInternal( int skinIndex )
{
	foreach ( lobbyBanner in file.lobbyBanners )
	{
		if ( IsValid(lobbyBanner) )
			lobbyBanner.SetSkin( skinIndex )
	}
}

#if DEV
void function DEV_SetLobbyBannerSkin( int i )
{
	if ( i == -1 )
	{
		file.overrideLobbyBanner = false
		return
	}

	Lobby_SetBannerSkinInternal( i )
	file.overrideLobbyBanner = true
}
#endif

void function SetupEventBase()
{
	int skinId = 0

	if ( IsLobbyEvent1Active() )
		skinId = 1

	if ( IsLobbyEvent2Active() )
		skinId = 2

	if ( skinId == 0 )
		return

	foreach ( lobbyBase in file.lobbyBases )
	{
		if ( IsValid( lobbyBase ) )
		{
			lobbyBase.SetSkin(skinId )
		}
	}
}

void function SetupEventProps()
{
	SetupEvent1Props()
	SetupEvent2Props()
}

void function SetupEvent1Props()
{
	if ( !IsLobbyEvent1Active() )
	{
		array<entity> event_props = GetEntArrayByScriptName( "event_1_prop" )
		foreach ( event_prop in event_props )
		{
			if ( IsValid( event_prop ) )
				event_prop.Destroy()
		}

		return
	}

	
	





}

void function SetupEvent2Props()
{
	if ( !IsLobbyEvent2Active() )
	{
		array<entity> event_props = GetEntArrayByScriptName( "event_2_prop" )
		foreach ( event_prop in event_props )
		{
			if ( IsValid( event_prop ) )
				event_prop.Destroy()
		}

		return
	}

	
	





}

void function SetupMarvin( vector origin = <-92, 686.679016, -0.625>, vector angles = <0,-90,0> )
{
	array<entity> lobbyMarvins = GetEntArrayByScriptName("LobbyMarvin")
	if ( lobbyMarvins.len() > 0  )
		return


	if ( IsEventLobbyActive() )
		origin += EVENT_LOBBY_OFFSET

	file.marvin = CreateClientSidePropDynamic( origin, angles, MARVIN_MDL )
	file.marvin.SetScriptName( "LobbyMarvin" )
	thread MarvinIdleThread()
}

void function MarvinIdleThread()
{
	Signal( file.marvin, "MarvinKillIdleThread" )
	EndSignal( file.marvin, "MarvinKillIdleThread" )
	EndSignal( file.marvin, "OnDestroy" )

	file.specificAnimPlaying = false
	bool animChanged = true

	while( true )
	{
		float dice = RandomFloat( 1.0 )

		if ( dice >= 0.8 )
		{
			file.marvin.Anim_Play( "mrvn_lobby_s20_idle_twitch" )
			wait file.marvin.GetSequenceDuration( "mrvn_lobby_s20_idle_twitch" )
			animChanged = true
		}

		if ( animChanged )
			file.marvin.Anim_Play( "mrvn_lobby_s20_idle" )

		animChanged = false

		wait file.marvin.GetSequenceDuration( "mrvn_lobby_s20_idle" )
	}
}

void function MarvinTriggerAnimThread( string anim, bool requireReEnter = false )
{
	if ( file.specificAnimPlaying )
		return

	Signal( file.marvin, "MarvinKillIdleThread" )

	file.specificAnimPlaying = true
	file.marvin.Anim_Play( anim )
	wait file.marvin.GetSequenceDuration( anim )

	if ( requireReEnter )
	{
		wait 15.0
		file.marvin.Anim_Play( "mrvn_lobby_s20_enter" )
		wait file.marvin.GetSequenceDuration( "mrvn_lobby_s20_enter" )
	}

	thread MarvinIdleThread()
}

#if DEV
void function DEV_PlayMarvinAnim( string anim, bool stopAnim = true )
{
	array<entity> lobbyMarvins = GetEntArrayByScriptName("LobbyMarvin")
	if ( lobbyMarvins.len() != 1 )
		return

	if ( stopAnim )
		lobbyMarvins[0].Anim_Stop()

	lobbyMarvins[0].Anim_Play( anim )
}
#endif

void function OnPartyMemberAdded()
{
	thread MarvinTriggerAnimThread( "mrvn_lobby_s20_idle_wave" )
}

void function SetupRadioPlayProp()
{
	if ( file.radioPlayPropsSetup )
		return

 	int latestMissionIndex = SeasonQuestMission_GetLatestTimeUnlockedMission()
	array< string > scriptNames = [ "branthium", "octane_heirloom", "forge_medallion", "battery", "gauntlet" ]

	if ( latestMissionIndex == -1 )
		return

	if ( latestMissionIndex >= scriptNames.len() )
		return

	string propScriptName = scriptNames[latestMissionIndex]

	file.radioPlayProps = GetEntArrayByScriptName( propScriptName )
	scriptNames.fastremove( latestMissionIndex )


	foreach ( string scriptName in scriptNames )
	{
		array<entity> entsToDelete = GetEntArrayByScriptName( scriptName )
		foreach ( ent in entsToDelete )
			ent.Destroy()

		array<entity> cardEntsToDelete = GetEntArrayByScriptName( scriptName +  "_card" )
		foreach ( ent in cardEntsToDelete )
			ent.Destroy()
	}

	array<entity> cardEnts = GetEntArrayByScriptName( propScriptName +  "_card" )
	foreach ( ent in cardEnts )
	{
		ent.SetModelScale( 0.5 )
		ent.SetOrigin( ent.GetOrigin() + <-5.1, 0.6, 22.74> )
	}

	file.radioPlayPropsSetup = true

}

void function ToggleHighlightOnRadioPlayProp( bool focus )
{
	if ( focus )
	{
		foreach ( radioPlayProp in file.radioPlayProps )
			SonarViewModelHighlight( radioPlayProp, HIGHLIGHT_COLOR_FRIENDLY )
	}
	else
	{
		foreach ( radioPlayProp in file.radioPlayProps )
			SonarViewModelClearHighlight ( radioPlayProp )
	}
}