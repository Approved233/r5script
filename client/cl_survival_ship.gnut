global function ClSurvivalShip_Init
global function IsPlayerInPlane
global function GetPlayersInPlaneCount

global function GetNumPlayersInMyPlaneVsOther

global function PlayerPlaneStatusChanged
global function JumpmasterStatusChanged
global function PlaneCreated

const string SQUAD_LEADER_SOUND = "UI_InGame_SquadLeader_Announce"

struct
{
	var sqadLeaderBoxRui
	bool adsPressed
	bool registeredConCommandCallbacks
	EnvironmentSpeaker& planeSpeaker


		bool alreadyPlayedZoomSequence

} file

void function ClSurvivalShip_Init()
{
	RegisterSignal( "PlayerPlaneStatusChanged" )
	RegisterSignal( "CancelTryRelinquishSquadLeaderOrBreakFromSquad" )
	RegisterSignal( "CreateSquadLeaderBox" )

		RegisterSignal( "PlayerPanningOnShips" )
		RegisterSignal( "ForceEndPlayerPanningOnShips" )


	AddEventNotificationCallback( eEventNotifications.SURVIVAL_DroppingSolo, SURVIVAL_DroppingSolo )
	AddEventNotificationCallback( eEventNotifications.SURVIVAL_RelinquishedJumpmaster, SURVIVAL_RelinquishedJumpmaster )
	AddEventNotificationCallback( eEventNotifications.SURVIVAL_NewJumpmaster, SURVIVAL_NewJumpmaster )
	AddEventNotificationCallback( eEventNotifications.SURVIVAL_RejoinedSquad, SURVIVAL_RejoinedSquad )

	AddCallback_OnViewPlayerChanged( OnLocalViewPlayerChanged )

	AddTargetNameCreateCallback( SURVIVAL_PLANE_NAME, PlaneCreated )
}

bool function IsPlayerInPlane( entity player )
{
	return player.GetPlayerNetBool( "playerInPlane" )
}

int function GetPlayersInPlaneCount()
{
	int count = 0
	foreach( entity player in GetPlayerArray() )
	{
		if ( player.GetPlayerNetBool( "playerInPlane" ) )
			count++
	}
	return count
}


int[2] function GetNumPlayersInMyPlaneVsOther( entity basePlayer )
{
	int[2] counts = [ 0, 0 ]
	entity myPlane = basePlayer.GetPlayerNetEnt( "planeEnt" )
	if ( !IsValid( myPlane ) )
		return counts

	foreach( entity player in GetPlayerArray() )
	{
		if ( !IsValid( player ) )
			continue

		if ( !( player.GetPlayerNetBool( "playerInPlane" ) ) )
			continue

		entity plane = player.GetPlayerNetEnt( "planeEnt" )
		if ( myPlane == plane )
		{
			counts[0]++
		}
		else if ( IsValid( plane ) )
		{
			counts[1]++
		}
	}
	return counts
}


void function PlaneCreated( entity plane )
{
	file.planeSpeaker = RegisterEnvironmentSpeaker( plane )
}

void function JumpmasterStatusChanged( entity statusChangePlayer, bool newValue )
{







	{
		PlayerPlaneStatusChanged( statusChangePlayer, newValue )
	}

	if ( newValue == false )
		return

	if ( statusChangePlayer != GetLocalClientPlayer() )
		return

#if AUTO_PLAYER_DEV
	AutoPlayer_JumpmasterPutInPlane( statusChangePlayer )
#endif


	if( PlayerRecentlyFreespawned_Check( statusChangePlayer ) )
		return


	PlayBattleChatterToSelfOnClient( statusChangePlayer, "bc_imJumpmaster" )
}

void function PlayerPlaneStatusChanged( entity statusChangePlayer, bool newValue )
{



	{
		__PlayerPlaneStatusChanged( statusChangePlayer )
	}
}

void function OnLocalViewPlayerChanged( entity player )
{
	if ( !IsValid( player ) )
		return

	__PlayerPlaneStatusChanged( player )
}

void function __PlayerPlaneStatusChanged( entity statusChangePlayer )
{
	entity player = GetLocalClientPlayer()
	bool isLocalPlayer = player == statusChangePlayer
	var gamestateRui = ClGameState_GetRui()
	Assert( gamestateRui != null )

		if ( Survival_GetDropshipCount() > 1 )
		{
			int[2] playersInPlanes = GetNumPlayersInMyPlaneVsOther( player )
			RuiSetInt( gamestateRui, "playersInPlane1", IsPlayerInPlane( player ) ? playersInPlanes[0] : 0 )
			RuiSetInt( gamestateRui, "playersInPlane2", IsPlayerInPlane( player ) ? playersInPlanes[1] : 0 )
			RuiSetBool( gamestateRui, "multiOtherPlanes", Survival_GetDropshipCount() != 2 )

			if ( IsPlayerInPlane( player ) && isLocalPlayer && !file.alreadyPlayedZoomSequence && GetCurrentPlaylistVarBool( "multi_survival_plane_do_zoom_sequence", false ) )
			{
				thread ZoomInOnOtherShip_Thread( player )
			}
		}
		else

	{
		RuiSetInt( gamestateRui, "playersInPlane", IsPlayerInPlane( player ) ? GetPlayersInPlaneCount() : 0 )
	}
	if ( !IsPVEMode() )
	{
		{
			RuiSetInt( GetFullmapGamestateRui(), "playersInPlane", IsPlayerInPlane( player ) ? GetPlayersInPlaneCount() : 0 )
		}
	}

	if ( statusChangePlayer.GetTeam() != player.GetTeam() )
		return

	bool playerInPlane = player.GetPlayerNetBool( "playerInPlane" )

	if ( isLocalPlayer )
		Signal( player, "PlayerPlaneStatusChanged" )

	if ( playerInPlane )
	{
		
		NotifyDropSequence( true )
		SetSkydiveStartingConvars()
		CreateSquadLeaderBox( player )
		if ( statusChangePlayer == player )
		{
			thread UpdateDOFForPlayerView()
			thread ADSZoomWhileInPlane()

			if ( !file.registeredConCommandCallbacks )
			{
				file.registeredConCommandCallbacks = true
				RegisterConCommandTriggeredCallback( "+duck", PlayerTryRelinquishSquadLeaderOrBreakFromSquad )
				RegisterConCommandTriggeredCallback( "+toggle_duck", PlayerTryRelinquishSquadLeaderOrBreakFromSquad )
				RegisterConCommandTriggeredCallback( "-duck", SignalReleasedTryRelinquishSquadLeaderOrBreakFromSquad )
				RegisterConCommandTriggeredCallback( "-toggle_duck", SignalReleasedTryRelinquishSquadLeaderOrBreakFromSquad )
			}
		}
	}
	else
	{
		
		DestroySquadLeaderBox( player )

		if ( isLocalPlayer && file.registeredConCommandCallbacks )
		{
			DeregisterConCommandTriggeredCallback( "+duck", PlayerTryRelinquishSquadLeaderOrBreakFromSquad )
			DeregisterConCommandTriggeredCallback( "+toggle_duck", PlayerTryRelinquishSquadLeaderOrBreakFromSquad )
			DeregisterConCommandTriggeredCallback( "-duck", SignalReleasedTryRelinquishSquadLeaderOrBreakFromSquad )
			DeregisterConCommandTriggeredCallback( "-toggle_duck", SignalReleasedTryRelinquishSquadLeaderOrBreakFromSquad )
			file.registeredConCommandCallbacks = false
		}
	}
}



void function ZoomInOnOtherShip_Thread( entity player )
{
	player.Signal( "PlayerPanningOnShips" )

	player.EndSignal( "OnDeath", "OnDestroy", "PlayerPanningOnShips", "ForceEndPlayerPanningOnShips" )

	entity playerPlane
	while ( true ) 
	{
		if ( IsValid( player.GetPlayerNetEnt( "planeEnt" ) ) )
		{
			playerPlane = player.GetPlayerNetEnt( "planeEnt" )
			break
		}

		WaitFrame()
	}

	array< entity > planes = GetEntArrayByScriptName( SURVIVAL_PLANE_NAME )

	
	planes.sort( int function( entity a, entity b ) {
		float angleA = atan2( a.GetOrigin().y, a.GetOrigin().x )
		float angleB = atan2( b.GetOrigin().y, b.GetOrigin().x )
		if ( angleA < angleB )
			return -1
		else if ( angleA > angleB )
			return 1
		return 0
	} )

	array< entity > otherPlanes
	int planeIdx = 0
	for ( int i = 0; i < planes.len(); i++ )
	{
		if ( planes[i] != playerPlane )
		{
			otherPlanes.append( planes[i] )
		}
		else
		{
			planeIdx = i
		}
	}

	
	entity leftMostPlane
	entity rightMostPlane
	if ( planeIdx == planes.len() - 1 )
	{
		rightMostPlane = planes[ 0 ]
		leftMostPlane = planes[ planeIdx - 1]
	}
	else if ( planeIdx == 0 )
	{
		rightMostPlane = planes[ 1 ]
		leftMostPlane = planes[ planes.len() - 1 ]
	}
	else
	{
		rightMostPlane = planes[ planeIdx + 1 ]
		leftMostPlane = planes[ planeIdx - 1 ]
	}

	if ( !IsValid( otherPlanes[0] ) )
		return

	vector abovePlaneDisplacement = AnglesToUp( playerPlane.GetAngles() ) * 2000 - AnglesToForward( playerPlane.GetAngles() ) * 3000
	vector otherPlaneAngles = otherPlanes[0].GetAngles()
	vector startPos = playerPlane.GetOrigin() + abovePlaneDisplacement
	vector startAng = VectorToAngles( ( playerPlane.GetOrigin() + AnglesToForward( playerPlane.GetAngles() ) * 4000 ) - startPos )

	entity cameraMover = CreateClientsideScriptMover( $"mdl/dev/empty_model.rmdl", startPos, startAng )
	entity camera      = CreateClientSidePointCamera( startPos, startAng, 100 )
	player.SetMenuCameraEntity( camera )
	player.SetMenuCameraBloomAmountOverride( GetMapBloomSettings().dropship )
	camera.SetTargetFOV( 100, true, EASING_CUBIC_INOUT, 0.0 )
	camera.SetParent( cameraMover, "", false )

	file.alreadyPlayedZoomSequence = true

	OnThreadEnd(
		function() : ( player, camera, cameraMover )
		{
			if ( IsValid( camera ) )
			{

				camera.Destroy()
				cameraMover.Destroy()
			}

			if ( IsValid( player ) )
			{
				player.ClearMenuCameraEntity()
				player.Signal( "ForceEndPlayerPanningOnShips" )
			}
		}
	)

	thread CheckForTeamJumpedOutOfPlane( player )

	float initialWaitTime = 2
	cameraMover.NonPhysicsMoveTo( playerPlane.GetOrigin() + abovePlaneDisplacement + playerPlane.GetVelocity() * initialWaitTime, initialWaitTime, 0, 0 )

	wait initialWaitTime

	if ( !IsValid( camera ) )
		return

	player.SetMenuCameraEntity( camera ) 
	player.SetMenuCameraBloomAmountOverride( GetMapBloomSettings().dropship )

	
	float panLeftTime = 0.5
	vector leftPlaneFutureLocation = leftMostPlane.GetOrigin() + leftMostPlane.GetVelocity() * panLeftTime
	vector cameraFutureLocation = cameraMover.GetOrigin() + playerPlane.GetVelocity() * panLeftTime
	vector anglesToLeftPlaneFutureLocation = VectorToAngles( leftPlaneFutureLocation - cameraFutureLocation )
	cameraMover.NonPhysicsRotateTo( anglesToLeftPlaneFutureLocation, panLeftTime, panLeftTime / 3, panLeftTime / 3 )

	cameraMover.NonPhysicsMoveTo( playerPlane.GetOrigin() + abovePlaneDisplacement + playerPlane.GetVelocity() * 1.5, 1.5, 0, 0 )

	wait 1.5

	if ( otherPlanes.len() > 1 )
	{
		float panRightTime = 0.5

		vector rightPlaneFutureLocation = rightMostPlane.GetOrigin() + rightMostPlane.GetVelocity() * panRightTime
		cameraFutureLocation = cameraMover.GetOrigin() + playerPlane.GetVelocity() * panLeftTime
		vector anglesToRightPlaneFutureLocation = VectorToAngles( rightPlaneFutureLocation - cameraFutureLocation )
		cameraMover.NonPhysicsRotateTo( anglesToRightPlaneFutureLocation, panRightTime, panRightTime / 3, panRightTime / 3 )

		cameraMover.NonPhysicsMoveTo( playerPlane.GetOrigin() + abovePlaneDisplacement + playerPlane.GetVelocity() * 1.5, 1.5, 0, 0 )

		wait 1.5
	}


	cameraMover.NonPhysicsMoveTo( player.EyePosition() + playerPlane.GetVelocity() * 2, 1, 0.5, 0.5 )
	cameraMover.NonPhysicsRotateTo( player.GetAngles(), 1, 0, 0 )

	wait 1.0
}

void function CheckForTeamJumpedOutOfPlane( entity player )
{
	player.EndSignal( "OnDeath", "OnDestroy", "ForceEndPlayerPanningOnShips" )
	entity plane = player.GetPlayerNetEnt( "planeEnt" )

	while ( IsValid( player ) && player.GetOrigin() == ZERO_VECTOR ) 
	{
		WaitFrame()
	}

	while ( IsValid( player ) && IsValid( plane ) )
	{
		float dist = DistanceSqr( player.GetOrigin(), plane.GetOrigin() )
		if ( dist > 1000000 ) 
		{
			player.Signal( "ForceEndPlayerPanningOnShips" )
			return
		}

		WaitFrame()
	}
}


void function PlayDoorsOpenTimerSounds( entity player )
{
	Signal( player, "CreateSquadLeaderBox" )
	EndSignal( player, "CreateSquadLeaderBox" )
	EndSignal( player, "OnDestroy" )

	float doorsOpenTime = GetGlobalNetTime( "PlaneDoorsOpenTime" )
	float threeSecondWarningTime = doorsOpenTime - 3.0

	while( GetGlobalNetTime( "PlaneDoorsOpenTime" ) < 0 )
		WaitFrame()

	if ( Time() > GetGlobalNetTime( "PlaneDoorsOpenTime" ) )
		return

	while( Time() < ( GetGlobalNetTime( "PlaneDoorsOpenTime" ) - 3.0 ) )
	{
		EmitSoundOnEntity( player, "UI_Survival_Intro_LaunchCountDown_10Seconds" )
		wait 1.0
	}

	while( Time() < GetGlobalNetTime( "PlaneDoorsOpenTime" ) - 0.5 )
	{
		EmitSoundOnEntity( player, "UI_Survival_Intro_LaunchCountDown_3Seconds" )
		wait 1.0
	}

	while( Time() < GetGlobalNetTime( "PlaneDoorsOpenTime" ) )
		WaitFrame()

	EmitSoundOnEntity( player, "UI_Survival_Intro_LaunchCountDown_Finish" )
}

void function CreateSquadLeaderBox( entity player )
{
	if ( file.sqadLeaderBoxRui == null )
	{
		file.sqadLeaderBoxRui = CreatePermanentCockpitPostFXRui(  $"ui/squad_leader_box.rpak", 0 )
		RuiSetGameTime( file.sqadLeaderBoxRui, "squadLeaderStartShowTime", Time() + 1.25 )






			RuiSetFloat( file.sqadLeaderBoxRui, "switchPanelHeight", 96.0 )
			RuiSetFloat( file.sqadLeaderBoxRui, "ifSwitch", 0.0 )

	}

	entity jumpMasterPlayer = GetJumpmasterForTeam( player.GetTeam() )
	if ( jumpMasterPlayer == player )
		EmitSoundOnEntity( player, SQUAD_LEADER_SOUND )
	RuiSetBool( file.sqadLeaderBoxRui, "isJumpMaster", jumpMasterPlayer == player )
	RuiTrackFloat( file.sqadLeaderBoxRui, "doorsOpenTime", null, RUI_TRACK_SCRIPT_NETWORK_VAR_GLOBAL, GetNetworkedVariableIndex( "PlaneDoorsOpenTime" ) )
	RuiTrackBool( file.sqadLeaderBoxRui, "pingEnabled", player, RUI_TRACK_SCRIPT_NETWORK_VAR_BOOL, GetNetworkedVariableIndex( "pingEnabled" ) )

	thread PlayDoorsOpenTimerSounds( player )
	EmitSoundOnEntity( player, "UI_InGame_SquadLeader_Announce" )


	if ( NewPlayerBotQueueAreEnabled() && !AreMultipleHumansInTeam( player.GetTeam() ) )
	{
		RuiSetBool( file.sqadLeaderBoxRui, "showJumpMaster", false )
		return
	}


	if ( IsValid( jumpMasterPlayer ) )
	{
		RuiSetString( file.sqadLeaderBoxRui, "squadLeaderName", jumpMasterPlayer.GetPlayerName() )
		vector squadLeaderColor = GetPlayerInfoColor( jumpMasterPlayer )
		RuiSetFloat3( file.sqadLeaderBoxRui, "squadLeaderColor", SrgbToLinear( squadLeaderColor / 255.0 ) )
	}

	if ( player.GetPlayerNetBool( "isJumpingWithSquad" ) )
	{
		RuiSetBool( file.sqadLeaderBoxRui, "isSoloJump", false )
		if ( !IsValid( jumpMasterPlayer ) )
			RuiSetBool( file.sqadLeaderBoxRui, "showJumpMaster", false )
		else
			RuiSetBool( file.sqadLeaderBoxRui, "showJumpMaster", true )
	}
	else
	{
		RuiSetBool( file.sqadLeaderBoxRui, "showJumpMaster", true )
		RuiSetBool( file.sqadLeaderBoxRui, "isSoloJump", true )
		vector squadLeaderColor = GetPlayerInfoColor( player )
		if ( IsValid( jumpMasterPlayer ) )
			squadLeaderColor = GetPlayerInfoColor( jumpMasterPlayer )
		RuiSetFloat3( file.sqadLeaderBoxRui, "squadLeaderColor", SrgbToLinear( squadLeaderColor / 255.0 ) )
	}

	if ( MAX_TEAM_PLAYERS == 1 ) 
		RuiSetBool( file.sqadLeaderBoxRui, "isSoloJump", true )

	RuiSetBool( file.sqadLeaderBoxRui, "hasHoldButtonAction", HasHoldButtonAction() )


		if ( Survival_StopDropshipsEarly() )
		{
			thread WaitAndShowStoppedShipCountdown()
		}

}

void function DestroySquadLeaderBox( entity vehicle )
{
	if ( file.sqadLeaderBoxRui != null )
	{
		RuiDestroyIfAlive( file.sqadLeaderBoxRui )
		file.sqadLeaderBoxRui = null
		entity player = GetLocalClientPlayer()

		StopSoundOnEntity( player, "UI_Survival_Intro_LaunchCountDown_10Seconds" )
		StopSoundOnEntity( player, "UI_Survival_Intro_LaunchCountDown_3Seconds" )
		StopSoundOnEntity( player, "UI_Survival_Intro_LaunchCountDown_Finish" )
	}
}


void function WaitAndShowStoppedShipCountdown()
{
	while( GetGlobalNetTime( "PlaneDoorsOpenTime" ) <= 0 )
	{
		WaitFrame()
	}

	wait GetGlobalNetTime( "PlaneDoorsOpenTime" ) - Time()

	if ( !IsPlayerInPlane( GetLocalViewPlayer() ) )
		return

	RuiTrackFloat( file.sqadLeaderBoxRui, "doorsOpenTime", null, RUI_TRACK_SCRIPT_NETWORK_VAR_GLOBAL, GetNetworkedVariableIndex( "PlaneDoorsCloseTime" ) )
	RuiSetBool( file.sqadLeaderBoxRui, "dropAllowedOverride", true )
}


void function UpdateDOFForPlayerView()
{
	entity player = GetLocalClientPlayer()

	EndSignal( player, "PlayerPlaneStatusChanged" )
	EndSignal( player, "FreefallEnded" )
	EndSignal( player, "OnDeath" )
	EndSignal( player, "OnDestroy" )

	SetConVarFloat( "dof_variable_blur", 3.0 )
	DoF_SetFarDepth( 10000, 150000 )

	float traceDist = 100000.0

	while( PlayerMatchState_GetFor( player ) < ePlayerMatchState.NORMAL )
	{
		vector start = player.CameraPosition()
		vector end = start + ( AnglesToForward( player.CameraAngles() ) * traceDist )
		TraceResults results = TraceLine( start, end, [ player ], TRACE_MASK_SOLID, TRACE_COLLISION_GROUP_NONE )
		float dist = traceDist * results.fraction

		DoF_SetFarDepth( dist + 3000, 900000 )
		

		WaitFrame()
	}
}

void function ADSZoomWhileInPlane()
{
	entity player = GetLocalClientPlayer()
	if ( !IsValid( player ) )
		return

	RegisterConCommandTriggeredCallback( "+zoom", PlayerADSPressed )
	RegisterConCommandTriggeredCallback( "-zoom", PlayerADSReleased )
	RegisterConCommandTriggeredCallback( "+toggle_zoom", PlayerADSPressed )
	RegisterConCommandTriggeredCallback( "-toggle_zoom", PlayerADSReleased )

	OnThreadEnd(
		function() : ( player )
		{
			DeregisterConCommandTriggeredCallback( "+zoom", PlayerADSPressed )
			DeregisterConCommandTriggeredCallback( "-zoom", PlayerADSReleased )
			DeregisterConCommandTriggeredCallback( "+toggle_zoom", PlayerADSPressed )
			DeregisterConCommandTriggeredCallback( "-toggle_zoom", PlayerADSReleased )

			if ( IsValid( player ) )
				player.SetFOVScale( 1.0, 0.25 )
		}
	)

	EndSignal( player, "PlayerPlaneStatusChanged" )
	EndSignal( player, "FreefallStarted" )
	EndSignal( player, "FreefallEnded" )
	EndSignal( player, "OnDeath" )
	EndSignal( player, "OnDestroy" )

	while( PlayerMatchState_GetFor( player ) < ePlayerMatchState.SKYDIVE_FALLING )
	{
		player.SetFOVScale( file.adsPressed ? 0.5 : 1.0, file.adsPressed ? 0.25 : 0.5 )
		WaitFrame()
	}
}

void function PlayerADSPressed( entity player )
{
	file.adsPressed = true
}

void function PlayerADSReleased( entity player )
{
	file.adsPressed = false
}

void function PlayerTryRelinquishSquadLeaderOrBreakFromSquad( entity player )
{
	if ( !player.GetPlayerNetBool( "playerInPlane" ) )
		return

	if ( player.GetPlayerNetBool( "isJumpmaster" ) && player.GetPlayerNetBool( "isJumpingWithSquad" ) )
	{
		
		thread HoldTryRelinquishSquadLeaderOrBreakFromSquadTimer( player, 1.0, "#SURVIVAL_INTRO_PROMPT_RELINQUISH", "ClientCommand_Sur_RelinquishJumpMaster" )
	}
	else if ( player.GetPlayerNetBool( "isJumpingWithSquad" ) )
	{
		
		thread HoldTryRelinquishSquadLeaderOrBreakFromSquadTimer( player, 1.0, "#SURVIVAL_INTRO_PROMPT_LEAVE","ClientCommand_Sur_RemoveFromSquad" )
	}
	else if ( IsValid( GetJumpmasterForTeam( player.GetTeam() ) ) )
	{
		
		thread HoldTryRelinquishSquadLeaderOrBreakFromSquadTimer( player, 0.5, "#SURVIVAL_INTRO_PROMPT_JOIN","ClientCommand_Sur_ReturnToSquad" )
	}
}

void function SignalReleasedTryRelinquishSquadLeaderOrBreakFromSquad( entity player )
{
	player.Signal( "CancelTryRelinquishSquadLeaderOrBreakFromSquad" )
}

void function HoldTryRelinquishSquadLeaderOrBreakFromSquadTimer( entity player, float holdTime, string hint, string command )
{
	player.EndSignal( "OnDeath" )
	player.EndSignal( "CancelTryRelinquishSquadLeaderOrBreakFromSquad" )

	if ( !HasHoldButtonAction() )
		return


	if ( NewPlayerBotQueueAreEnabled() && !AreMultipleHumansInTeam( player.GetTeam() ) )
	{
		RuiSetBool( file.sqadLeaderBoxRui, "holdingButton", false )
		return
	}


	float margin = 0.2

	RuiSetString( file.sqadLeaderBoxRui, "holdButtonHint", hint )
	RuiSetBool( file.sqadLeaderBoxRui, "holdingButton", true )
	RuiSetGameTime( file.sqadLeaderBoxRui, "holdButtonStartTime", Time() )
	RuiSetGameTime( file.sqadLeaderBoxRui, "holdButtonEndTime", Time() + holdTime + margin )

	OnThreadEnd(
		function() : ()
		{
			if ( IsValid( file.sqadLeaderBoxRui ) )
			{
				RuiSetBool( file.sqadLeaderBoxRui, "holdingButton", false )
			}
		}
	)

	wait holdTime

	if ( !HasHoldButtonAction() )
		return

	Remote_ServerCallFunction( command )

	wait margin
}

bool function HasHoldButtonAction( bool requirePlane = true )
{
	entity player = GetLocalClientPlayer()
	int team = player.GetTeam()

	if ( requirePlane && !player.GetPlayerNetBool( "playerInPlane" ) )
		return false

	
	if ( player.GetPlayerNetBool( "isJumpmaster" ) )
		return GetNumPlayersJumpingWithSquad( team ) > 1

	
	if ( !player.GetPlayerNetBool( "isJumpingWithSquad" ) )
		return GetNumPlayersJumpingWithSquad( team ) > 0 && IsValid( GetJumpmasterForTeam( team ) )

	
	return true
}

void function SURVIVAL_DroppingSolo( entity ent, entity eventEntity )
{
	Obituary_Print_Localized( Localize( "#SURVIVAL_HUD_DROPPING_SOLO", ent.GetPlayerName() ), GetChatTitleColorForPlayer( ent ) )
}

void function SURVIVAL_RelinquishedJumpmaster( entity ent, entity otherPlayer )
{
	Obituary_Print_Localized( Localize( "#SURVIVAL_HUD_RELINQUISHED_LEADERSHIP", ent.GetPlayerName(), otherPlayer.GetPlayerName() ), GetChatTitleColorForPlayer( ent ) )
}

void function SURVIVAL_NewJumpmaster( entity ent, entity eventEntity )
{
	if ( IsValid( ent ) )
		Obituary_Print_Localized( Localize( "#SURVIVAL_HUD_NEW_LEADERSHIP", ent.GetPlayerName() ), GetChatTitleColorForPlayer( ent ) )
}

void function SURVIVAL_RejoinedSquad( entity ent, entity eventEntity )
{
	Obituary_Print_Localized( Localize( "#SURVIVAL_HUD_REJOINED_SQUAD", ent.GetPlayerName() ), GetChatTitleColorForPlayer( ent ) )
}

