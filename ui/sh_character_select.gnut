












const asset BACKGROUND_SMOKE_MODEL = $"mdl/levels_terrain/mp_lobby/mp_character_select_smoke.rmdl" 
const asset BACKGROUND_GEO_MODEL = $"mdl/levels_terrain/mp_lobby/mp_character_select_geo.rmdl" 
const asset LIGHT_RIG_MDL = $"mdl/empty/lights/empty_lights.rmdl"

global const string CHARACTER_SELECT_NETVAR_LOCK_STEP_INDEX = "characterSelectLockstepIndex"
global const string CHARACTER_SELECT_NETVAR_LOCK_STEP_START_TIME = "characterSelectLockstepStartTime"
global const string CHARACTER_SELECT_NETVAR_LOCK_STEP_END_TIME = "characterSelectLockstepEndTime"
global const string CHARACTER_SELECT_NETVAR_HAS_LOCKED_IN_CHARACTER = "hasLockedInCharacter"
global const string CHARACTER_SELECT_NETVAR_LOCKED_IN_CHARACTER_TIME = "lockedInCharacterTime"

global const string CHARACTER_SELECT_NETVAR_LOCK_STEP_PLAYER_INDEX = "characterSelectLockstepPlayerIndex"
global const string CHARACTER_SELECT_NETVAR_FOCUS_CHARACTER_GUID = "characterSelectFocusCharacterGUID"

const string REMOTE_SERVERCALL_ON_RESELECT_MENU_OPEN = "ClientToServer_OnCharacterReselectMenuOpen"
const string REMOTE_SERVERCALL_ON_RESELECT_MENU_CLOSE = "ClientToServer_OnCharacterReselectMenuClose"









global function UI_InitCharacterSelectMenu
global function UI_RunCharacterSelect




global function UI_CloseCharacterSelect
global function ClientToUI_UpdateSquadMute
global function UI_ClearUIShelves

global function ClientToUI_UpdateHighlightedCharacter



global function CharacterSelectSkinSelectionIsEnabled





global const int NUM_CHARACTER_SELECT_BUTTONS = 50






























































































































struct FileForeverStruct
{
	var menu



}
FileForeverStruct& fileForever


struct FileLevelStruct
{

		bool isBrowseMode = false
		bool browseModeShowLockedCharacters = false
		float isBrowseModeStartTime













































































































































}

struct CharacterLists {
	array<ItemFlavor> shipping
	array<ItemFlavor> unlocked
	array<ItemFlavor> unlockedByBattlepass
	array<ItemFlavor> unlockedByBotMode
	array<ItemFlavor> unlockableInNewPlayerPass
	array<ItemFlavor> locked
	array<ItemFlavor> disabled
	array<ItemFlavor> all
}

global enum SquadPresentationStartTimePhases
{



	squadPresentationStartTime,
	mvpPresentationStartTime,
	championSquadPresentationStartTime,
	podiumStartTime,
	finalEndTime
}

global function Character_GetSquadPresentationStartTime
global function Character_IsCharacterUnlockedForCalevent
global function Character_IsUnlockedForBattlePassV2

FileLevelStruct& fileLevel

struct {
	array< void functionref() > Callbacks_OnCharacterMenuOpened
	array< void functionref() > Callbacks_OnCharacterMenuClosed
	array< void functionref(ItemFlavor) > Callbacks_OnCharacterFocused
	array< void functionref(ItemFlavor) > Callbacks_OnCharacterLocked
	array< void functionref(bool) > Callbacks_OnCharacterDetailsToggled















} file










void function UI_InitCharacterSelectMenu( var newMenuArg )

{
	fileForever.menu = newMenuArg 

	AddMenuEventHandler( newMenuArg, eUIEvent.MENU_NAVIGATE_BACK, UI_OnCharacterSelectMenu_NavBack )

	AddMenuFooterOption( newMenuArg, RIGHT, BUTTON_X, true, "", "", UI_OnLoadoutButton_RightClick ) 
	AddMenuFooterOption( newMenuArg, RIGHT, MOUSE_RIGHT, true, "", "", UI_OnLoadoutButton_RightClick ) 

	AddMenuFooterOption( newMenuArg, RIGHT, BUTTON_Y, true, "", "", UI_OnToggleMuteButtonClick, UI_ShouldShowToggleMuteFooter ) 
	AddMenuFooterOption( newMenuArg, RIGHT, KEY_F, true, "", "", UI_OnToggleMuteButtonClick, UI_ShouldShowToggleMuteFooter ) 

	AddMenuEventHandler( newMenuArg, eUIEvent.MENU_CLOSE, void function() {
		RunClientScript( "OnCharacterSelectMenuClosed_RemoveCallbacks" )
	} )

	ToolTips_AddMenu( newMenuArg )


		AddMenuFooterOption( newMenuArg, RIGHT, KEY_ENTER, true, "", "", UI_OnLoadoutButton_Enter )

}








bool function UI_ShouldShowToggleMuteFooter()
{
	return IsFullyConnected() ? SquadMuteLegendSelectEnabled() : false
}

void function UI_OnLoadoutButton_Enter( var button )
{
	var chatbox = Hud_GetChild( fileForever.menu, "LobbyChatBox" )

	if ( !HudChat_HasAnyMessageModeStoppedRecently() )
		Hud_StartMessageMode( chatbox )

	Hud_SetVisible( chatbox, true )
}

void function UI_OnLoadoutButton_RightClick( var button )
{
	if ( CanRunClientScript() )
		RunClientScript( "OnLoadoutButton_RightClick" )
}


void function UI_OnToggleMuteButtonClick( var button )
{
	if ( CanRunClientScript() )
		RunClientScript( "UIToClient_ToggleMute" )
}

void function ClientToUI_UpdateSquadMute( bool muteState )
{

}

void function ClientToUI_UpdateHighlightedCharacter( string charGuid )
{
	SettingsAssetGUID characterGuid = ConvertItemFlavorGUIDStringToGUID( charGuid )
	ItemFlavor character = GetItemFlavorByGUID( characterGuid )

	RTKCharacterSkillsModel_SetCharacter( character )
	RTKLegendUpgradeTree_SetCharacter( character )
	RTKLegendUpgradeTree_IsInteractable( false )
	RTKLegendUpgradeTree_SetTitleVisibility( false )
	RTKLegendUpgradeTree_SetDescriptionVisibility( false )
}




























































bool function CharacterSelectSkinSelectionIsEnabled()
{
	return GetCurrentPlaylistVarBool( "character_select_do_skin_selection", false )
}














































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































void function UI_RunCharacterSelect( bool isBrowseMode, bool menuEntsExist )
{
	if ( !isBrowseMode )
		CloseAllMenus()

	fileLevel.isBrowseMode = isBrowseMode
	fileLevel.isBrowseModeStartTime = UITime()

	if ( !CanRunClientScript() )
		return

	if ( !menuEntsExist )
		SetBlurEnabled( true )

	FlashGameWindow()
	RunClientScript( "_OpenCharacterSelectMenu", fileForever.menu )
	AdvanceMenu( fileForever.menu )
}






























































































































































































































































































































































































































































































































































































































































































void function UI_ClearUIShelves()
{
	var portraitsPanel = Hud_GetChild( GetMenu( "CharacterSelectMenu" ), "PortraitsPanel" )

	Hud_SetVisible( Hud_GetChild( portraitsPanel, "assaultShelf" ) , false )
	Hud_SetVisible( Hud_GetChild( portraitsPanel, "SkirmisherShelf" ) , false )
	Hud_SetVisible( Hud_GetChild( portraitsPanel, "reconShelf" ) , false )
	Hud_SetVisible( Hud_GetChild( portraitsPanel, "supportShelf" ) , false )
	Hud_SetVisible( Hud_GetChild( portraitsPanel, "controllerShelf" ) , false )

}

void function UI_OnCharacterSelectMenu_NavBack()
{
	
	if ( fileLevel.isBrowseMode )
	{
		RunClientScript( "CloseCharacterSelectMenu" )
		return
	}

	RunClientScript( "Client_TryUnlockCharacter" )
}

void function UI_CloseCharacterSelect()
{
	SetBlurEnabled( false )
	if ( GetActiveMenu() == fileForever.menu



			)
		CloseActiveMenu()
	else if ( MenuStack_Contains( fileForever.menu ) )
	{
		CloseMenu( fileForever.menu )
		MenuStack_Remove( fileForever.menu )
	}




}




























































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































bool function IsCharacterReselectEnabled()
{
	return GetCurrentPlaylistVarBool( "character_reselect_enabled", false )
}

































































































































bool function Character_IsCharacterUnlockedForCalevent( ItemFlavor characterItemFlavor )
{
	return TempUnlock_IsCharacterUnlocked( characterItemFlavor )
}

bool function Character_IsUnlockedForBattlePassV2( entity player, ItemFlavor charFlav )
{
	
	


		ItemFlavor ornull currentBPV2Flav = GetActiveBattlePassV2()
		bool ownsUltimatePlusBP = false
		if ( currentBPV2Flav != null )
		{
			expect ItemFlavor( currentBPV2Flav )
			ownsUltimatePlusBP = DoesPlayerOwnUltimatePlusBattlePass( player, currentBPV2Flav )
		}

		
		
		return ownsUltimatePlusBP




}

float function Character_GetSquadPresentationStartTime( int phase, float beginingOfSquadPresentation )
{







	float squadPresentationStartTime = beginingOfSquadPresentation + CharSelect_GetOutroAllSquadsPresentDuration()

	if( phase == SquadPresentationStartTimePhases.squadPresentationStartTime )
		return squadPresentationStartTime

	float mvpPresentationStartTime = squadPresentationStartTime + CharSelect_GetOutroSquadPresentDuration()
	if( phase == SquadPresentationStartTimePhases.mvpPresentationStartTime )
		return mvpPresentationStartTime

	float championSquadPresentationStartTime = mvpPresentationStartTime + CharSelect_GetOutroMVPPresentDuration()
	if( phase == SquadPresentationStartTimePhases.championSquadPresentationStartTime )
		return championSquadPresentationStartTime

	float podiumPresentationStartTime = championSquadPresentationStartTime + CharSelect_GetOutroChampionPresentDuration()
	if( phase == SquadPresentationStartTimePhases.podiumStartTime )
		return podiumPresentationStartTime

	int introPodiumSequenceCount = GetCurrentPlaylistVarInt( "podium_intro_screen_count", 0 )
	float introPodiumDuration = GetCurrentPlaylistVarFloat( "podium_intro_screen_duration", DEFAULT_PODIUM_DURATION )

	float finalEndTime = podiumPresentationStartTime + ( introPodiumSequenceCount * introPodiumDuration )
	return finalEndTime
}