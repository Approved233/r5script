global function PIN_Init
global function PIN_Customization
global function PIN_UltimateReadyPing
global function PIN_DynamicDialogue
global function PIN_NET_TraceRouteResult


global function UICodeCallback_PINEvent
global function PIN_Shutdown
global function PIN_PageView
global function PIN_Message
global function PIN_UM_Message
global function PIN_LobbyPopUp_Event
global function PIN_Survey
global function PIN_Settings
global function PIN_Settings_SetMainProfile
global function PIN_UIInteraction_Select
global function PIN_ComicPageView
global function PIN_QuestTextView
global function PIN_StoryTrackerPageView
global function PIN_Store_EventButton
global function PIN_Store_Message
global function PIN_PageView_Store
global function PIN_PageView_Offer
global function PIN_PlayerTagChange













global function PIN_BattlepassPurchase
global function PIN_BattlepassMilestonePageView
global function PIN_UIInteraction_PersonalisedStoreInteraction
global function PIN_UIInteraction_OnClick
global function PIN_UIInteraction_OnScroll
global function PIN_UIInteraction_OnChallengeTracked
global function PIN_UIInteraction_OnBattlepassPageChange
global function PIN_UIInteraction_OnBattlepassItemSelected

global function PIN_UIInteraction_OnBattlepassV2ItemSelected
global function PIN_UIInteraction_OnBattlepassV2TrackSelected
global function PIN_UIInteraction_OnBattlepassV2PaginationScroll

global function PIN_UIInteraction_PersonalisedStoreReveal

global function PIN_PageView_EventsTab
global function PIN_PageView_EventsTabOffer
global function PIN_PageView_EventsTabMilestoneInfoPage
global function PIN_PageView_EventsTabMilestoneViewPurchasePanel
global function PIN_PageView_StoreMilestone
global function PIN_PageView_StoreMilestoneOffer
global function PIN_PageView_StoreMilestoneInfoPage
global function PIN_PageView_StoreMilestoneViewPurchasePanel
global function PIN_PageView_ImageButtonModal

global function PIN_PageView_ChallegeMainMenu
global function PIN_PageView_ChallegeMainMenuTile
global function PIN_PageView_ChallegeMenuBlock
global function PIN_PageView_ChallegeMenuInspectChallenge

global function SetCurrentHubForPIN
global function SetCurrentTabForPIN
global function SetCachedOfferAlias
global function GetLastMenuIDForPIN
global function SetLastMenuIDForPIN
global function GetMatchPINData
global function UpdateMatchPINData
global function ClearMatchPINData


global enum ePINPromoMessageStatus
{
	CLICK,
	IMPRESSION,
	CONVERSION,
}

struct
{
	float startupTime






		string currentHubForPIN = ""
		string currentTabForPIN = ""
		string cachedOfferAlias = ""
		string pin_lastMenuId = ""
		table matchPinData = {}

} file

table function PIN_GetPIDM( entity player )
{
	table pidm = {}

	pidm.nucleus <- player.GetPINNucleusId()






		
		if ( PCPlat_IsSteam() )
		{
			pidm.steamuid_hash <- player.GetPINPlatformId()
		}




	return pidm
}

table function PIN_StandardHeader()
{
	entity player = GetLocalClientPlayer()

	return {
		pid				= player.GetPINNucleusPid()
		pidm			= PIN_GetPIDM( player ),
		pidt			= "persona",
		game_type		= "online",
		mode_type		= "multiplayer",




		plat			= player.GetPlayerPINPlatformName(),
		title_id		= player.GetPlayerPINTitleId(),
		sid				= PIN_GetSessionId(),
	}
}


void function PIN_Init()
{

	file.startupTime = UITime()





		CreatePINTelemetryHeader( 2,0, 
			{
			}
		)







}


void function UICodeCallback_PINEvent( string eventName, table params )
{
	if ( eventName == "boot_start" )
		file.startupTime = UITime() 

	AddPINTelemetryEvent( eventName, PIN_StandardHeader(), params )
}

void function PIN_Shutdown()
{
	AddPINTelemetryEvent( "boot_end",
		PIN_StandardHeader(),
		{
			end_reason = "normal",
			sdur = PIN_GetSessionDuration(),
		}
	)
}



void function PIN_PageView( string menuName, float openDuration, string fromId, bool isDialog, table metaData )
{
	if ( openDuration < 1.0 )
		return

	metaData = PIN_GetSpecialMetaData( isDialog, metaData, menuName )

	AddPINTelemetryEvent( "page_view",
		PIN_StandardHeader(),
		{
			ldur = 0
			pgdur = int( openDuration )
			pgid = menuName.tolower()
			fromid = fromId.tolower()
			type = isDialog ? "popup" : "menu"
			meta = metaData
		}
	)
}





table function PIN_GetSpecialMetaData( bool isDialog, table metaData, string menuName )
{
	if ( isDialog )
	{
		metaData[ "hub_name" ] = file.currentHubForPIN
		if ( "tab_name" in metaData )
			metaData[ "tab_name" ] = file.currentTabForPIN
		else
			metaData[ "tab_name" ] <- file.currentTabForPIN
	}

	
	if ( metaData[ "hub_name" ] == "PassPurchaseMenu" || metaData[ "hub_name" ] == "BattlePassAboutPage1")
	{
		metaData[ "hub_name" ] = "SeasonPanel"







			if ( "tab_name" in metaData )
				metaData[ "tab_name" ] = "RTKBattlepassPanel"
			else
				metaData[ "tab_name" ] <- "RTKBattlepassPanel"

	}
	else if ( metaData[ "hub_name" ] == "ConfirmPurchaseDialog" || metaData[ "hub_name" ] == "StoreInspectMenu" || metaData[ "hub_name" ] == "ConfirmPackBundlePurchaseDialog" )
	{
		metaData[ "hub_name" ] = file.currentHubForPIN
		if ( "tab_name" in metaData )
			metaData[ "tab_name" ] = file.currentTabForPIN
		else
			metaData[ "tab_name" ] <- file.currentTabForPIN

		if ( !("item_name" in metaData) )
			metaData[ "item_name" ] <- file.cachedOfferAlias
	}

	if ( menuName == "menu_ConfirmPackBundlePurchaseDialog" )
	{
		if ( "item_name" in metaData )
			metaData[ "item_name" ] = file.cachedOfferAlias
		else
			metaData[ "item_name" ] <- file.cachedOfferAlias

	}

	
	if ( "tab_name" in metaData && metaData[ "tab_name" ] == "InspectPanel" )
	{
		metaData[ "hub_name" ] = file.currentHubForPIN
		metaData[ "tab_name" ] = file.currentTabForPIN
	}

	return metaData
}



void function PIN_ComicPageView( string currentID, string previousID, float viewDuration )
{
	AddPINTelemetryEvent( "page_view",
		PIN_StandardHeader(),
		{
			ldur = 0
			pgdur = viewDuration
			pgid = currentID
			fromid = previousID
			type = "comic"
		}
	)
}

void function PIN_QuestTextView( string currentID, string previousID, float viewDuration )
{
	AddPINTelemetryEvent( "page_view",
		PIN_StandardHeader(),
		{
			ldur = 0
			pgdur = viewDuration
			pgid = currentID
			fromid = previousID
			type = "quest_text"
		}
	)
}

void function PIN_StoryTrackerPageView( string currentID, string previousID, float viewDuration )
{
	AddPINTelemetryEvent( "page_view",
		PIN_StandardHeader(),
		{
			ldur = 0
			pgdur = viewDuration
			pgid = currentID
			fromid = previousID
			type = "story_tracker"
		}
	)
}




void function PIN_Message( string titleText, string messageText, string msgType, bool isClick )
{
	string msg_idString = titleText.len() > 128 ? titleText.tolower().slice( 0, 128 ) : titleText.tolower()
	string msg_status = isClick ? "click" : "impression"

	printf( "PIN_Message type: %s, msgType: %s, title: %s", msg_status, msgType, msg_idString )
	AddPINTelemetryEvent( "message",
		PIN_StandardHeader(), {
			sdur 	= PIN_GetSessionDuration()
			msg_id  = msg_idString
			service = "game"
			status  = msg_status
			type    = "in_game"
			custom = {
				msg_type = msgType
			}
		}
	)
}




string function PIN_GetMessageStatusText( int msgStatus )
{
	switch ( msgStatus )
	{
	case ePINPromoMessageStatus.CLICK:
		return "click"
	case ePINPromoMessageStatus.IMPRESSION:
		return "impression"
	case ePINPromoMessageStatus.CONVERSION:
		return "conversion"
	}
	return ""
}




void function PIN_UM_Message( string titleText, string trackingId, string msgType, int msgStatus, int position )
{
	string msg_idString = titleText.len() > 128 ? titleText.tolower().slice( 0, 128 ) : titleText.tolower()
	string msg_status = PIN_GetMessageStatusText( msgStatus )

	printf( "%s status: %s, msgType: %s, title: %s, tile_position: %i, trackingid: %s",
		FUNC_NAME(), msg_status, msgType, msg_idString, position, trackingId )

	AddPINTelemetryEvent( "message",
		PIN_StandardHeader(), {
			sdur 	= PIN_GetSessionDuration()
			msg_id  = msg_idString
			service = "game"
			status  = msg_status
			type    = "in_game"
			en      = "message"
			service = "aruba"
			count 	= 1
			track   = {
				trackingtag = trackingId,
				data = {
					tile_position = position
				}
			},
			custom = {
				msg_type = msgType
			}
		}
	)
}
void function PIN_LobbyPopUp_Event( string popupType, int status )
{
	string msg_status = PIN_GetMessageStatusText( status )
	AddPINTelemetryEvent( "message",
		PIN_StandardHeader(),
		{
			sdur = PIN_GetSessionDuration()
			service = "game"
			status = msg_status
			type = "in_game"
			en = "message"
			service = "aruba"
			count = 1
			custom =
			{
				msg_type = popupType
			}
		}
	)
}




void function PIN_Survey( int surveyType, string questionText, string aOptionText, string bOptionText, string answerText, string matchId, float sampleRate, bool ignored )
{
	if ( surveyType == eSurveyType.POSTGAME )
	{
		if ( !("mid" in file.matchPinData) )
			return
		if ( !("map" in file.matchPinData) )
			return
		if ( !("match_type" in file.matchPinData) )
			return
	}

	string msg_idString = questionText.len() > 128 ? questionText.tolower().slice( 0, 128 ) : questionText.tolower()
	AddPINTelemetryEvent( "survey",
		PIN_StandardHeader(), {
			complete_flag = ignored ? "empty" : "complete",
			status = "sent",
			survey_id = msg_idString,
			type = GetEnumString( "eSurveyType", surveyType ).tolower(),
			

			json = {
				properties = {
					sample_rate = sampleRate
					mid = matchId
					map = file.matchPinData["map"]
					match_type = file.matchPinData["match_type"]
				}

				choices = [
					aOptionText,
					bOptionText
				]

				responses = [
					ignored ? "NA" : answerText
				]

				questionText = questionText
			}
		}
	)
}




void function PIN_Settings( table settingsTable )
{
	AddPINTelemetryEvent( "settings",
		PIN_StandardHeader(),
		{
			settings = settingsTable
			status  = "update"
			type    = "preferences"
		}
	)
	PIN_ScheduleNextSettingsEvent()
}



void function PIN_Settings_SetMainProfile( string lastHardware, string currentHardware, string lastPersonaId, string currentPersonaId )
{
	bool hasLastAccount = lastHardware.len() > 0;

	table accountMetadataTable = {
		current_account  = currentPersonaId,
		current_platform = currentHardware.tolower(),
		current_account_type = "persona",

		current_account_updated_time = GetISODateTime(),

		last_account      = hasLastAccount ? lastPersonaId : "",
		last_platform     = hasLastAccount ? lastHardware.tolower() : "",
		last_account_type = hasLastAccount ? "persona" : "",
	}

	table settingsTable = {
		persistant_account_metadata = accountMetadataTable,
	}

	PIN_Settings( settingsTable )
}



void function PIN_UIInteraction_Select( string menuName, string objectName, var jsonTable )
{
	AddPINTelemetryEvent( "ui_interaction",
		PIN_StandardHeader(),
		{
			action = "selection"
			mdur = 0
			object_id = objectName.tolower()
			pgid = menuName.tolower()
			online_friend_cnt = GetUniqueOnlineFriendCount()
			interaction_attr = jsonTable
		}
	)
}



void function PIN_Store_EventButton ( string fromId )
{
	AddPINTelemetryEvent( "store_eventbutton",
		PIN_StandardHeader(),
		{
			fromid = fromId.tolower()
		}
	)
}

void function PIN_Store_Message( string msgType, int status )
{
	string msg_status = PIN_GetMessageStatusText( status )
	AddPINTelemetryEvent( "message",
		PIN_StandardHeader(),
		{
			count = 1
			custom =
			{
				msg_type = msgType
			}
			en = "message"
			sdur = PIN_GetSessionDuration()
			service = "aruba"
			status = msg_status
			type = "in_game"
		}
	)
}



void function PIN_PlayerTagChange( string playerTag )
{
	AddPINTelemetryEvent( "player_tag",
		PIN_StandardHeader(),
		{
			action = "change"
			player_tag = playerTag
		}
	)
}


void function PIN_Customization( ItemFlavor ornull context, ItemFlavor itemFlavor, string customizeAction, int index = 0 )
{
	string customizeTarget
	string customizeType
	string customizeClass = "NULL"

	string selection1 = "NULL"
	string selection1_rarity = "NULL"
	string selection2 = "NULL"
	string selection2_rarity = "NULL"
	string selection3 = "NULL"
	string selection3_rarity = "NULL"
	string selection4 = "NULL"
	string selection4_rarity = "NULL"
	string selection5 = "NULL"
	string selection5_rarity = "NULL"
	string selection6 = "NULL"
	string selection6_rarity = "NULL"
	string selection7 = "NULL"
	string selection7_rarity = "NULL"
	string selection8 = "NULL"
	string selection8_rarity = "NULL"

	string customizeQuality = ItemFlavor_HasQuality( itemFlavor  ) ? GetPINRarity( ItemFlavor_GetQuality( itemFlavor ) + 1 ) : GetPINRarity( eRarityTier.COMMON )

	int indexToUse = index

	switch ( ItemFlavor_GetType( itemFlavor ) )
	{
		case eItemType.weapon_skin:
			customizeTarget = "weapon"
			customizeType = "skin"
			break

		case eItemType.weapon_charm:
			customizeTarget = "weapon"
			customizeType = "weapon_charm"
			break

		case eItemType.gladiator_card_stat_tracker:
			customizeType = customizeType == "" ? "stat_tracker" : customizeType
		case eItemType.gladiator_card_badge:
			customizeType = customizeType == "" ? "badge" : customizeType
		case eItemType.gladiator_card_stance:
			customizeType = customizeType == "" ? "pose" : customizeType
		case eItemType.gladiator_card_frame:
			customizeType = customizeType == "" ? "frame" : customizeType
		case eItemType.gladiator_card_kill_quip:
			customizeType = customizeType == "" ? "kill_quip" : customizeType
		case eItemType.gladiator_card_intro_quip:
			customizeType = customizeType == "" ? "intro_quip" : customizeType
			customizeTarget = "gladiator_card"
			if ( context != null )
				customizeClass = ItemFlavor_GetHumanReadableRefForPIN_Slow( expect ItemFlavor( context ) )
			break

		case eItemType.emote_icon:
			customizeType = "holospray"
			customizeTarget = "character"
			if ( context != null )
				customizeClass = ItemFlavor_GetHumanReadableRefForPIN_Slow( expect ItemFlavor( context ) )
			break

		case eItemType.character_skin:
			customizeType = customizeType == "" ? "skin" : customizeType
		case eItemType.character_execution:
			customizeType = customizeType == "" ? "finisher" : customizeType
		case eItemType.melee_skin:
			customizeType = customizeType == "" ? "melee" : customizeType
			customizeTarget = "character"
			if ( context != null )
				customizeClass = ItemFlavor_GetHumanReadableRefForPIN_Slow( expect ItemFlavor( context ) )
			break


		case eItemType.sticker:
			int consumable = ConsumableStickersPanel_GetCurrentConsumable()
			customizeType = "sticker"
			customizeTarget = IsValidEnumValue( "eStickerObjectType", consumable ) ? GetEnumString( "eStickerObjectType", consumable ) : "unknown"
			break

	}

	if ( indexToUse <= 0 )
	{
		selection1 = ItemFlavor_GetHumanReadableRefForPIN_Slow( itemFlavor ).tolower()
		selection1_rarity = customizeQuality.tolower()
	}
	else if ( indexToUse == 1 )
	{
		selection2 = ItemFlavor_GetHumanReadableRefForPIN_Slow( itemFlavor ).tolower()
		selection2_rarity = customizeQuality.tolower()
	}
	else if ( indexToUse == 2 )
	{
		selection3 = ItemFlavor_GetHumanReadableRefForPIN_Slow( itemFlavor ).tolower()
		selection3_rarity = customizeQuality.tolower()
	}
	else if ( indexToUse == 3 )
	{
		selection4 = ItemFlavor_GetHumanReadableRefForPIN_Slow( itemFlavor ).tolower()
		selection4_rarity = customizeQuality.tolower()
	}
	else if ( indexToUse == 4 )
	{
		selection5 = ItemFlavor_GetHumanReadableRefForPIN_Slow( itemFlavor ).tolower()
		selection5_rarity = customizeQuality.tolower()
	}
	else if ( indexToUse == 5 )
	{
		selection6 = ItemFlavor_GetHumanReadableRefForPIN_Slow( itemFlavor ).tolower()
		selection6_rarity = customizeQuality.tolower()
	}
	else if ( indexToUse == 6 )
	{
		selection7 = ItemFlavor_GetHumanReadableRefForPIN_Slow( itemFlavor ).tolower()
		selection7_rarity = customizeQuality.tolower()
	}
	else if ( indexToUse == 7 )
	{
		selection8 = ItemFlavor_GetHumanReadableRefForPIN_Slow( itemFlavor ).tolower()
		selection8_rarity = customizeQuality.tolower()
	}

	AddPINTelemetryEvent( "customization",
		PIN_StandardHeader(),
		{
			selection =
			{
				selection1 = selection1
				selection1_rarity = selection1_rarity
				selection2 = selection2
				selection2_rarity = selection2_rarity
				selection3 = selection3
				selection3_rarity = selection3_rarity
				selection4 = selection4
				selection4_rarity = selection4_rarity
				selection5 = selection5
				selection5_rarity = selection5_rarity
				selection6 = selection6
				selection6_rarity = selection6_rarity
				selection7 = selection7
				selection7_rarity = selection7_rarity
				selection8 = selection8
				selection8_rarity = selection8_rarity
				s_class = customizeClass
			},
			target  = customizeTarget,
			type    = customizeType,
			action  = customizeAction,
		}
	)
}


string function GetPINRarity( int tier )
{
	switch ( tier )
			{
		case 0:
		case 1:
			return "common"

		case 2:
			return "rare"

		case 3:
			return "epic"

		case 4:
			return "legendary"

		case 5:
			return "heirloom"

		case 6:
			return "iconic"

		default:
			Assert( false, "Unhandled loot rarity " + tier )
			return "unknown_" + tier
		}

	unreachable
}

















































































































































































































void function PIN_BattlepassPurchase( string currentID, bool isBundle )
{
	AddPINTelemetryEvent( "battlepass_purchase",
		PIN_StandardHeader(),
		{
			pgid = currentID.tolower()
			isBundle = isBundle ? "bundle" : "tier"
		}
	)
}

void function PIN_BattlepassMilestonePageView( string currentID, float openDuration, int currentMilestone, bool hasPurchased, array<string> rewardClicked, int tabIndex )
{
	const float VALID_VIEW_DURATION = 3.0

	if ( openDuration < VALID_VIEW_DURATION )
		return

	table<string, int> rewardTable = { }

	for( int i = 0; i < rewardClicked.len(); i++ )
	{
		string rewardString = rewardClicked[i]

		int colonPos = rewardString.find( ":", 0 )
		string rewardName = rewardString.slice( 0, colonPos )
		int rewardCount = rewardString.slice( colonPos + 1, rewardString.len() ).tointeger()

		rewardTable[rewardName] <- rewardCount;
	}

	AddPINTelemetryEvent( "battlepass_milestone_menu_view",
		PIN_StandardHeader(),
		{
			pgid = currentID.tolower()
			pgdur = openDuration
			milestone_level = currentMilestone
			hasPurchased = hasPurchased
			tabIndex = tabIndex

			rewardIndex = rewardTable
		}
	)
}

void function SetCurrentHubForPIN( string val )
{
	file.currentHubForPIN = val
}

void function SetCurrentTabForPIN( string val )
{
	file.currentTabForPIN = val
}

void function SetCachedOfferAlias( string val )
{
	file.cachedOfferAlias = val
}

string function GetLastMenuIDForPIN()
{
	return file.pin_lastMenuId
}

void function SetLastMenuIDForPIN( string val )
{
	file.pin_lastMenuId = val
}

table function GetMatchPINData()
{
	return file.matchPinData
}

void function UpdateMatchPINData( string pinKey, string pinValue )
{
	file.matchPinData[pinKey] <- pinValue
}

void function ClearMatchPINData()
{
	file.matchPinData = {}
}



void function PIN_UltimateReadyPing( entity player, string pingType, bool isUltinInventory )
{
	AddPINTelemetryEvent( "tag",
		PIN_StandardHeader(),
		{
			tag_type = pingType,
			ult_inv = isUltinInventory,
		}
	)
}

void function PIN_DynamicDialogue( string alias )
{
	AddPINTelemetryEvent( "tag",
		PIN_StandardHeader(),
		{
			tag_type = alias,
		}
	)
}

void function PIN_NET_TraceRouteResult(entity player, table result)
{
	AddPINTelemetryEvent("trace_route_result", PIN_StandardHeader(), result)
}



void function PIN_UIInteraction_OnClick( string menuName, string objectName )
{
	AddPINTelemetryEvent( "ui_interaction",
		PIN_StandardHeader(),
		{
			action = "click"
			object_id = objectName.tolower()
			pgid = menuName.tolower()
			sdur = PIN_GetSessionDuration()
		}
	)
}



void function PIN_UIInteraction_OnScroll( string menuName, string objectName )
{
	AddPINTelemetryEvent( "ui_interaction",
		PIN_StandardHeader(),
		{
			action = "scroll"
			object_id = objectName.tolower()
			pgid = menuName.tolower()
			sdur = PIN_GetSessionDuration()
		}
	)
}



void function PIN_UIInteraction_OnChallengeTracked( string challengeId, bool isTracking )
{
	AddPINTelemetryEvent( "achievement",
		PIN_StandardHeader(),
		{
			achv_id = challengeId.tolower()
			status = isTracking? "track": "untrack"
			type = "challenge"
			sdur = PIN_GetSessionDuration()
		}
	)
}



void function PIN_UIInteraction_OnBattlepassPageChange( bool isClick, string fromName, string toName, int openDuration  )
{
	AddPINTelemetryEvent( "page_view",
		PIN_StandardHeader(),
		{
			click_type = ( isClick )? "click" : "scroll"
			pgid = toName.tolower()
			fromid = fromName.tolower()
			pgdur = openDuration
			type = "menu"
			hud_name = "seasonal"
			tab_name = "battlepass"
		}
	)
}



void function PIN_UIInteraction_OnBattlepassItemSelected( string fromName, string toName, string offerName, int openDuration )
{
	AddPINTelemetryEvent( "page_view",
		PIN_StandardHeader(),
		{
			click_type = "click"
			pgid = toName.tolower()
			fromid = fromName.tolower()
			pgdur = openDuration
			type = "menu"
			hud_name = "seasonal"
			tab_name = "battlepass"
			offer_name = offerName.tolower()
		}
	)
}


void function PIN_UIInteraction_OnBattlepassV2ItemSelected( string pgid, string modelNameString, int openDuration, string offerName )
{
	AddPINTelemetryEvent( "page_view",
		PIN_StandardHeader(),
		{
			pgid = pgid
			fromid = modelNameString
			pgdur = openDuration
			sdur = PIN_GetSessionDuration()
			action = "Prize Inspect"
			offname = offerName
		}
	)
}



void function PIN_UIInteraction_OnBattlepassV2TrackSelected(  string pgid, string trackName, string passModelName, int secondsOnPage, int trackIndex, string trackLevel )
{
	AddPINTelemetryEvent( "ui_interaction",
		PIN_StandardHeader(),
		{
			pgid = pgid
			mdur = secondsOnPage
			sdur = PIN_GetSessionDuration()
			action = "selection"
			object_id = "track_selector"
			hub_name = "seasonal"
			tab_name = passModelName
			interaction_attr = {
				track = trackIndex
				track_level = trackLevel
				track_name = trackName
			}
		}
	)
}



void function PIN_UIInteraction_OnBattlepassV2PaginationScroll( string pgid, string passModelName, int newPage, int openDuration )
{
	AddPINTelemetryEvent( "ui_interaction",
		PIN_StandardHeader(),
		{
			pgid = pgid
			mdur = openDuration
			sdur = PIN_GetSessionDuration()
			action = "scrolling"
			object_id = "prize_track"
			hub_name = "seasonal"
			tab_name = passModelName
			interaction_attr = {
				scroll_page = newPage
			}
		}
	)
}





void function PIN_UIInteraction_PersonalisedStoreInteraction( string menuName, string objectName, int slotNumber, string offerSelectorName, string offerName )
{
	AddPINTelemetryEvent( "ui_interaction",
		PIN_StandardHeader(),
		{
			action = "Offer Inspect"
			object_id = objectName.tolower()
			pgid = menuName.tolower()
			sdur = PIN_GetSessionDuration()

			slot = slotNumber
			slctrname = offerSelectorName
			offname = offerName
		}
	)
}

void function PIN_UIInteraction_PersonalisedStoreReveal( string menuName, string objectName, int slotNumber, string offerSelectorName, string offerName, array<string> userSegments )
{
	AddPINTelemetryEvent( "ui_interaction",
		PIN_StandardHeader(),
		{
			action = "Offer Reveal"
			object_id = objectName.tolower()
			pgid = menuName.tolower()
			sdur = PIN_GetSessionDuration()

			slot = slotNumber
			slctrname = offerSelectorName
			offname = offerName
			userSegment = userSegments
		}
	)
}

void function PIN_PageView_Store( string pageName, string prevPage, int openDuration, int sectionNum, int pageNum, string linkName, string clickType )
{
	table<string, string> metaData
	metaData["hub_name"] <- "store"
	metaData["tab_name"] <- "shop"

	AddPINTelemetryEvent( "page_view",
		PIN_StandardHeader(),
		{
			pgid 		= pageName
			fromid		= prevPage
			pgdur 		= openDuration
			ldur 		= 0
			type 		= "menu"
			meta		= metaData
			h_tab 		= pageNum
			v_tab 		= sectionNum
			link_name 	= linkName
			click_type 	= clickType
		}
	)
}

void function PIN_PageView_Offer( string pageName, string prevPage, int openDuration, int sectionNum, int pageNum, string linkName, string clickType, string offerName, int offerPriority, string slotType )
{
	table<string, string> metaData
	metaData["hub_name"] <- "store"
	metaData["tab_name"] <- "shop"

	AddPINTelemetryEvent( "page_view",
		PIN_StandardHeader(),
		{
			pgid 			= pageName
			fromid 			= prevPage
			pgdur 			= openDuration
			ldur 			= 0
			type 			= "menu"
			meta			= metaData
			h_tab 			= pageNum
			v_tab 			= sectionNum
			link_name 		= linkName
			click_type 		= clickType
			offer_name 		= offerName
			offer_priority 	= offerPriority
			slot_type 		= slotType
		}
	)
}



void function PIN_PageView_EventsTab( string menuName, int openDuration, string fromId, int sectionNum, int pageNum, string linkName, string clickType, string eventName )
{
	if ( openDuration < 1.0 )
		return

	table<string, string> metaData
	metaData["hub_name"] <- "seasonal"
	metaData["tab_name"] <- "event"

	AddPINTelemetryEvent( "page_view",
		PIN_StandardHeader(),
		{
			ldur = 0
			pgdur = openDuration
			pgid = menuName.tolower()
			fromid = fromId.tolower()
			type = "menu"
			meta = metaData
			v_tab			= sectionNum
			h_tab			= pageNum
			link_name		= linkName
			click_type		= clickType

			event			= eventName
		}
	)
}



void function PIN_PageView_EventsTabOffer( string menuName, int openDuration, string fromId, int buttonIndex, string linkName, string clickType, string eventName, string offerAlias, bool isReward )
{
	table<string, string> metaData
	metaData["hub_name"] <- "seasonal"
	metaData["tab_name"] <- "event"

	AddPINTelemetryEvent( "page_view",
		PIN_StandardHeader(),
		{
			ldur = 0
			pgdur = openDuration
			pgid = menuName.tolower()
			fromid = fromId.tolower()
			type = "menu"
			meta = metaData
			button_index = buttonIndex
			link_name		= linkName
			click_type		= "click"

			event			= eventName
			offer_alias		= offerAlias
			offer_type		= isReward ? "milestonereward" : "offer"
		}
	)
}



void function PIN_PageView_EventsTabMilestoneInfoPage( string menuName, int openDuration, string fromId, int pageNum, string infoPageName, string clickType, string milestoneName )
{
	if ( openDuration < 1.0 )
		return

	table<string, string> metaData
	metaData["hub_name"] <- "seasonal"
	metaData["tab_name"] <- "event"

	AddPINTelemetryEvent( "page_view",
		PIN_StandardHeader(),
		{
			ldur = 0
			pgdur = openDuration
			pgid = menuName.tolower()
			fromid = fromId.tolower()
			type = "menu"
			meta = metaData
			h_tab			= pageNum
			link_name		= infoPageName
			click_type		= clickType

			event			= milestoneName
		}
	)
}



void function PIN_PageView_EventsTabMilestoneViewPurchasePanel( string menuName, int openDuration, string fromId, int pageNum, string clickType, string milestoneName, bool asGift = false )
{
	if ( openDuration < 1.0 )
		return

	table<string, string> metaData
	metaData["hub_name"] <- "seasonal"
	metaData["tab_name"] <- "event"

	AddPINTelemetryEvent( "page_view",
		PIN_StandardHeader(),
		{
			ldur = 0
			pgdur = openDuration
			pgid = menuName.tolower()
			fromid = fromId.tolower()
			type = "menu"
			meta = metaData
			h_tab			= pageNum
			link_name		= asGift ? "giftingPurchaseDialog" : "packPurchaseDialog"
			click_type		= clickType

			event			= milestoneName
		}
	)
}



void function PIN_PageView_StoreMilestone( string menuName, int openDuration, string fromId, int pageNum, string linkName, string clickType, string milestoneName )
{
	if ( openDuration < 1.0 )
		return

	table<string, string> metaData
	metaData["hub_name"] <- "store"
	metaData["tab_name"] <- "milestone"

	AddPINTelemetryEvent( "page_view",
		PIN_StandardHeader(),
		{
			ldur = 0
			pgdur = openDuration
			pgid = menuName.tolower()
			fromid = fromId.tolower()
			type = "menu"
			meta = metaData
			h_tab			= pageNum
			link_name		= linkName
			click_type		= clickType

			event			= milestoneName
		}
	)
}



void function PIN_PageView_StoreMilestoneOffer( string menuName, int openDuration, string fromId, int buttonIndex, string linkName, string clickType, string eventName, string offerAlias, bool isReward )
{
	table<string, string> metaData
	metaData["hub_name"] <- "seasonal"
	metaData["tab_name"] <- "event"

	AddPINTelemetryEvent( "page_view",
		PIN_StandardHeader(),
		{
			ldur = 0
			pgdur = openDuration
			pgid = menuName.tolower()
			fromid = fromId.tolower()
			type = "menu"
			meta = metaData
			button_index = buttonIndex
			link_name		= linkName
			click_type		= "click"

			event			= eventName
			offer_alias		= offerAlias
			offer_type		= isReward ? "milestonereward" : "offer"
		}
	)
}



void function PIN_PageView_StoreMilestoneInfoPage( string menuName, int openDuration, string fromId, int pageNum, string infoPageName, string clickType, string milestoneName )
{
	if ( openDuration < 1.0 )
		return

	table<string, string> metaData
	metaData["hub_name"] <- "store"
	metaData["tab_name"] <- "milestone"

	AddPINTelemetryEvent( "page_view",
		PIN_StandardHeader(),
		{
			ldur = 0
			pgdur = openDuration
			pgid = menuName.tolower()
			fromid = fromId.tolower()
			type = "menu"
			meta = metaData
			h_tab			= pageNum
			link_name		= infoPageName
			click_type		= clickType

			event			= milestoneName
		}
	)
}



void function PIN_PageView_StoreMilestoneViewPurchasePanel( string menuName, int openDuration, string fromId, int pageNum, string clickType, string milestoneName, bool asGift = false )
{
	if ( openDuration < 1.0 )
		return

	table<string, string> metaData
	metaData["hub_name"] <- "store"
	metaData["tab_name"] <- "milestone"

	AddPINTelemetryEvent( "page_view",
		PIN_StandardHeader(),
		{
			ldur = 0
			pgdur = openDuration
			pgid = menuName.tolower()
			fromid = fromId.tolower()
			type = "menu"
			meta = metaData
			h_tab			= pageNum
			link_name		= asGift ? "giftingPurchaseDialog" : "packPurchaseDialog"
			click_type		= clickType

			event			= milestoneName
		}
	)
}



void function PIN_PageView_ImageButtonModal( string menuName, float openDuration )
{
	if ( openDuration < 1.0 )
		return

	table<string, string> metaData

	AddPINTelemetryEvent( "page_view",
		PIN_StandardHeader(),
		{
			ldur = 0
			pgdur = int( openDuration )
			pgid = menuName.tolower()
			fromid = ""
			type = "popup"
			meta = metaData
		}
	)
}



void function PIN_PageView_ChallegeMainMenu( string menuName, int openDuration, string fromId, string clickType )
{
	if ( openDuration < 1.0 )
		return
	table<string, string> metaData
	metaData["hub_name"] <- "challenges"
	metaData["tab_name"] <- "challenges"
	AddPINTelemetryEvent( "page_view",
		PIN_StandardHeader(),
		{
			ldur = 0
			pgdur = openDuration
			pgid = menuName.tolower()
			fromid = fromId.tolower()
			type = "menu"
			meta = metaData
			click_type		= clickType
			ui_version = 0
		}
	)
}



void function PIN_PageView_ChallegeMainMenuTile( string menuName, int openDuration, string fromId, string clickType, string challenge_tile )
{
	if ( openDuration < 1.0 )
		return
	table<string, string> metaData
	metaData["hub_name"] <- "challenges"
	metaData["tab_name"] <- "challenges"
	AddPINTelemetryEvent( "page_view",
		PIN_StandardHeader(),
		{
			ldur = 0
			pgdur = openDuration
			pgid = menuName.tolower()
			fromid = fromId.tolower()
			type = "menu"
			meta = metaData
			click_type		= clickType
			challenge_tile  = challenge_tile
			ui_version = 0
		}
	)
}



void function PIN_PageView_ChallegeMenuBlock( string menuName, int openDuration, string fromId, string clickType, string challenge_tile, string challenge_block )
{
	if ( openDuration < 1.0 )
		return
	table<string, string> metaData
	metaData["hub_name"] <- "challenges"
	metaData["tab_name"] <- "challenges"
	AddPINTelemetryEvent( "page_view",
		PIN_StandardHeader(),
		{
			ldur = 0
			pgdur = openDuration
			pgid = menuName.tolower()
			fromid = fromId.tolower()
			type = "menu"
			meta = metaData
			click_type		= clickType
			challenge_tile  = challenge_tile
			challenge_block = challenge_block
			ui_version = 0
		}
	)
}



void function PIN_PageView_ChallegeMenuInspectChallenge( string menuName, int openDuration, string fromId, string clickType, string challenge_tile, string challenge_block, string challenge_id, bool is_narrative_challenge )
{
	if ( openDuration < 1.0 )
		return
	table<string, string> metaData
	metaData["hub_name"] <- "challenges"
	metaData["tab_name"] <- "challenges"
	AddPINTelemetryEvent( "page_view",
		PIN_StandardHeader(),
		{
			ldur = 0
			pgdur = openDuration
			pgid = menuName.tolower()
			fromid = fromId.tolower()
			type = "menu"
			meta = metaData
			click_type				= clickType
			challenge_tile  		= challenge_tile.tolower()
			challenge_block 		= challenge_block.tolower()
			challenge_id 		    = challenge_id
			is_narrative_challenge  = is_narrative_challenge
			ui_version = 0
		}
	)
}

