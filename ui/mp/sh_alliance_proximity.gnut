







global function AllianceProximity_Init
global function AllianceProximity_IsUsingAlliances 
global function AllianceProximity_IsUsingAllianceProximity 
global function AllianceProximity_IsUsingAllianceProximityDistanceChecks 
global function AllianceProximity_GetMaxDistForProximity 
global function AllianceProximity_GetMaxNumAlliances 
global function AllianceProximity_GetMaxNumPlayersPerAlliance 
global function AllianceProximity_GetAllianceFromTeam 
global function AllianceProximity_GetTeamsInAlliance 
global function AllianceProximity_GetRepresentativeTeamForAlliance 
global function AllianceProximity_GetTeamsInSameAllianceAsTeam 
global function AllianceProximity_IsTeamInAnAlliance 
global function AllianceProximity_GetOtherAlliances 
global function AllianceProximity_GetOtherAlliance 
global function AllianceProximity_GetAllAlliances 
global function AllianceProximity_GetAllTeamsOrAlliances 
global function AllianceProximity_GetAllTeamsInAlliances 
global function AllianceProximity_RegisterNonPlayerTeamToAlliances 
global function AddCallback_AllianceProximity_OnTeamPutIntoAlliance 
















































struct {
	array < int > allAlliances
	array < int > allAllianceTeams

	table< int, int > teamToAllianceTable
	table< int, array< int > > allianceToTeamsTable
	array<void functionref( int, int )> callbacks_AllianceProximity_OnTeamPutIntoAlliance


















} file


void function AllianceProximity_Init()
{
#if DEV
		printt( "ALLIANCE PROXIMITY: Running ", FUNC_NAME() )
#endif

#if DEV
		Assert( AllianceProximity_GetMaxNumAlliances() <= 0 || AllianceProximity_GetMaxNumAlliances() <= GetCurrentPlaylistVarInt( "max_teams", 0 ), "ALLIANCE PROXIMITY: Trying to use Alliances but have set more alliances ( " + AllianceProximity_GetMaxNumAlliances() + " ) than squads ( " + GetCurrentPlaylistVarInt( "max_teams", 0 ) + " )" )
#endif

	
	if ( !AllianceProximity_IsUsingAlliances() )
		return

	
	
	
	
	
	
	
	

	Remote_RegisterClientFunction( "AllianceProximity_ServerCallback_SetTeamToAllianceOnClient", "int", TEAM_MULTITEAM_FIRST, TEAM_MULTITEAM_LAST, "int", ALLIANCE_NONE, AllianceProximity_GetMaxNumAlliances() + 1 )
	Remote_RegisterClientFunction( "AllianceProximity_MuteAllianceOnMatchEndReassignment" )

	file.allAllianceTeams = GetAllTeams() 

	
	AllianceProximity_SetTeamsToAlliances()

	
	












}




void function AddCallback_AllianceProximity_OnTeamPutIntoAlliance( void functionref( int, int ) func )
{
	Assert( !file.callbacks_AllianceProximity_OnTeamPutIntoAlliance.contains( func ) )
	file.callbacks_AllianceProximity_OnTeamPutIntoAlliance.append( func )
}



bool function AllianceProximity_IsUsingAlliances()
{
	return AllianceProximity_GetMaxNumAlliances() > 0 && !IsLobby()
}



bool function AllianceProximity_IsUsingAllianceProximity()
{
	return GetCurrentPlaylistVarBool( "use_proximity_alliance_members", false )
}



bool function AllianceProximity_IsUsingAllianceProximityDistanceChecks()
{
	return AllianceProximity_GetMaxDistForProximity() > 0.0 && AllianceProximity_IsUsingAllianceProximity()
}
















































bool function AllianceProximity_IsTeamInAnAlliance( int team )
{
	return team in file.teamToAllianceTable
}


bool function AllianceProximity_ShouldAllTeamsStartOnTheSameAlliance()
{
	return GetCurrentPlaylistVarBool( "start_with_teams_on_same_alliance", false )
}


int function AllianceProximity_GetMaxNumAlliances()
{
	return GetCurrentPlaylistVarInt( "max_alliances", 0 )
}


int function AllianceProximity_GetMaxNumPlayersPerAlliance()
{
	int maxPlayers = GetCurrentPlaylistVarInt( "max_players", 0 )

	if ( maxPlayers <= 0 )
		return 0


		bool tooEarlyToCheckMaxNumAlliances = GetGameState() < eGameState.Playing




	if ( tooEarlyToCheckMaxNumAlliances && AllianceProximity_ShouldAllTeamsStartOnTheSameAlliance() )
		return maxPlayers

	return maxPlayers / AllianceProximity_GetMaxNumAlliances()
}











void function AllianceProximity_RegisterNonPlayerTeamToAlliances( int team )
{
	if ( !AllianceProximity_GetAllTeamsInAlliances( false ).contains( team ) )
	{
#if DEV
			printt( "ALLIANCE PROXIMITY: ", FUNC_NAME(), " adding team: ", team, " to file.allAllianceTeams and putting them on alliance: ", ALLIANCE_A )
#endif
		file.allAllianceTeams.append( team )
		
		AllianceProximity_SetTeamToAlliance_Internal( team, ALLIANCE_A )
	}
}






















int function AllianceProximity_GetAllianceFromTeam( int team )
{
	if ( team < TEAM_MULTITEAM_FIRST )
		return ALLIANCE_NONE

#if DEV
		string teamInAlliances
		foreach( registeredTeam in file.allAllianceTeams )
			teamInAlliances += registeredTeam + " "
		Assert( AllianceProximity_IsTeamInAnAlliance( team ), "ALLIANCE PROXIMITY: Attempted to get an Alliance from a Team that isn't in the teamToAllianceTable, probably didn't run the AllianceProximity_SetTeamsToAlliances function first.\nAlliances ON = " + AllianceProximity_IsUsingAlliances() + "\nTeam = " + team + "\nTeamsInAlliance = " + teamInAlliances )
#endif

	return file.teamToAllianceTable[ team ]
}











































array< int > function AllianceProximity_GetOtherAlliances( int alliance )
{
	array< int > otherAlliances = []

	foreach( key, value in file.allianceToTeamsTable )
	{
		if ( key != alliance )
			otherAlliances.append( key )
	}

	return otherAlliances
}


array < int > function AllianceProximity_GetAllAlliances()
{
	array< int > resultArray = clone file.allAlliances
	return resultArray
}

array < int > function AllianceProximity_GetAllTeamsOrAlliances()
{
	if ( AllianceProximity_IsUsingAlliances() )
		return AllianceProximity_GetAllAlliances()

	return GetAllTeams()
}


array < int > function AllianceProximity_GetAllTeamsInAlliances( bool playerTeamsOnly )
{
	if ( playerTeamsOnly )
		return GetAllTeams()

	
	return clone file.allAllianceTeams
}


int function AllianceProximity_GetOtherAlliance( int alliance )
{
	Assert( AllianceProximity_GetMaxNumAlliances() == 2, "ALLIANCE PROXIMITY: Running " + FUNC_NAME() + " in a mode with maxAlliances not equal to 2, you probably want to use AllianceProximity_GetOtherAlliances" )
	return alliance == ALLIANCE_A ? ALLIANCE_B : ALLIANCE_A
}

































float function AllianceProximity_GetMaxDistForProximity()
{
	return GetCurrentPlaylistVarFloat( "max_dist_proximity_alliance_members", 0.0 )
}













































































































































































array<int> function AllianceProximity_GetTeamsInSameAllianceAsTeam( int playerTeam )
{
	int alliance = AllianceProximity_GetAllianceFromTeam( playerTeam )
	array<int> uniqueAllianceTeams = AllianceProximity_GetTeamsInAlliance( alliance )
	array<int> teamsInSameAllianceAsTeam = []

	foreach ( team in uniqueAllianceTeams )
	{
		if ( team != playerTeam )
			teamsInSameAllianceAsTeam.append( team )
	}

	return teamsInSameAllianceAsTeam
}




















array< int > function AllianceProximity_GetTeamsInAlliance( int alliance )
{
#if DEV
		string alliancesWithTeams
		foreach( tableAlliance, team in file.allianceToTeamsTable )
			alliancesWithTeams += tableAlliance + " "
		Assert( alliance in file.allianceToTeamsTable , "ALLIANCE PROXIMITY: " + FUNC_NAME() + " attempted to get an Alliance that isn't in the allianceToTeamsTable, probably didn't run the AllianceProximity_SetTeamsToAlliances function first.\nAlliances ON = " + AllianceProximity_IsUsingAlliances() + "\nAlliance = " + alliance + "\nAlliances in Table = " + alliancesWithTeams )
#endif

	
	return clone file.allianceToTeamsTable[ alliance ]
}
































































































int function AllianceProximity_GetRepresentativeTeamForAlliance( int alliance )
{
#if DEV
		int maxTeams = GetCurrentPlaylistVarInt( "max_teams", 0 )








#endif









	int repTeam = TEAM_INVALID




















		{
			array<int> teamsInAlliance = AllianceProximity_GetTeamsInAlliance( alliance )

#if DEV
				if ( teamsInAlliance.len() == 0 )
				{
					array < int > otherAlliancesArray = AllianceProximity_GetOtherAlliances( alliance )
					int numTeamsInOtherAlliances = 0

					foreach ( otherAlliance in otherAlliancesArray )
					{
						numTeamsInOtherAlliances += AllianceProximity_GetTeamsInAlliance( otherAlliance ).len()
					}

					if ( numTeamsInOtherAlliances == maxTeams )
						Assert( false, "ALLIANCE PROXIMITY: " + FUNC_NAME() + " tried to get a team from an alliance but there are no teams in alliance " + alliance + " ( looks like all teams got assigned to other alliances ), THIS WILL CAUSE AN INVALID TEAM TO BE RETURNED." )
				}
#endif

			Assert( teamsInAlliance.len() > 0, "ALLIANCE PROXIMITY: " + FUNC_NAME() + " tried to get a team from an alliance but there are no teams in alliance " + alliance + ", THIS WILL CAUSE AN INVALID TEAM TO BE RETURNED." )

			
			
			foreach ( team in teamsInAlliance )
			{
				
				if ( GamemodeUtility_GetIsTeamIndexValidPlayerTeam( team ) )
				{
					repTeam = team
					break
				}
			}
		}

	Assert( repTeam > TEAM_INVALID, "ALLIANCE PROXIMITY: " + FUNC_NAME() + " is going to return an Invalid Team Index." )

	return repTeam
}




































































































void function AllianceProximity_SetTeamsToAlliances()
{
	int allianceIndex = 0
	array<int> allTeams = AllianceProximity_GetAllTeamsInAlliances( false )

	foreach ( team in allTeams )
	{
		AllianceProximity_SetTeamToAlliance_Internal( team, allianceIndex )

		
		if ( !AllianceProximity_ShouldAllTeamsStartOnTheSameAlliance() )
		{
			allianceIndex++

			if ( allianceIndex >= AllianceProximity_GetMaxNumAlliances() )
				allianceIndex = 0
		}
	}
}



void function AllianceProximity_SetTeamToAlliance_Internal( int team, int alliance )
{
	array<int> allTeams = AllianceProximity_GetAllTeamsInAlliances( false )

	if ( !allTeams.contains( team ) )
	{
#if DEV
				Assert( false, "ALLIANCE PROXIMITY: " + FUNC_NAME() + " is trying to change the alliance for a team that doesn't exist: " + team + " if this is intentional try the AllianceProximity_RegisterNonPlayerTeamToAlliances function" )
#endif
		return
	}

	if ( alliance >= AllianceProximity_GetMaxNumAlliances() )
	{
#if DEV
			Assert( false, "ALLIANCE PROXIMITY: " + FUNC_NAME() + " is trying to put team: " + team + " into an invalid alliance: " + alliance )
#endif
		return
	}

	int currentAlliance = team in file.teamToAllianceTable ? file.teamToAllianceTable[ team ] : ALLIANCE_NONE
	if ( currentAlliance == alliance )
	{
		printt( "ALLIANCE PROXIMITY: ", FUNC_NAME(), " Exiting, alliance passed in: ", alliance, " for team: ", team, " is the same as the current alliance: ", currentAlliance )
		return
	}


#if DEV
		printt( "ALLIANCE PROXIMITY: Putting team ", team, " on Alliance ", alliance )
#endif









	
	file.teamToAllianceTable[ team ] <- alliance

	
	foreach( allianceToUpdate in file.allAlliances )
	{
		if ( allianceToUpdate in file.allianceToTeamsTable && file.allianceToTeamsTable[ allianceToUpdate ].contains( team ) )
			file.allianceToTeamsTable[ allianceToUpdate ].fastremovebyvalue( team )
	}

	
	if ( alliance in file.allianceToTeamsTable )
	{
		file.allianceToTeamsTable[ alliance ].append( team )
	}
	else
	{
		file.allianceToTeamsTable[ alliance ] <- [ team ]





	}

	if ( !file.allAlliances.contains( alliance ) )
		file.allAlliances.append( alliance )

	
	foreach ( func in file.callbacks_AllianceProximity_OnTeamPutIntoAlliance )
	{
		func( team, alliance )
	}
}









































































































































































































































































