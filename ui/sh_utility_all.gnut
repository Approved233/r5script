

















































untyped

globalize_all_functions

global const string WHITESPACE_CHARACTERS = "\r\n\t " 














#if DEV
global const bool DEV_FORCE_LOAD_ALL_ENTITIES = false
#endif







#if DEV
global enum eAssetType
{
	ASSETTYPE_CHARACTER,
	ASSETTYPE_WEAPON,
	ASSETTYPE_CHARM,

	_count
}
#endif

global struct PassByReferenceInt
{
	int value
}

global struct PassByReferenceFloat
{
	float value
}

global struct PassByReferenceBool
{
	bool value
}

global struct PassByReferenceVector
{
	vector value
}

global struct PassByReferenceEntity
{
	entity value
}

global struct PassByReferenceString
{
	string value
}

global struct PassByReferenceVar
{
	var value
}

struct
{
	int  lastHostThreadMode
	int  lastScriptPrecacheErrors
	int  lastReportFatal
} file

void function ShUtilityAll_Init()
{
	#document( "DistanceAlongVector", "" )
	#document( "GetClosestPointOnLineSegment", "Get the nearest point on a line segment" )
	#document( "GetDistanceFromLineSegment", "" )
	#document( "GetDistanceSqrFromLineSegment", "" )

	RegisterSignal( "Timeout" )
	RegisterSignal( "CancelTimeout" )



























































}


void function print_dev( ... )
{
#if DEV
		if ( vargc <= 0 )
			return

		local msg = vargv[0]
		if ( PREFIX_PRINTT )
			msg = "<" + getstackinfos( 2 ).func + "> " + msg

		for ( int i = 1; i < vargc; i++ )
			msg = (msg + " " + vargv[i] )

		printl( msg )
#endif
}

void function PrintObject( obj, int indent, int depth, int maxDepth )
{
	if ( IsTable( obj ) )
	{
		if ( depth >= maxDepth )
		{
			printl( "{...}" )
			return
		}

		printl( "{" )
		foreach ( k, v in obj )
		{
			print( TableIndent( indent + 2 ) + k + " = " )
			PrintObject( v, indent + 2, depth + 1, maxDepth )
		}
		printl( TableIndent( indent ) + "}" )
	}
	else if ( IsArray( obj ) )
	{
		if ( depth >= maxDepth )
		{
			printl( "[...]" )
			return
		}

		printl( "[" )
		foreach ( v in obj )
		{
			print( TableIndent( indent + 2 ) )
			PrintObject( v, indent + 2, depth + 1, maxDepth )
		}
		printl( TableIndent( indent ) + "]" )
	}
	else if ( obj != null )
	{
		printl( "" + obj )
	}
	else
	{
		printl( "<null>" )
	}
}

void function ArrayDump( array<var> Array )
{
	for ( int i = 0; i < Array.len(); i++ )
	{
		printl( "index " + i + " is: " + Array[i] )
	}
}

void function TableDump( table Table, int depth = 0 )
{
	if ( depth > 4 )
		return

	foreach ( k, v in Table )
	{
		printl( "Key: " + k + " Value: " + v )
		if ( type( v ) == "table" && depth > 0 )
			TableDump( expect table( v ), depth + 1 )
	}
}

string function TableIndent( int indent )
{
	return ("                                            ").slice( 0, indent )
}

void function PrintTable( tbl, int indent = 0, int maxDepth = 4 )
{
	print( TableIndent( indent ) )
	PrintObject( tbl, indent, 0, maxDepth )
}

void function Dump( package, int depth = 0 )
{
	if ( depth > 6 )
		return

	foreach ( k, v in package )
	{
		for ( int i = 0; i < depth; i++ )
			print( "    " )

		if ( IsTable( package ) )
			printl( "Key: " + k + " Value: " + v )

		if ( IsArray( package ) )
			printl( "Index: " + k + " Value: " + v )

		if ( IsTable( v ) || IsArray( v ) )
			Dump( v, depth + 1 )
	}
}

void function PrintBitField( int bitField )
{
	for ( int bitIndex = 0; bitIndex < 32; bitIndex++ )
	{
		if ( IsBitFlagSet( bitField, (1 << bitIndex) ) )
		{
			printt( "Comparison: ", bitField, "& ( 1 <<", bitIndex, ") = ", bitField & (1 << bitIndex) )
			printt( "BIT SET: ", bitIndex, bitField, 1 << bitIndex )
		}
	}
}

void function AssertParameters( func, int paramCount, string paramDesc )
{
	table funcInfos = expect table( func.getinfos() )
	string funcName = expect string( funcInfos.name )
	
	Assert( funcInfos.parameters.len() == (paramCount + 1), "Function \"" + funcName + "\" must have exactly " + paramCount + " parameters (" + paramDesc + ")." )
}

float function CalcFOVScale( float baseFOV, float zoomScale )
{
	return RadToDeg( atan( tan( DegToRad( baseFOV / 2.0 ) ) / zoomScale ) ) * 2
}

int function CalcZoomMag( float baseFOV, float fov )
{
	float magf = tan( DegToRad( baseFOV/2 ) ) / tan( DegToRad( fov/2 ) )
	return int ( floor( magf + 0.5) )
}

bool function IsBitFlagSet( int bitMask, int flag )
{
	return ( bitMask & flag ) != 0
}

int function SetBitFlag( int bitMask, int flag )
{
	return bitMask | flag
}

int function ClearBitFlag( int bitMask, int flag )
{
	return bitMask & ~flag
}

int function HIWORD( int value )
{
	return (value >> 16) & 0xFFFF
}


int function LOWORD( int value )
{
	return value
}

bool function IsWeaponKeyFieldDefined( string ref, string variable )
{
	var val = GetWeaponInfoFileKeyField_Global( ref, variable )

	if ( val != null )
		return true

	return false
}

string function GetWeaponInfoFileKeyField_GlobalString( string ref, string variable )
{
	var val = GetWeaponInfoFileKeyField_Global( ref, variable )
	Assert( val != null, "Weapon key \"" + variable + "\" does not exist in weapon \"" + ref + "\" !" )
	return expect string( val )
}

string function GetWeaponInfoFileKeyField_WithMods_GlobalString( string ref, array<string> mods, string variable )
{
	var val = GetWeaponInfoFileKeyField_WithMods_Global( ref, mods, variable )
	Assert( val != null, "Weapon key \"" + variable + "\" does not exist in weapon \"" + ref + "\" !" )
	return expect string( val )
}

int function GetWeaponInfoFileKeyField_GlobalInt( string ref, string variable )
{
	var val = GetWeaponInfoFileKeyField_Global( ref, variable )
	Assert( val != null, "Weapon key \"" + variable + "\" does not exist in weapon \"" + ref + "\" !" )
	return expect int( val )
}

int function GetWeaponInfoFileKeyField_WithMods_GlobalInt( string ref, array<string> mods, string variable )
{
	var val = GetWeaponInfoFileKeyField_WithMods_Global( ref, mods, variable )
	Assert( val != null, "Weapon key \"" + variable + "\" does not exist in weapon \"" + ref + "\" !" )
	return expect int( val )
}

float function GetWeaponInfoFileKeyField_WithMods_GlobalFloat( string ref, array<string> mods, string variable )
{
	var val = GetWeaponInfoFileKeyField_WithMods_Global( ref, mods, variable )
	Assert( val != null, "Weapon key \"" + variable + "\" does not exist in weapon \"" + ref + "\" !" )
	return expect float( val )
}

int function GetWeaponInfoFileKeyField_GlobalInt_WithDefault( string ref, string variable, int defaultVal )
{
	var val = GetWeaponInfoFileKeyField_Global( ref, variable )
	return val != null ? expect int( val ) : defaultVal
}


float function GetWeaponInfoFileKeyField_GlobalFloat( string ref, string variable )
{
	var val = GetWeaponInfoFileKeyField_Global( ref, variable )
	Assert( val != null, "Weapon key \"" + variable + "\" does not exist in weapon \"" + ref + "\" !" )
	return expect float( val )
}


bool function GetWeaponInfoFileKeyField_GlobalBool( string ref, string variable )
{
	var val = GetWeaponInfoFileKeyField_Global( ref, variable )
	Assert( val != null, "Weapon key \"" + variable + "\" does not exist in weapon \"" + ref + "\" !" )
	return expect bool( val )
}

vector function GetWeaponInfoFileKeyField_GlobalVectorFloat( string ref, string variable, string delimiter = WHITESPACE_CHARACTERS )
{
	var val = GetWeaponInfoFileKeyField_Global( ref, variable )
	Assert( val != null, "Weapon key \"" + variable + "\" does not exist in weapon \"" + ref + "\" !" )
	expect string( val )
	array<string> arr = split( val, delimiter )
	Assert( arr.len() >= 3, "Vector value \"" + val + " has < 3 arguments" )
	return <float(arr[0]), float(arr[1]), float(arr[2])>
}

vector function GetWeaponInfoFileKeyField_GlobalVectorInt( string ref, string variable, string delimiter = WHITESPACE_CHARACTERS )
{
	var val = GetWeaponInfoFileKeyField_Global( ref, variable )
	Assert( val != null, "Weapon key \"" + variable + "\" does not exist in weapon \"" + ref + "\" !" )
	expect string( val )
	array<string> arr = split( val, delimiter )
	Assert( arr.len() >= 3, "Vector value \"" + val + " has < 3 arguments" )
	return <int(arr[0]), int(arr[1]), int(arr[2])>
}























int function GetReportStyle()
{





		return GetCurrentPlaylistVarInt( "enable_report", 2 )

}



bool function IsSpawner( entity ent )
{
	return (IsValid( ent ) && ent.GetNetworkedClassName() == "spawner")
}

bool function IsValidArrayIndex( int index, int arrayLen )
{
	return (index >= 0) && (index < arrayLen)
}

int function SortAssetAlphabetize( asset a, asset b )
{
	if ( a > b )
		return 1

	if ( a < b )
		return -1

	return 0
}


void function RemoveDupesFromSorted_Asset( array<asset> data )
{
	for ( int i = 0; i < data.len() - 1; i++ )
	{
		if ( data[i] == data[i + 1] )
		{
			data.remove( i )
			i--
		}
	}
}


void function DisablePrecacheErrors()
{
	file.lastHostThreadMode = GetConVarInt( "host_thread_mode" )
	file.lastScriptPrecacheErrors = GetConVarInt( "script_precache_errors" )
	file.lastReportFatal = GetConVarInt( "fs_report_sync_opens_fatal" )









		ClientCommand( "host_thread_mode 0" )
		ClientCommand( "script_precache_errors 0" )
		ClientCommand( "fs_report_sync_opens_fatal 0" )

}

void function RestorePrecacheErrors()
{








		ClientCommand( "host_thread_mode " + file.lastHostThreadMode )
		ClientCommand( "script_precache_errors " + file.lastScriptPrecacheErrors )
		ClientCommand( "fs_report_sync_opens_fatal " + file.lastReportFatal )

}




















int function SortByEntIndex( entity a, entity b )
{
	
	if ( a.GetEntIndex() > b.GetEntIndex() )
		return 1
	else if ( a.GetEntIndex() < b.GetEntIndex() )
		return -1

	return 0
}


string function GetNameForEnum( table<string, int> enumTable, int val )
{
	foreach ( string name, int index in enumTable )
	{
		if ( index == val )
			return name
	}
	return format( "%s() - INVALID: %d", FUNC_NAME(), val )
}

table<string, table<int, string> > reverseEnumLookupMap = {}
bool function BuildEnumReverseLookup( string enumName, bool assertOnDuplicates = true )
{
	table enumTableCopy = expect table(getconsttable()[enumName])

	table<int, string> reverseLookup = {}
	foreach ( string key, int value in enumTableCopy )
	{
		if ( value in reverseLookup )
		{
			Assert( !assertOnDuplicates, "Enum '" + enumName + "' has two keys with value '" + string(value) + "'" )
			return false
		}
		reverseLookup[value] <- key
	}
	reverseEnumLookupMap[enumName] <- reverseLookup
	return true
}


bool function IsValidEnumValue( string enumName, int value )
{
	if ( !(enumName in reverseEnumLookupMap) )
		BuildEnumReverseLookup( enumName )

	return (value in reverseEnumLookupMap[enumName])
}


string function GetEnumString( string enumName, int value )
{
	

	if ( !(enumName in reverseEnumLookupMap) )
		BuildEnumReverseLookup( enumName )

	return reverseEnumLookupMap[enumName][value]
}


string function DEV_GetEnumStringSafe( string enumName, int value )
{
	if ( IsValidEnumValue( enumName, value ) )
		return GetEnumString( enumName, value )

	return "<UNKNOWN ENUM VALUE FOR '" + enumName + "': " + value + ">"
}


string function GetEnumStringSlow( table enumTbl, int value )
{
	foreach ( entryKey, entryValue in enumTbl )
	{
		if ( entryValue == value )
			return expect string(entryKey)
	}

	return "<UNKNOWN ENUM VALUE: " + value + ">"
}


#if DEV
string function DEV_ArrayConcat( array<string> arr, string sep = "," )
{
	string out   = ""
	bool isFirst = true
	foreach ( string part in arr )
	{
		if ( isFirst )
			isFirst = false
		else
			out += sep

		out += part
	}
	return out
}
#endif


int function SortByInventoryIndexAndCount( ConsumableInventoryItem a, ConsumableInventoryItem b )
{
	if ( a.type < b.type )
		return -1
	if ( a.type > b.type )
		return 1

	if ( a.count > b.count )
		return -1
	if ( a.count < b.count )
		return 1

	return 0
}

bool function IsMTXEventActive( string eventPlaylistVar )
{









	return false
}

bool function IsT1Active()
{
	int unixTimeNow = GetUnixTimestamp()
	if ( unixTimeNow > expect int( GetCurrentPlaylistVarTimestamp( "t1_active", UNIX_TIME_FALLBACK_2038 ) ) )
	{
		return true
	}

	return false
}

string function RandomHex( int length = 16 )
{
	string out = ""
	for ( int idx = 0; idx < length; idx++ )
	{
		int c = RandomInt( 16 )
		out += format( "%c", (c < 10 ? '0' : ('A' - 10)) + c )
	}
	return out
}


int function StringHash( string str )
{
	int res    = 0
	int length = str.len()
	for ( int i = 0; i < length; i++ )
	{
		res *= 31
		res += expect int( str[i] )
	}
	return res
}

const float GAMMA = 2.4
vector function LinearToSrgb( vector inputColor )
{
	inputColor.x = (inputColor.x < 0.0031308) ? (inputColor.x > 0.0 ? inputColor.x * 12.92 : inputColor.x) : 1.055 * pow( inputColor.x, 1.0 / GAMMA ) - 0.055
	inputColor.y = (inputColor.y < 0.0031308) ? (inputColor.y > 0.0 ? inputColor.y * 12.92 : inputColor.y) : 1.055 * pow( inputColor.y, 1.0 / GAMMA ) - 0.055
	inputColor.z = (inputColor.z < 0.0031308) ? (inputColor.z > 0.0 ? inputColor.z * 12.92 : inputColor.z) : 1.055 * pow( inputColor.z, 1.0 / GAMMA ) - 0.055

	return inputColor
}


entity function AssertLocalOrServerValidPlayer( entity player )
{



		if ( player == null )
			player = GetLocalClientPlayer()
		Assert( player == GetLocalClientPlayer() )


	return player
}


bool function IsEverythingUnlocked()
{
#if DEV
		if ( GetCurrentPlaylistVarBool( "dev_force_everything_unlocked", false ) )
			return true
#endif

	return EverythingUnlockedConVarEnabled() 
}





























bool function IsInfiniteAmmoEnabled()
{
#if DEV
		if ( GetConVarBool( "sv_infinite_ammo" ) )
			return true
#endif
	return false
}

string function GetMergedPlatformIdForPlayer( entity player )
{

	Assert( player == GetLocalClientPlayer() )


	string platformId = ""



	platformId = HARDWARE_TO_MERGED_PLATFORM[GetHardwareFromName( GetPlayerHardware() )]

	Assert( platformId != "" )
	return platformId
}

bool function IsPCPlatform( int hardwareID )
{
	if ( hardwareID == HARDWARE_PC || hardwareID == HARDWARE_PC_STEAM )
	{
		return true
	}

	return false
}










bool function IsPlayerOneOfCharacters( entity player, array< string > charactersCheck )
{
	ItemFlavor character = LoadoutSlot_GetItemFlavor( ToEHI( player ), Loadout_Character() )
	string characterRef  = ItemFlavor_GetCharacterRef( character ).tolower()

	foreach ( characterCheck in charactersCheck )
	{
		if ( characterRef == characterCheck )
			return true
	}

	return false
}

bool function IsPlayerCharacter( entity player, string characterCheck )
{
	ItemFlavor character = LoadoutSlot_GetItemFlavor( ToEHI( player ), Loadout_Character() )
	string characterRef  = ItemFlavor_GetCharacterRef( character ).tolower()

	if ( characterRef != characterCheck )
		return false

	return true
}

#if DEV
bool function DEV_ForceLoadAllEntityTypes()
{
	return GetCurrentPlaylistVarBool( "dev_force_load_all_entity_types", DEV_FORCE_LOAD_ALL_ENTITIES )
}
#endif










