global function Sh_Challenge_Sets_Init
global function ChallengeCollection_IsEnabled
global function ChallengeCollection_IsEvergreen
global function ChallengeCollection_IsInActiveTimePeriod
global function ChallengeCollection_GetActiveState
global function ChallengeCollection_GetRegisteredCollections
global function ChallengeCollection_GetActiveCollections
global function ChallengeCollection_GetByGUID
global function ChallengeCollection_GetAllChallengeSets
global function ChallengeCollectionFlav_GetMetaChallenge
global function ChallengeCollection_GetAllMetaChallenges
global function ChallengeCollection_GetAllChallenges
global function ChallengeCollection_GetFirstActiveForMetaChallenge
global function ChallengeCollection_HasChallenges
global function ChallengeCollection_GetCharacterUnlockChallenge
global function ChallengeCollection_GetProgress
global function ChallengeCollection_IsComplete
global function ChallengeCollection_GetFirstViewedTime
global function ChallengeCollection_GetNextSetUnlockTimeForPlayer



global function ChallengeCollection_GetEndTime
global function ChallengeSet_GetByGUID
global function ChallengeSet_GetUnlockConditions
global function ChallengeSet_IsUnlockedForPlayer
global function ChallengeSetFlav_GetMetaChallenge
global function ChallengeSet_GetChallenges
global function ChallengeSet_GetProgress
global function ChallengeSet_IsComplete
global function ChallengeSet_GetPersonalTimerForPlayer
global function ChallengeSet_GetMinimumNumberOfChallengesCompletedForUnlock
global function ChallengeSet_MeetsUnlockCompletionRequirements










global struct ChallengeSet
{
	ItemFlavor&            itemFlav 
	ItemFlavor ornull   metaChallenge 
	ItemFlavor ornull   parentCollection
	ChallengeSet ornull	prevLinkInChain
	ChallengeSet ornull	nextLinkInChain
	array< ItemFlavor > challenges

	int globalUnlockTimetamp = 0
	bool hasPersonalTimestamp = false
	int personalUnlockHour = -1
	bool requiresPriorSetMetaCompletion = false
	int metaSetCompletionPercentage = 0
}

global struct ChallengeCollection
{
	ItemFlavor&           itemFlav 
	ItemFlavor ornull     metaChallenge 
	array< ChallengeSet > challengeSets

	int baseAvailabilitySeconds = 0
	bool hasGlobalTimestamps = false
	bool hasPersonalTimestamps = false
	int personalUnlockHour = -1
	bool requiresPriorSetMetaCompletion = false
	int metaSetCompletionPercentage = 0
}

global enum eChallengeCollectionActiveState
{
	ACTIVE,
	INACTIVE_AVAILABILITY_SECONDS,
	INACTIVE_CALEVENT,
	INACTIVE_KEPLER
}

global enum eChallengeSetUnlockConditions
{
	GLOBAL_TIMESTAMP = 1 << 0,
	PERSONAL_TIMESTAMP = 1 << 1,
	PRIOR_SET_META_COMPLETION = 1 << 2,
}


const PLAYLIST_KILLSWITCH_VAR = "challenge_collections_enabled"
const int NUM_CHALLENGE_CHAINS = 5 
const string CHALLENGE_SET_UNLOCK_PVAR = "challengeSetUnlocks"
const string CHALLENGE_SET_UNLOCK_GUID_PVAR = "guid"
const string CHALLENGE_SET_UNLOCK_TIMESTAMP_PVAR = "unlockTimestamp"





struct FileStruct_ChallengeSets
{
	table< int, ChallengeSet > challengeSets
	table< int, ChallengeCollection > challengeCollections
}
FileStruct_ChallengeSets& file

void function Sh_Challenge_Sets_Init()
{
	FileStruct_ChallengeSets fileStruct
	file = fileStruct
	AddCallback_RegisterRootItemFlavors( RegisterBaseChallengeCollectionFlavs )
	AddCallback_OnItemFlavorRegistered( eItemType.challenge_collection, RegisterChallengeCollectionFlavs )









}














void function RegisterBaseChallengeCollectionFlavs()
{
	
	foreach ( asset assetData in GetBaseItemFlavorsFromArray( "challengeCollections" ) )
	{
		if ( assetData == $"" )
		{
			continue
		}

		RegisterItemFlavorFromSettingsAsset( assetData )
	}
}

void function RegisterChallengeCollectionFlavs( ItemFlavor challengeCollectionItemFlav )
{
	asset challengeCollectionAsset = ItemFlavor_GetAsset( challengeCollectionItemFlav )
	SettingsAssetGUID collectionGUID =  ItemFlavor_GetGUID( challengeCollectionItemFlav )

	if ( GetGlobalSettingsBool( challengeCollectionAsset, "useParentEventTimes" ) )
	{
		ItemFlavor parentFlavor = GetItemFlavorByAsset( GetGlobalSettingsAsset( challengeCollectionAsset, "parentItemFlavor" ) )
		Assert( parentFlavor.metaData != null )
		challengeCollectionItemFlav.metaData = parentFlavor.metaData
	}

	ChallengeCollection challengeCollection
	challengeCollection.itemFlav      = challengeCollectionItemFlav
	challengeCollection.metaChallenge = RegisterMetaChallenge( challengeCollectionAsset, collectionGUID )

	challengeCollection.hasGlobalTimestamps = GetGlobalSettingsBool( challengeCollectionAsset, "hasGlobalTimer" )
	challengeCollection.hasPersonalTimestamps = GetGlobalSettingsBool( challengeCollectionAsset, "hasPersonalTimer" )
	if ( challengeCollection.hasPersonalTimestamps )
		challengeCollection.personalUnlockHour = GetGlobalSettingsInt( challengeCollectionAsset, "unlockHour" )

	challengeCollection.requiresPriorSetMetaCompletion = challengeCollection.hasPersonalTimestamps || GetGlobalSettingsBool( challengeCollectionAsset, "hasMetaChallengeCompletion" )
	challengeCollection.metaSetCompletionPercentage = GetGlobalSettingsInt( challengeCollectionAsset, "priorCompletionPercent" )

	ChallengeSet lastSet
	int setIdx = 0
	foreach ( var challengeSetData in IterateSettingsAssetArray( challengeCollectionAsset, "challengeSets" ) )
	{
		ItemFlavor ornull challengeSetFlav = RegisterItemFlavorFromSettingsAsset( GetSettingsBlockAsset( challengeSetData, "challengeSet" ) )

		if ( challengeSetFlav == null )
		{
			Assert( false, format( "Challenge Collection %i has an invalid challengeSet!", collectionGUID ) )
			continue
		}
		expect ItemFlavor( challengeSetFlav )

		ChallengeSet challengeSet = RegisterChallengeSetData( challengeSetFlav, challengeCollection )
		challengeSet.parentCollection = challengeCollectionItemFlav

		if ( challengeCollection.hasGlobalTimestamps )
		{
			int ornull timeStamp = DateTimeStringToUnixTimestamp( GetSettingsBlockString( challengeSetData, "globalTimer" ) )
			Assert( timeStamp != null )
			if ( timeStamp != null )
				challengeSet.globalUnlockTimetamp = expect int( timeStamp )
		}

		if ( challengeCollection.hasPersonalTimestamps )
		{
			challengeSet.hasPersonalTimestamp = true
			challengeSet.personalUnlockHour = challengeCollection.personalUnlockHour
		}

		if ( challengeCollection.requiresPriorSetMetaCompletion )
		{
			challengeSet.requiresPriorSetMetaCompletion = true
			challengeSet.metaSetCompletionPercentage = challengeCollection.metaSetCompletionPercentage
		}

		challengeCollection.challengeSets.append( challengeSet )

		if ( setIdx > 0 )
		{
			lastSet.nextLinkInChain = challengeSet
			challengeSet.prevLinkInChain = lastSet
		}

		lastSet = challengeSet
		setIdx++
	}

	if ( GetGlobalSettingsBool( challengeCollectionAsset, "hasAvailabilityPeriod" ) )
	{
		challengeCollection.baseAvailabilitySeconds = GetGlobalSettingsInt( challengeCollectionAsset, "availabilityPeriod" ) * SECONDS_PER_DAY
	}

	file.challengeCollections[ collectionGUID ] <- challengeCollection
}

ItemFlavor ornull function RegisterMetaChallenge( asset challengeCollectionOrSetAsset, SettingsAssetGUID parentGUID )
{
	asset metaChallengeAsset = GetGlobalSettingsAsset( challengeCollectionOrSetAsset, "mainChallengeFlav" )
	if ( metaChallengeAsset != $"" )
	{
		ItemFlavor ornull metaChallenge = RegisterItemFlavorFromSettingsAsset( GetGlobalSettingsAsset( challengeCollectionOrSetAsset, "mainChallengeFlav" ) )
		Assert( metaChallenge != null, format( "Challenge Collection/Set '%i' does not have a valid mainChallenge", parentGUID ) )
		expect ItemFlavor( metaChallenge )
		Assert( ItemFlavor_GetType( metaChallenge ) == eItemType.challenge )
		return metaChallenge
	}

	return null
}

ChallengeSet function RegisterChallengeSetData( ItemFlavor challengeSetFlav, ChallengeCollection parentCollection )
{
	asset challengeSetAsset = ItemFlavor_GetAsset( challengeSetFlav )
	ChallengeSet challengeSet
	challengeSet.itemFlav      = challengeSetFlav
	challengeSet.metaChallenge = RegisterMetaChallenge( challengeSetAsset, ItemFlavor_GetGUID( challengeSetFlav ) )

	int sortOrdinal = 0
	foreach ( var challengeData in IterateSettingsAssetArray( challengeSetAsset, "challenges" ) )
	{
		ItemFlavor ornull challengeFlav = RegisterItemFlavorFromSettingsAsset( GetSettingsBlockAsset( challengeData, "challenge" ) )
		if ( challengeFlav != null )
		{
			expect ItemFlavor( challengeFlav )
			RegisterChallengeSource( challengeFlav, challengeSetFlav, sortOrdinal++ )
			challengeSet.challenges.append( challengeFlav )
		}
	}

	file.challengeSets[ ItemFlavor_GetGUID( challengeSetFlav ) ] <- challengeSet
	return challengeSet
}






bool function ChallengeCollection_IsEnabled()
{
	bool isEnabled = GetCurrentPlaylistVarBool( PLAYLIST_KILLSWITCH_VAR, true )
	return isEnabled
}

bool function ChallengeCollection_IsEvergreen( ChallengeCollection collection )
{
	bool isEvergreen = GetGlobalSettingsBool( ItemFlavor_GetAsset( collection.itemFlav ), "isEvergreen" )
	return isEvergreen
}


bool function ChallengeCollection_IsInActiveTimePeriod( ChallengeCollection collection, int currentTime )
{
	return ChallengeCollection_IsEvergreen( collection ) || CalEvent_IsActive( collection.itemFlav, currentTime )
}

int function ChallengeCollection_GetActiveState( entity player, ChallengeCollection challengeCollection )
{
	int currentTime = GetUnixTimestamp()
	int firstViewedTime = ChallengeCollection_GetFirstViewedTime( player, challengeCollection )

	int availabilitySeconds = ChallengeCollection_GetAvailabilitySeconds( challengeCollection )
	if ( availabilitySeconds > 0 && firstViewedTime > 0 )
	{
		if ( currentTime - firstViewedTime < availabilitySeconds )
		{
			return eChallengeCollectionActiveState.ACTIVE
		}

		return eChallengeCollectionActiveState.INACTIVE_AVAILABILITY_SECONDS
	}

	if ( !ChallengeCollection_IsInActiveTimePeriod( challengeCollection, currentTime ) )
	{
		return eChallengeCollectionActiveState.INACTIVE_CALEVENT
	}

	if ( !Kepler_IsPlayerEligibleForItemFlavor( player, challengeCollection.itemFlav ) )
	{
		return eChallengeCollectionActiveState.INACTIVE_KEPLER
	}


	if ( !NPP_IsNPPActive( player ) && ChallengeTile_GetNPPChallengeCollection() == challengeCollection  )
	{
		return eChallengeCollectionActiveState.INACTIVE_CALEVENT
	}


	return eChallengeCollectionActiveState.ACTIVE
}

table< int, ChallengeCollection > function ChallengeCollection_GetRegisteredCollections()
{
	return file.challengeCollections
}

array< ChallengeCollection > function ChallengeCollection_GetActiveCollections()
{
	array< ChallengeCollection > activeChallengeCollections = []
	if ( !ChallengeCollection_IsEnabled() )
		return activeChallengeCollections

	
	foreach ( collection in file.challengeCollections )
	{
		if ( ChallengeCollection_IsInActiveTimePeriod( collection, GetUnixTimestamp() ) )
		{
			activeChallengeCollections.push( collection )
		}
	}
	return activeChallengeCollections
}


ChallengeCollection function ChallengeCollection_GetByGUID( SettingsAssetGUID guid )
{
	Assert( guid in file.challengeCollections )
	return file.challengeCollections[ guid ]
}

array< ChallengeSet > function ChallengeCollection_GetAllChallengeSets( ChallengeCollection challengeCollection )
{
	return challengeCollection.challengeSets
}

ItemFlavor ornull function ChallengeCollectionFlav_GetMetaChallenge( ItemFlavor challengeCollectionFlav )
{
	Assert( ItemFlavor_GetType( challengeCollectionFlav ) == eItemType.challenge_collection )
	asset metaChallengeAsset = GetGlobalSettingsAsset( ItemFlavor_GetAsset( challengeCollectionFlav ), "mainChallengeFlav" )
	ItemFlavor ornull challenge
	if ( metaChallengeAsset != $"" )
	{
		challenge = GetItemFlavorByAsset( metaChallengeAsset )
	}
	return challenge
}

array< ItemFlavor > function ChallengeCollection_GetAllMetaChallenges( ChallengeCollection challengeCollection )
{
	array<ItemFlavor> challenges

	ItemFlavor ornull collectionMetaChallenge = ChallengeCollectionFlav_GetMetaChallenge( challengeCollection.itemFlav )
	if ( collectionMetaChallenge != null )
	{
		challenges.append( expect ItemFlavor( collectionMetaChallenge ) )
	}

	foreach ( ChallengeSet set in challengeCollection.challengeSets )
	{
		if ( set.metaChallenge != null )
		{
			challenges.append( expect ItemFlavor( set.metaChallenge ) )
		}
	}

	return challenges
}


array< ItemFlavor > function ChallengeCollection_GetAllChallenges( ChallengeCollection challengeCollection )
{
	array<ItemFlavor> challenges
	if ( IsItemFlavorStructValid( challengeCollection.itemFlav.guid, eValidation.DONT_ASSERT ) )
	{
		if ( challengeCollection.metaChallenge != null && IsItemFlavorStructValid( expect ItemFlavor( challengeCollection.metaChallenge ).guid, eValidation.DONT_ASSERT ))
		{
			challenges.append( expect ItemFlavor( challengeCollection.metaChallenge ) )
		}

		foreach ( ChallengeSet set in challengeCollection.challengeSets )
		{
			if ( set.metaChallenge != null )
			{
				challenges.append( expect ItemFlavor( set.metaChallenge ) )
			}

			foreach ( ItemFlavor challenge in set.challenges )
			{
				challenges.append( challenge )
			}
		}
	}
	return challenges
}


ChallengeCollection ornull function ChallengeCollection_GetFirstActiveForMetaChallenge( ItemFlavor metaChallengeFlav )
{
	foreach ( challengeCollection in ChallengeCollection_GetActiveCollections() )
	{
		if ( challengeCollection.metaChallenge == metaChallengeFlav )
		{
			return challengeCollection
		}

		foreach ( challengeSet in challengeCollection.challengeSets )
		{
			if ( challengeSet.metaChallenge == metaChallengeFlav )
			{
				return challengeCollection
			}
		}
	}

	return null
}

bool function ChallengeCollection_HasChallenges( ChallengeCollection challengeCollection )
{
	return ChallengeCollection_GetAllChallenges( challengeCollection ).len() > 0
}



ItemFlavor ornull function ChallengeCollection_GetCharacterUnlockChallenge( ItemFlavor characterFlav, ChallengeCollection challengeCollection )
{
	Assert( ItemFlavor_GetType( characterFlav ) == eItemType.character )

	array< ItemFlavor > challenges = ChallengeCollection_GetAllChallenges( challengeCollection )
	foreach ( ItemFlavor challenge in challenges )
	{
		ItemFlavorBag rewards = Challenge_GetRewards( challenge, 0 ) 
		foreach ( ItemFlavor reward in rewards.flavors )
		{
			if ( reward.guid == characterFlav.guid )
			{
				return challenge
			}
		}
	}

	return null
}

int function ChallengeCollection_GetAvailabilitySeconds( ChallengeCollection challengeCollection )
{
	
	if ( challengeCollection.baseAvailabilitySeconds <= 0 )
	{
		return challengeCollection.baseAvailabilitySeconds
	}

	string playlistKey = ItemFlavor_GetGUIDString( challengeCollection.itemFlav ) + "_availability_period"
	int overrideAvailabilityPeriod = GetPlaylistVarInt( "defaults", playlistKey, -1 )

	if ( overrideAvailabilityPeriod >= 0 )
	{
		return overrideAvailabilityPeriod * SECONDS_PER_DAY
	}

	return challengeCollection.baseAvailabilitySeconds
}

int function ChallengeCollection_GetProgress( entity player, ChallengeCollection challengeCollection )
{
	array< ChallengeSet > challengeSets = challengeCollection.challengeSets
	int progress = 0
	foreach ( ChallengeSet challengeSet in challengeSets )
	{
		if ( ChallengeSet_IsComplete( player, challengeSet ) )
		{
			++progress
		}
	}
	return progress
}

bool function ChallengeCollection_IsComplete( entity player, ChallengeCollection challengeCollection )
{
	int goal
	int progress = ChallengeCollection_GetProgress( player, challengeCollection )
	if ( challengeCollection.metaChallenge != null )
	{
		goal = MetaChallenge_GetGoalVal( expect ItemFlavor( challengeCollection.metaChallenge ) )
	}
	else
	{
		goal = challengeCollection.challengeSets.len()
	}

	return progress >= goal
}

string function ChallengeCollection_GetFirstViewedTimePersistenceVarName( ChallengeCollection challengeCollection )
{
	return ItemFlavor_GetGUIDString( challengeCollection.itemFlav ) + "_viewed"
}

int function ChallengeCollection_GetFirstViewedTime( entity player, ChallengeCollection challengeCollection )
{
	if ( ChallengeCollection_GetAvailabilitySeconds( challengeCollection ) <= 0 )
	{
		return -1
	}

	return player.GetPersistentVarAsInt( ChallengeCollection_GetFirstViewedTimePersistenceVarName( challengeCollection ) )
}














int function ChallengeCollection_GetEndTime( entity player, ChallengeCollection challengeCollection )
{
	int availabilitySeconds = ChallengeCollection_GetAvailabilitySeconds( challengeCollection )
	int firstViewedTime = ChallengeCollection_GetFirstViewedTime( player, challengeCollection )

	if ( availabilitySeconds <= 0 || firstViewedTime <= 0 )
	{
		int finishTime = ChallengeCollection_IsEvergreen( challengeCollection ) ? UNIX_TIME_FALLBACK_2038 : CalEvent_GetFinishUnixTime( challengeCollection.itemFlav )
		return finishTime
	}

	return firstViewedTime + availabilitySeconds
}

int function ChallengeCollection_GetNextSetUnlockTimeForPlayer( entity player )
{




	int nextUnlockTime = INT_MAX
	int now = GetUnixTimestamp()

	table< int, ChallengeCollection > challengeCollections = ChallengeCollection_GetRegisteredCollections()
	foreach( ChallengeCollection challengeCollection in challengeCollections )
	{
		int activeState = ChallengeCollection_GetActiveState( player, challengeCollection )
		if ( activeState == eChallengeCollectionActiveState.ACTIVE )
		{
			foreach ( ChallengeSet challengeSet in challengeCollection.challengeSets )
			{
				if ( !ChallengeSet_IsUnlockedForPlayer( player, challengeSet ) )
				{
					if ( challengeCollection.hasGlobalTimestamps && challengeSet.globalUnlockTimetamp > now && challengeSet.globalUnlockTimetamp < nextUnlockTime )
						nextUnlockTime = challengeSet.globalUnlockTimetamp

					if ( challengeCollection.hasPersonalTimestamps )
					{
						int personalTimer = ChallengeSet_GetPersonalTimerForPlayer( player, challengeSet )
						if ( personalTimer > now && personalTimer < nextUnlockTime )
							nextUnlockTime = personalTimer
					}
				}
			}
		}
		else if ( activeState == eChallengeCollectionActiveState.INACTIVE_CALEVENT )
		{
			int start = CalEvent_GetStartUnixTime( challengeCollection.itemFlav )
			if ( start > now && start < nextUnlockTime )
				nextUnlockTime = start
		}
	}

	return nextUnlockTime
}








































ChallengeSet function ChallengeSet_GetByGUID( SettingsAssetGUID guid )
{
	Assert( guid in file.challengeSets )
	return file.challengeSets[ guid ]
}

int function ChallengeSet_GetUnlockConditions( ChallengeSet challengeSet )
{
	int conditionsMask = 0

	if ( challengeSet.globalUnlockTimetamp > 0 )
		conditionsMask = conditionsMask | eChallengeSetUnlockConditions.GLOBAL_TIMESTAMP

	if ( challengeSet.hasPersonalTimestamp )
		conditionsMask = conditionsMask | eChallengeSetUnlockConditions.PERSONAL_TIMESTAMP

	if ( challengeSet.requiresPriorSetMetaCompletion )
		conditionsMask = conditionsMask | eChallengeSetUnlockConditions.PRIOR_SET_META_COMPLETION

	return conditionsMask
}

bool function ChallengeSet_IsUnlockedForPlayer( entity player, ChallengeSet challengeSet )
{




	bool isUnlocked = true
	int now = GetUnixTimestamp()

	if ( challengeSet.globalUnlockTimetamp > 0 && now < challengeSet.globalUnlockTimetamp )
	{
		isUnlocked = false
	}

	if ( challengeSet.hasPersonalTimestamp && now < ChallengeSet_GetPersonalTimerForPlayer( player, challengeSet ) )
	{
		isUnlocked = false
	}

	if ( challengeSet.requiresPriorSetMetaCompletion && challengeSet.prevLinkInChain != null )
	{
		ChallengeSet ornull prevLink = challengeSet.prevLinkInChain
		expect ChallengeSet( prevLink )

		if ( !ChallengeSet_MeetsUnlockCompletionRequirements( player, prevLink ) )
		{
			isUnlocked = false
		}
	}


	ItemFlavor ornull setMetaChallenge = challengeSet.metaChallenge
	if ( setMetaChallenge != null )
	{
		expect ItemFlavor( setMetaChallenge )
		if ( Challenge_GetTimeSpanKind ( setMetaChallenge ) == eChallengeTimeSpanKind.BEGINNER && !NPP_GetIsActiveNPP( player )  )
			isUnlocked = false
	}


	return isUnlocked
}

ItemFlavor ornull function ChallengeSetFlav_GetMetaChallenge( ItemFlavor challengeSetFlav )
{
	Assert( ItemFlavor_GetType( challengeSetFlav ) == eItemType.challenge_set )
	asset metaChallengeAsset = GetGlobalSettingsAsset( ItemFlavor_GetAsset( challengeSetFlav ), "mainChallengeFlav" )
	ItemFlavor ornull challenge
	if ( metaChallengeAsset != $"" )
	{
		challenge = GetItemFlavorByAsset( metaChallengeAsset )
	}
	return challenge
}

array< ItemFlavor > function ChallengeSet_GetChallenges( ChallengeSet challengeSet )
{
	return challengeSet.challenges
}

int function ChallengeSet_GetProgress( entity player, ChallengeSet challengeSet )
{
	array< ItemFlavor > challenges = ChallengeSet_GetChallenges( challengeSet )
	int progress = 0
	foreach ( ItemFlavor challengeFlav in challenges )
	{
		if ( Challenge_IsAssigned( player, challengeFlav ) && Challenge_IsComplete( player, challengeFlav ) )
		{
			++progress
		}
	}

	return progress
}

int function ChallengeSet_GetMinimumNumberOfChallengesCompletedForUnlock( entity player, ChallengeSet challengeSet )
{
	return int( ceil( float( challengeSet.metaSetCompletionPercentage ) / 100.0 * float( challengeSet.challenges.len() ) ) )
}

bool function ChallengeSet_MeetsUnlockCompletionRequirements( entity player, ChallengeSet challengeSet )
{
	return ChallengeSet_GetProgress( player, challengeSet ) >= ChallengeSet_GetMinimumNumberOfChallengesCompletedForUnlock( player, challengeSet )
}

bool function ChallengeSet_IsComplete( entity player, ChallengeSet challengeSet )
{
	int goal = challengeSet.challenges.len()
	int progress = ChallengeSet_GetProgress( player, challengeSet )

	return progress >= goal
}




























int function ChallengeSet_GetPersonalTimerForPlayer( entity player, ChallengeSet challengeSet )
{
	for ( int i = 0; i < NUM_CHALLENGE_CHAINS; i++ )
	{






			if ( GetPersistentVarAsInt( format( "%s[%d].%s", CHALLENGE_SET_UNLOCK_PVAR, i, CHALLENGE_SET_UNLOCK_GUID_PVAR ) ) == challengeSet.itemFlav.guid )
			{
				return GetPersistentVarAsInt( format( "%s[%d].%s", CHALLENGE_SET_UNLOCK_PVAR, i, CHALLENGE_SET_UNLOCK_TIMESTAMP_PVAR ) )
			}

	}

	return UNIX_TIME_FALLBACK_1970
}
























































