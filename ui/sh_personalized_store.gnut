

global function UpdatePersonalizedStoreSlotsRevealStatus
global function UICodeCallback_GRXPersonalizedStoreDataUpdated
global function GetPersonalizedStoreSlotData
global function GetOfferSelectorAliasFromIndex
#if DEV
global function DEV_PrintPersonalizedStoreSlotData
#endif

global const int NUM_PERSONALIZED_STORE_SLOTS = 5



const array<string> OFFER_SELECTOR_ALIASES = ["primary-legend", "secondary-legend", "tertiary-legend", "experimental-1", "experimental-2",
	"fallback-1", "fallback-2", "fallback-3", "fallback-4", "fallback-5"]

global struct GRXPersonalizedStoreSlotData
{
	bool revealStatus = false
	int offerSelectorAliasIndex = 0
	array<string> userSegments
	GRXScriptOffer offer
}

struct FileStruct_LifetimeLevel
{
	array<GRXPersonalizedStoreSlotData> slotDataList
}
FileStruct_LifetimeLevel& fileLevel



string function GetOfferSelectorAliasFromIndex( int index )
{
	if ( index >= OFFER_SELECTOR_ALIASES.len() )
	{
		Warning( "Tried to index into offer selector alias array with " + index + " but array length is only " + OFFER_SELECTOR_ALIASES.len() )
		return "BAD INDEX"
	}

	return OFFER_SELECTOR_ALIASES[index]
}



void function UpdatePersonalizedStoreSlotsRevealStatus( array<bool> slotsRevealStatus )
{
	Assert( slotsRevealStatus.len() == NUM_PERSONALIZED_STORE_SLOTS )
	if ( slotsRevealStatus.len() != NUM_PERSONALIZED_STORE_SLOTS )
	{
		return
	}

	GRX_UpdatePersonalizedStoreSlotsRevealStatus( slotsRevealStatus )
}



array<GRXPersonalizedStoreSlotData> function GetPersonalizedStoreSlotData()
{
	return fileLevel.slotDataList
}



void function UICodeCallback_GRXPersonalizedStoreDataUpdated( array<string> userSegments, array<bool> revealStatuses, array<int> selectorIndices, array<GRXStoreOffer> storeOffers )
{
	Assert( revealStatuses.len() == NUM_PERSONALIZED_STORE_SLOTS && selectorIndices.len() == NUM_PERSONALIZED_STORE_SLOTS && storeOffers.len() == NUM_PERSONALIZED_STORE_SLOTS )
	if ( revealStatuses.len() != NUM_PERSONALIZED_STORE_SLOTS || selectorIndices.len() != NUM_PERSONALIZED_STORE_SLOTS || storeOffers.len() != NUM_PERSONALIZED_STORE_SLOTS )
	{
		return
	}

	fileLevel.slotDataList.clear()

	foreach ( int idx, GRXStoreOffer storeOffer in storeOffers )
	{
		GRXPersonalizedStoreSlotData slotData
		storeOffer.offerType = GRX_OFFERTYPE_PYS

		
		storeOffer.isSparkable = false

		slotData.userSegments = userSegments
		slotData.revealStatus = revealStatuses[idx]
		slotData.offerSelectorAliasIndex = selectorIndices[idx]

		if ( storeOffer.offerAlias != "" )
		{
			GRX_InitScriptOfferFromStoreOffer( storeOffer, slotData.offer )
		}

		fileLevel.slotDataList.append( slotData )
	}
}


#if DEV
void function DEV_PrintPersonalizedStoreSlotData()
{
	printt("Printing personalized store slot data ---------------")
	for ( int idx = 0; idx < fileLevel.slotDataList.len(); ++idx )
	{
		printt( "Slot #" + ( idx + 1 ) )
		printt( "\treveal status = " + fileLevel.slotDataList[idx].revealStatus )
		printt( "\toffer selector = " + GetOfferSelectorAliasFromIndex( fileLevel.slotDataList[idx].offerSelectorAliasIndex ) )
		printt( "\toffer alias = " + fileLevel.slotDataList[idx].offer.offerAlias )
	}
	printt("End of personalized store slot data ---------------")
}
#endif
                                