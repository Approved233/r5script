















global function ShadowArmy_Init
global function ShGameMode_ShadowArmy_RegisterNetworking
global function IsShadowArmyGamemode
global function IsShadowArmyGamemodeCineVersion
global function ShadowArmy_GetNumRevSquadsForMatchStart



































global function ShadowArmy_PopulateAboutText
























global const string SHADOWARMY_MAP_EVAC_AREA = "shadowarmy_evac_area"
global const string SHADOWARMY_LEGEND_START_AREA = "shadowarmy_legend_start_area"
const string SHADOWARMY_PIN_VICTORYCONDITION_UNKNOWN = "unknown"
const string SHADOWARMY_PIN_VICTORYCONDITION_ELIMINATION = "elimination"
const string SHADOWARMY_PIN_VICTORYCONDITION_EVAC = "evac"
const string SHADOWARMY_PIN_VICTORYCONDITION_PREVENTED_EVAC = "prevented_evac"
const string SHADOWARMY_PIN_VICTORYCONDITION_FORFEIT = "team_forfeit"

const asset DEATH_SCREEN_RUI = $"ui/shadowarmy_squad_summary_header_data.rpak"

global const int SHADOWARMY_LEGEND_ALLIANCE = ALLIANCE_A
global const int SHADOWARMY_REVENANT_ALLIANCE = ALLIANCE_B
const int MAX_EVAC_TARGET_COUNT_FOR_LEGENDS = 6 















































































































const bool SHADOW_ARMY_SHOW_DETAILED_DEBUG = true
#if DEV
const bool SHADOWARMY_DISPLAY_PLAYERSPAWN_DEBUG_DRAWS = false
const float SHADOWARMY_DEBUG_DRAW_DISPLAY_TIME = 20.0
const float SHADOWARMY_SPAWN_DEBUG_DRAW_RADIUS = 150.0
#endif

enum eShadowArmyGamePhase
{
	GAME_START,
	WAITING_FOR_EVAC_OBJECTIVE,
	EVAC_OBJECTIVE,
	EVAC_SHIP_ARRIVED,
	EVAC_SHIP_DEPARTED,

	_count
}

global enum eShadowArmyMessageIndex
{
	LTM_DROP_ANNOUNCE_LEGEND,
	LTM_DROP_ANNOUNCE_SHADOW,
	RESPAWNING_AS_SHADOW_FIRST_TIME,
	RESPAWNING_AS_SHADOW,
	RESPAWNING_AS_SHADOW_FROM_LEGEND,
	RESPAWNING_AS_FULL_REV,
	RESPAWNING_AS_LEGEND,
	RESPAWNING_AS_LEGEND_EVAC,
	FULL_REV_SPAWNED_LEGEND,
	FULL_REV_SPAWNED_SHADOW,
	FULL_REV_KILLED,
	LEGEND_TEAM_SWITCHED_TO_REV,
	EVAC_CALLED_IN_RING_LEGEND,
	EVAC_CALLED_IN_RING_SHADOW,
	EVAC_CALLED_IN_EMERGENCY_LEGEND,
	EVAC_CALLED_IN_EMERGENCY_SHADOW,
	EVAC_ARRIVED_LEGEND,
	EVAC_ARRIVED_SHADOW,
	SAFE_ON_EVAC_SHIP,
	ALLIANCE_SWITCH_DISABLED_LEGEND,
	ALLIANCE_SWITCH_DISABLED_SHADOW,
	LEGENDS_RESPAWNED,
	LEGEND_ENTERED_EVAC_SHIP,
	EVAC_AREA_UPDATED,
	EVAC_LOCATION_REVEALED,
	BLANK,
	_count
}

global enum eShadowArmyMessageType
{
	ANNOUNCE_ONLY,
	OBIT_ONLY,
	ANNOUNCE_AND_OBIT,
	_count
}

enum eShadowArmyHintIndex
{
	FULL_REV_CANDIDATE_HINT,
	FULL_REV_CRITERIA_NO_DAM_HINT,
	_count
}

enum eShadowArmyRespawnForm
{
	LIVING_LEGEND,
	FULL_REVENANT,
	SHADOW,
	_count
}






















struct
{










































} file

void function ShadowArmy_Init()
{
	if ( !IsShadowArmyGamemode() )
		return




















































































































}

void function ShGameMode_ShadowArmy_RegisterNetworking()
{
	if ( !IsShadowArmyGamemode() )
		return

	
	Remote_RegisterClientFunction( "ShadowArmy_ServerCallback_ShowAnnouncementMessage", "int", 0, eShadowArmyMessageIndex._count, "int", 0, eShadowArmyMessageType._count )
	Remote_RegisterClientFunction( "ShadowArmy_ServerCallback_ShowHinttMessage", "int", 0, eShadowArmyMessageIndex._count, "int", 0, INT_MAX, "int", 0, INT_MAX )
	Remote_RegisterClientFunction( "ShadowArmy_ServerCallback_GivePlayerRepeatingEnemyMapScans" )
	Remote_RegisterClientFunction( "ShadowArmy_ServerCallback_UpdateEvacTargetCountOnHud", "int", 0, MAX_EVAC_TARGET_COUNT_FOR_LEGENDS + 1 )
	Remote_RegisterClientFunction( "ShadowArmy_ServerCallback_SetDeathScreenCallbacks" )
	Remote_RegisterClientFunction( "ShadowArmy_ServerCallback_PlayMatchEndMusic", "bool" )
	Remote_RegisterClientFunction( "ShadowArmy_ServerCallback_SetAllianceAssignmentCompleteFlag" )
	Remote_RegisterClientFunction( "ShadowArmy_ServerCallback_DestroyLegendStartAreaMapFeature" )

	RegisterNetworkedVariable( "shadowArmy_PlayerForm", SNDC_PLAYER_GLOBAL, SNVT_UNSIGNED_INT, eShadowArmyRespawnForm.LIVING_LEGEND )
	RegisterNetworkedVariable( "shadowArmy_GamePhase", SNDC_GLOBAL, SNVT_UNSIGNED_INT, eShadowArmyGamePhase.GAME_START )
	RegisterNetworkedVariable( "shadowArmy_LegendsInEvacShips", SNDC_GLOBAL, SNVT_UNSIGNED_INT, 0 )
	RegisterNetworkedVariable( "shadowArmy_NextEvacPhaseTime", SNDC_GLOBAL, SNVT_TIME, -1 )





}










bool function IsShadowArmyGamemode()
{
	return GetCurrentPlaylistVarBool( "is_shadow_army_gamemode", false )
}

bool function IsShadowArmyGamemodeCineVersion()
{
	return GetCurrentPlaylistVarBool( "is_shadow_army_cine_version", false )
}


const int UNSET_SQUAD_COUNT = -1
int function ShadowArmy_GetNumRevSquadsForMatchStart()
{
	
	string currentPlaylist = ShadowArmy_GetCurrentShadowArmyPlaylist()
	int squadCount = GetPlaylistVarInt( currentPlaylist, "shadow_army_starting_rev_squads", UNSET_SQUAD_COUNT )

	
	if ( squadCount < 0 )
	{
		int maxTeams = GetPlaylistVarInt( currentPlaylist, "max_teams", MAX_TEAMS )
		int maxAlliances = GetPlaylistVarInt( currentPlaylist, "max_alliances", 0 )

		if ( maxTeams > 0 && maxAlliances > 0 )
			squadCount = maxTeams / maxAlliances
		else
			squadCount = 0
	}

	return squadCount
}



const string DEFAULT_SHADOW_ARMY_PLAYLIST = "survival_shadow_army_base"
string function ShadowArmy_GetCurrentShadowArmyPlaylist()
{
	string currentPlaylist = GetCurrentPlaylistName()

	if ( currentPlaylist == "dev_default" )
		currentPlaylist = DEFAULT_SHADOW_ARMY_PLAYLIST

	return currentPlaylist
}






































int function GetNumLivingSquadsToTurnOffAllianceSwitch()
{
	return GetCurrentPlaylistVarInt( "shadow_army_legend_squad_count_to_end_switching", 1 )
}

int function GetNumLivingSquadsForEmergencyEvac()
{
	return GetCurrentPlaylistVarInt( "shadow_army_living_squad_count_emergency_evac", 3 )
}




































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































int function ShadowArmy_GetCurrentGamePhase()
{
	return GetGlobalNetInt( "shadowArmy_GamePhase" )
}
















































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































array< featureTutorialTab > function ShadowArmy_PopulateAboutText()
{
	array< featureTutorialTab > tabs
	string playlistUiRules = GetPlaylist_UIRules()

	if ( playlistUiRules != GAMEMODE_SHADOW_ARMY )
		return tabs

	featureTutorialTab tab1
	featureTutorialTab tab2
	featureTutorialTab tab3
	featureTutorialTab tab4

	array< featureTutorialData > tab1Rules
	array< featureTutorialData > tab2Rules
	array< featureTutorialData > tab3Rules
	array< featureTutorialData > tab4Rules

	
	tab1.tabName = "#GAMEMODE_RULES_OVERVIEW_TAB_NAME"
	string currentPlaylist = ShadowArmy_GetCurrentShadowArmyPlaylist()
	int maxTotalPlayers = GetPlaylistVarInt( currentPlaylist, "max_players", MAX_PLAYERS )
	int maxTeams = GetPlaylistVarInt( currentPlaylist, "max_teams", MAX_TEAMS )
	int squadSize = maxTotalPlayers > 0 && maxTeams > 0 ? maxTotalPlayers / maxTeams : 0
	int startingRevs = squadSize * ShadowArmy_GetNumRevSquadsForMatchStart()
	int startingLegends = maxTotalPlayers - startingRevs

	string overview1BodyText = Localize( "#SHADOW_ARMY_ABOUT_OVERVIEW_1_BODY", string( startingLegends ) )
	tab1Rules.append( UI_FeatureTutorialDialog_BuildDetailsData( "#SHADOW_ARMY_ABOUT_OVERVIEW_1_HEADER", overview1BodyText, $"rui/hud/gametype_icons/ltm/about_shadowroyal_1" ) )
	tab1Rules.append( UI_FeatureTutorialDialog_BuildDetailsData( "#SHADOW_ARMY_ABOUT_OVERVIEW_2_HEADER", "#SHADOW_ARMY_ABOUT_OVERVIEW_2_BODY", $"rui/hud/gametype_icons/ltm/about_shadowroyal_2" ) )
	tab1Rules.append( UI_FeatureTutorialDialog_BuildDetailsData( "#SHADOW_ARMY_ABOUT_OVERVIEW_3_HEADER", "#SHADOW_ARMY_ABOUT_OVERVIEW_3_BODY", $"rui/hud/gametype_icons/ltm/about_shadowroyal_3" ) )

	
	tab2.tabName = "#SHADOW_ARMY_ABOUT_LEGENDS_TAB_NAME"
	tab2Rules.append( UI_FeatureTutorialDialog_BuildDetailsData( "#SHADOW_ARMY_ABOUT_LEGENDS_1_HEADER", "#SHADOW_ARMY_ABOUT_LEGENDS_1_BODY", $"rui/hud/gametype_icons/ltm/about_shadowroyal_legends_1" ) )
	tab2Rules.append( UI_FeatureTutorialDialog_BuildDetailsData( "#SHADOW_ARMY_ABOUT_LEGENDS_2_HEADER", "#SHADOW_ARMY_ABOUT_LEGENDS_2_BODY", $"rui/hud/gametype_icons/ltm/about_shadowroyal_legends_2" ) )
	tab2Rules.append( UI_FeatureTutorialDialog_BuildDetailsData( "#SHADOW_ARMY_ABOUT_LEGENDS_3_HEADER", "#SHADOW_ARMY_ABOUT_LEGENDS_3_BODY", $"rui/hud/gametype_icons/ltm/about_shadowroyal_legends_3" ) )

	
	tab3.tabName = "#SHADOW_ARMY_ABOUT_REVS_TAB_NAME"
	tab3Rules.append( UI_FeatureTutorialDialog_BuildDetailsData( "#SHADOW_ARMY_ABOUT_REVS_1_HEADER", "#SHADOW_ARMY_ABOUT_REVS_1_BODY", $"rui/hud/gametype_icons/ltm/about_shadowroyal_rev_1" ) )
	tab3Rules.append( UI_FeatureTutorialDialog_BuildDetailsData( "#SHADOW_ARMY_ABOUT_REVS_2_HEADER", "#SHADOW_ARMY_ABOUT_REVS_2_BODY", $"rui/hud/gametype_icons/ltm/about_shadowroyal_rev_2" ) )
	tab3Rules.append( UI_FeatureTutorialDialog_BuildDetailsData( "#SHADOW_ARMY_ABOUT_REVS_3_HEADER", "#SHADOW_ARMY_ABOUT_REVS_3_BODY", $"rui/hud/gametype_icons/ltm/about_shadowroyal_rev_3" ) )

	tab1.rules = tab1Rules
	tab2.rules = tab2Rules
	tab3.rules = tab3Rules
	tab4.rules = tab4Rules

	tabs.append( tab1 )
	tabs.append( tab2 )
	tabs.append( tab3 )
	tabs.append( tab4 )

	return tabs
}



























































































































































































































































































                                  