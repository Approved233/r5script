
global function GameModes_Init


	global function GameMode_NotifyUIOfModeChange


global function GameMode_FindByDevName


global function GameMode_Rounds_IsWinBy2
global function GameMode_GetWinBy2MaxTies
global function GameMode_GetWinBy2MinScore
global function GameMode_RunServerInits
global function GameMode_RunClientInits
global function GameMode_RunSharedInits
global function GameMode_AreRoundsEnabled
global function GameMode_IsActive
global function GameMode_IsActiveForPlaylist
global function GameMode_VerifyActiveMode
global function RespawnBeacons_PLV_Enabled

global function GameModeVariant_GetByDevName
global function GameModeVariant_GetName
global function GameModeVariant_GetIcon
global function GameModeVariant_GetPlaylistFlag
global function GameModeVariant_IsDefined
global function GameModeVariant_IsActive
global function GameModeVariant_IsActiveForPlaylist







global function GameMode_AboutDialog_AppendRequeueTab

global function GameMode_AboutDialog_AppendFreeSpawnsTab



global struct GamemodeSettings
{
	string devName = ""
	array<void functionref()> serverInits
	array<void functionref()> clientInits
	array<void functionref()> sharedInits
}

global struct GameModeVariantSettings
{
	string devName = ""
	string name_localized = ""
	asset icon = $""
	int  baseMode
	string playlist_flag = ""
	array<void functionref()> serverInits
	array<void functionref()> clientInits
	array<void functionref()> sharedInits
}




global enum eGameModes
{
	invalid				= -1,

	SURVIVAL 			= 0,
	
	
	FREELANCE 			= 3,




	CONTROL				= 5,


	FREEDM		 		= 6,


	_count
}

global enum eGameModeVariants
{
	invalid = -1,

	SURVIVAL_FIRING_RANGE,
	SURVIVAL_TRAINING,

	SURVIVAL_RANKED,







	SURVIVAL_AIRDROPEXTRA,






















	SURVIVAL_CAMPFIRE,





	SURVIVAL_EXPLORE,




	SURVIVAL_FRAGNCLEAR,

	SURVIVAL_GOLDEN_HORSE,










	SURVIVAL_RECRUIT,



















	SURVIVAL_HARDCORE,

	SURVIVAL_HEATWAVE,


	SURVIVAL_BATTLE_RUSH,


	SURVIVAL_VALENTINES_S15,








	SURVIVAL_WINTEREXPRESS,









	SURVIVAL_THE_HUNT,


	SURVIVAL_HALLOWEEN_18_1,





	SURVIVAL_STRIKEOUT,


	SURVIVAL_SOLOS,


	SURVIVAL_QUADS,
















		FREEDM_TDM,


		FREEDM_GUNGAME,


		FREEDM_LOCKDOWN,













	FREEDM_SCROUNGE,


	_count
}


global enum eWinReason
{
	DEFAULT,
	SCORE_LIMIT,
	TIME_LIMIT,
	ELIMINATION,
	LOCKOUT, 
	TEAM_FORFEIT, 
	OBJECTIVE_COMPLETED, 
	_count
}

struct
{
	table<int , GamemodeSettings> gameModeDefs
	table<int , GameModeVariantSettings> variantDefs

	table<string, int> gameModesStringToIdMap
} file

void function GameModes_Init()
{
	
	
	

	
	

	GameMode_Create( eGameModes.SURVIVAL, SURVIVAL )









	GameModeVariant_Create( eGameModeVariants.SURVIVAL_FIRING_RANGE, eGameModes.SURVIVAL )
	GameModeVariant_SetPlaylistFlag( eGameModeVariants.SURVIVAL_FIRING_RANGE, "survival_firingrange" )










			AddCallback_UI_FeatureTutorialDialog_PopulateTabsForMode( CombatRange_PopulateAboutText, COMBATRANGE )
			AddCallback_UI_FeatureTutorialDialog_SetTitle( FeatureTutorial_GetGameModeName, COMBATRANGE )

















	GameModeVariant_Create( eGameModeVariants.SURVIVAL_TRAINING, eGameModes.SURVIVAL )
	GameModeVariant_SetPlaylistFlag( eGameModeVariants.SURVIVAL_TRAINING, "survival_training" )





	GameModeVariant_Create( eGameModeVariants.SURVIVAL_RANKED, eGameModes.SURVIVAL )
	GameModeVariant_SetDevName( eGameModeVariants.SURVIVAL_RANKED, GAMEMODE_SURVIVAL_RANKED )
	GameModeVariant_SetName( eGameModeVariants.SURVIVAL_RANKED, "#PL_TRIO_RANKED" )
	GameModeVariant_SetPlaylistFlag( eGameModeVariants.SURVIVAL_RANKED, "is_ranked_game" )


















	GameModeVariant_Create( eGameModeVariants.SURVIVAL_AIRDROPEXTRA, eGameModes.SURVIVAL )
	GameModeVariant_SetPlaylistFlag( eGameModeVariants.SURVIVAL_AIRDROPEXTRA, "airdrop_ltm_enabled" )







































































































		GameModeVariant_Create( eGameModeVariants.SURVIVAL_CAMPFIRE, eGameModes.SURVIVAL )
		GameModeVariant_SetPlaylistFlag( eGameModeVariants.SURVIVAL_CAMPFIRE, "is_campfire_mode" )














		GameModeVariant_Create( eGameModeVariants.SURVIVAL_EXPLORE, eGameModes.SURVIVAL )
		GameModeVariant_SetPlaylistFlag( eGameModeVariants.SURVIVAL_EXPLORE, "survival_explore_mode" )



















	
	








		GameModeVariant_Create( eGameModeVariants.SURVIVAL_GOLDEN_HORSE, eGameModes.SURVIVAL )
		GameModeVariant_SetPlaylistFlag( eGameModeVariants.SURVIVAL_GOLDEN_HORSE, "is_golden_horse" )
		GameModeVariant_SetDevName( eGameModeVariants.SURVIVAL_GOLDEN_HORSE, GAMEMODE_GOLDEN_HORSE )





			AddCallback_UI_FeatureTutorialDialog_PopulateTabsForMode( GoldenHorse_PopulateAboutText, GAMEMODE_GOLDEN_HORSE )
			AddCallback_UI_FeatureTutorialDialog_SetTitle( FeatureTutorial_GetGameModeName, GAMEMODE_GOLDEN_HORSE )

































	GameModeVariant_Create( eGameModeVariants.SURVIVAL_RECRUIT, eGameModes.SURVIVAL )
	GameModeVariant_SetPlaylistFlag( eGameModeVariants.SURVIVAL_RECRUIT, "recruit_mode" )





































































	GameModeVariant_Create( eGameModeVariants.SURVIVAL_HARDCORE, eGameModes.SURVIVAL )
	GameModeVariant_SetPlaylistFlag( eGameModeVariants.SURVIVAL_HARDCORE, "is_hardcore_mode" )
	GameModeVariant_SetDevName( eGameModeVariants.SURVIVAL_HARDCORE, GAMEMODE_SURVIVAL_HARDCORE )





		AddCallback_UI_FeatureTutorialDialog_PopulateTabsForMode( Survival_Hardcore_PopulateAboutText, GAMEMODE_SURVIVAL_HARDCORE )
		AddCallback_UI_FeatureTutorialDialog_SetTitle( FeatureTutorial_GetGameModeName, GAMEMODE_SURVIVAL_HARDCORE )



		GameModeVariant_Create( eGameModeVariants.SURVIVAL_HEATWAVE, eGameModes.SURVIVAL )
		GameModeVariant_SetPlaylistFlag( eGameModeVariants.SURVIVAL_HEATWAVE, "is_heatwave_mode" )
		GameModeVariant_SetDevName( eGameModeVariants.SURVIVAL_HEATWAVE, GAMEMODE_HEATWAVE )





			AddCallback_UI_FeatureTutorialDialog_PopulateTabsForMode( Survival_Heatwave_PopulateAboutText, GAMEMODE_HEATWAVE )
			AddCallback_UI_FeatureTutorialDialog_SetTitle( FeatureTutorial_GetGameModeName, GAMEMODE_HEATWAVE )





		GameModeVariant_Create( eGameModeVariants.SURVIVAL_BATTLE_RUSH, eGameModes.SURVIVAL )
		GameModeVariant_SetPlaylistFlag( eGameModeVariants.SURVIVAL_BATTLE_RUSH, "is_gamemode_battle_rush" )
		GameModeVariant_SetDevName( eGameModeVariants.SURVIVAL_BATTLE_RUSH, GAMEMODE_QUICK_MATCH )





			AddCallback_UI_FeatureTutorialDialog_PopulateTabsForMode( Survival_Quickmatch_PopulateAboutText, GAMEMODE_QUICK_MATCH )
			AddCallback_UI_FeatureTutorialDialog_SetTitle( FeatureTutorial_GetGameModeName, GAMEMODE_QUICK_MATCH )




		GameModeVariant_Create( eGameModeVariants.SURVIVAL_VALENTINES_S15, eGameModes.SURVIVAL )
		GameModeVariant_SetPlaylistFlag( eGameModeVariants.SURVIVAL_VALENTINES_S15, "is_valentines_s15" )
		GameModeVariant_SetDevName( eGameModeVariants.SURVIVAL_VALENTINES_S15, GAMEMODE_DATE_NIGHT )








			AddCallback_UI_FeatureTutorialDialog_PopulateTabsForMode( Date_Night_PopulateAboutText, GAMEMODE_DATE_NIGHT )
			AddCallback_UI_FeatureTutorialDialog_SetTitle( FeatureTutorial_GetGameModeName, GAMEMODE_DATE_NIGHT )




















		GameModeVariant_Create( eGameModeVariants.SURVIVAL_WINTEREXPRESS, eGameModes.SURVIVAL )
		GameModeVariant_SetPlaylistFlag( eGameModeVariants.SURVIVAL_WINTEREXPRESS, "is_winter_express_game" )
		GameModeVariant_SetDevName( eGameModeVariants.SURVIVAL_WINTEREXPRESS, GAMEMODE_WINTER_EXPRESS )




			AddCallback_UI_FeatureTutorialDialog_PopulateTabsForMode( WinterExpress_PopulateAboutText, GAMEMODE_WINTER_EXPRESS )
			AddCallback_UI_FeatureTutorialDialog_SetTitle( FeatureTutorial_GetGameModeName, GAMEMODE_WINTER_EXPRESS )




		GameModeVariant_Create( eGameModeVariants.SURVIVAL_THE_HUNT, eGameModes.SURVIVAL )
		GameModeVariant_SetPlaylistFlag( eGameModeVariants.SURVIVAL_THE_HUNT, "bounty_hunt_enabled" )
		GameModeVariant_SetDevName( eGameModeVariants.SURVIVAL_THE_HUNT, GAMEMODE_THE_HUNT_20 )




			AddCallback_UI_FeatureTutorialDialog_PopulateTabsForMode( BeastWithIn_20_0_The_Hunt_PopulateAboutText, GAMEMODE_THE_HUNT_20 )
			AddCallback_UI_FeatureTutorialDialog_SetTitle( FeatureTutorial_GetGameModeName, GAMEMODE_THE_HUNT_20 )




	AddCallback_UI_FeatureTutorialDialog_PopulateTabsForMode( Ranked_PopulateAboutText, GAMEMODE_SURVIVAL_RANKED )
	AddCallback_UI_FeatureTutorialDialog_SetTitle( FeatureTutorial_GetGameModeName, GAMEMODE_SURVIVAL_RANKED )




		AddCallback_UI_FeatureTutorialDialog_PopulateTabsForMode( BotPlayground_PopulateAboutText, BOTPLAYGROUND )
		AddCallback_UI_FeatureTutorialDialog_SetTitle( FeatureTutorial_GetGameModeName, BOTPLAYGROUND )




	GameModeVariant_Create( eGameModeVariants.SURVIVAL_HALLOWEEN_18_1, eGameModes.SURVIVAL )
	GameModeVariant_SetPlaylistFlag( eGameModeVariants.SURVIVAL_HALLOWEEN_18_1, "halloween_18_active" )
	GameModeVariant_SetDevName( eGameModeVariants.SURVIVAL_HALLOWEEN_18_1, GAMEMODE_HALLOWEEN_18_1 )


		AddCallback_UI_FeatureTutorialDialog_PopulateTabsForMode( Halloween_18_1_PopulateAboutText, GAMEMODE_HALLOWEEN_18_1 )
		AddCallback_UI_FeatureTutorialDialog_SetTitle( FeatureTutorial_GetGameModeName, GAMEMODE_HALLOWEEN_18_1 )
		AddCallback_UI_FeatureTutorialDialog_PopulateTabsForMode( Halloween_18_1_Harbinger_PopulateAboutText, GAMEMODE_HALLOWEEN_18_1_HARBINGER )
		AddCallback_UI_FeatureTutorialDialog_SetTitle( FeatureTutorial_GetGameModeName, GAMEMODE_HALLOWEEN_18_1_HARBINGER )















	
	GameModeVariant_Create( eGameModeVariants.SURVIVAL_STRIKEOUT, eGameModes.SURVIVAL )
	GameModeVariant_SetDevName( eGameModeVariants.SURVIVAL_STRIKEOUT, GAMEMODE_STRIKEOUT )
	GameModeVariant_SetName( eGameModeVariants.SURVIVAL_STRIKEOUT, "#STRIKEOUT_NAME" )
	GameModeVariant_SetIcon( eGameModeVariants.SURVIVAL_STRIKEOUT, $"rui/menu/gamemode_emblem/emblem_three_strikes" )
	GameModeVariant_SetPlaylistFlag( eGameModeVariants.SURVIVAL_STRIKEOUT, "is_gamemode_strikeout" )




	

		AddCallback_UI_FeatureTutorialDialog_PopulateTabsForMode( Survival_Strikeout_PopulateAboutText, GAMEMODE_STRIKEOUT )
		AddCallback_UI_FeatureTutorialDialog_SetTitle( FeatureTutorial_GetGameModeName, GAMEMODE_STRIKEOUT )













		AddCallback_UI_FeatureTutorialDialog_PopulateTabsForMode( Armed_And_Dangerous_PopulateAboutText, GAMEMODE_ARMED_AND_DANGEROUS )
		AddCallback_UI_FeatureTutorialDialog_SetTitle( FeatureTutorial_GetGameModeName, GAMEMODE_ARMED_AND_DANGEROUS )

















	
	GameModeVariant_Create( eGameModeVariants.SURVIVAL_SOLOS, eGameModes.SURVIVAL )
	GameModeVariant_SetDevName( eGameModeVariants.SURVIVAL_SOLOS, GAMEMODE_SURVIVAL_SOLOS )
	GameModeVariant_SetName( eGameModeVariants.SURVIVAL_SOLOS, "#SURVIVAL_MODE_SOLOS" )
	GameModeVariant_SetPlaylistFlag( eGameModeVariants.SURVIVAL_SOLOS, "is_gamemode_solos" )




	

		AddCallback_UI_FeatureTutorialDialog_PopulateTabsForMode( Survival_Solos_PopulateAboutText, GAMEMODE_SURVIVAL_SOLOS )
		AddCallback_UI_FeatureTutorialDialog_SetTitle( FeatureTutorial_GetGameModeName, GAMEMODE_SURVIVAL_SOLOS )























	GameModeVariant_Create( eGameModeVariants.SURVIVAL_QUADS, eGameModes.SURVIVAL )
	GameModeVariant_SetDevName( eGameModeVariants.SURVIVAL_QUADS, GAMEMODE_SURVIVAL_QUADS )
	GameModeVariant_SetName( eGameModeVariants.SURVIVAL_QUADS, "#SURVIVAL_MODE_QUADS" )
	GameModeVariant_SetPlaylistFlag( eGameModeVariants.SURVIVAL_QUADS, "gamemode_survival_quads_active" )


		AddCallback_UI_FeatureTutorialDialog_PopulateTabsForMode( Survival_Quads_PopulateAboutText, GAMEMODE_SURVIVAL_QUADS )
		AddCallback_UI_FeatureTutorialDialog_SetTitle( FeatureTutorial_GetGameModeName, GAMEMODE_SURVIVAL_QUADS )




	

		AddCallback_UI_FeatureTutorialDialog_PopulateTabsForMode( Survival_FreeRespawns_PopulateAboutText, GAMEMODE_SURVIVAL_FREE_RESPAWNS )
		AddCallback_UI_FeatureTutorialDialog_SetTitle( FeatureTutorial_GetGameModeName, GAMEMODE_SURVIVAL_FREE_RESPAWNS )






















	GameMode_Create( eGameModes.CONTROL, GAMEMODE_CONTROL )
	
	
	










		AddCallback_UI_FeatureTutorialDialog_PopulateTabsForMode( Control_PopulateAboutText, GAMEMODE_CONTROL )
		AddCallback_UI_FeatureTutorialDialog_SetTitle( FeatureTutorial_GetGameModeName, GAMEMODE_CONTROL )



	GameMode_Create( eGameModes.FREELANCE, GAMEMODE_FREELANCE )













	GameMode_Create( eGameModes.FREEDM, GAMEMODE_FREEDM )









	
	

		AddCallback_UI_FeatureTutorialDialog_PopulateTabsForMode( FreeDM_PopulateAboutText, GAMEMODE_FREEDM )
		AddCallback_UI_FeatureTutorialDialog_SetTitle( FeatureTutorial_GetGameModeName, GAMEMODE_FREEDM )



		GameModeVariant_Create( eGameModeVariants.FREEDM_TDM, eGameModes.FREEDM )
		GameModeVariant_SetPlaylistFlag( eGameModeVariants.FREEDM_TDM, "freedm_tdm_active" )
		GameModeVariant_SetDevName( eGameModeVariants.FREEDM_TDM, TEAM_DEATHMATCH )





			AddCallback_UI_FeatureTutorialDialog_PopulateTabsForMode( TDM_PopulateAboutText, TEAM_DEATHMATCH )
			AddCallback_UI_FeatureTutorialDialog_SetTitle( FeatureTutorial_GetGameModeName, TEAM_DEATHMATCH )

			AddCallback_UI_FeatureTutorialDialog_PopulateTabsForMode( SWAT_PopulateAboutText, TDM_SWAT )
			AddCallback_UI_FeatureTutorialDialog_SetTitle( FeatureTutorial_GetGameModeName, TDM_SWAT )


				AddCallback_UI_FeatureTutorialDialog_PopulateTabsForMode( BigTDM_PopulateAboutText, GAMEMODE_BIGTEAM_DEATHMATCH )
				AddCallback_UI_FeatureTutorialDialog_SetTitle( FeatureTutorial_GetGameModeName, GAMEMODE_BIGTEAM_DEATHMATCH )





		GameModeVariant_Create( eGameModeVariants.FREEDM_GUNGAME, eGameModes.FREEDM )
		GameModeVariant_SetPlaylistFlag( eGameModeVariants.FREEDM_GUNGAME, "freedm_gun_game_active" )






		GameModeVariant_Create( eGameModeVariants.FREEDM_LOCKDOWN, eGameModes.FREEDM )
		GameModeVariant_SetPlaylistFlag( eGameModeVariants.FREEDM_LOCKDOWN, "freedm_treasure_hunt_active" )
		GameModeVariant_SetDevName( eGameModeVariants.FREEDM_TDM, GAMEMODE_TREASURE_HUNT )





			AddCallback_UI_FeatureTutorialDialog_PopulateTabsForMode( TreasureHunt_PopulateAboutText, GAMEMODE_TREASURE_HUNT )
			AddCallback_UI_FeatureTutorialDialog_SetTitle( FeatureTutorial_GetGameModeName, GAMEMODE_TREASURE_HUNT )



































	









	
	GameMode_VerifyModes()
}

void function GameMode_NotifyUIOfModeChange( string gametypeStr, int gametypeID )
{
	GAMETYPE = gametypeStr
	GAMETYPE_ID = gametypeID
}





void function GameMode_Create( int modeId, string stringModeName )
{
	Assert( !(modeId in file.gameModeDefs), "Gametype already defined!" )

	GamemodeSettings settings
	settings.devName = stringModeName

	file.gameModeDefs[ modeId ] <- settings
	file.gameModesStringToIdMap[ stringModeName ] <- modeId
}

void function GameMode_AddServerInit( int modeId, void functionref() func )
{
	Assert( modeId in file.gameModeDefs, "No MP Gametype specified in _settings.nut" )
	file.gameModeDefs[ modeId ].serverInits.append( func )
}

void function GameMode_AddClientInit( int modeId, void functionref() func )
{
	Assert( modeId in file.gameModeDefs, "No MP Gametype specified in _settings.nut" )
	file.gameModeDefs[ modeId ].clientInits.append( func )
}

void function GameMode_AddSharedInit( int modeId, void functionref() func )
{
	Assert( modeId in file.gameModeDefs, "No MP Gametype specified in _settings.nut" )
	file.gameModeDefs[ modeId ].sharedInits.append( func )
}



void function GameModeVariant_Create( int variantId, int baseMode )
{
	Assert( !(variantId in file.variantDefs), "Variant already defined!" )

	GameModeVariantSettings settings
	settings.baseMode = baseMode
	file.variantDefs[ variantId ] <- settings
}

void function GameModeVariant_SetDevName( int variantId, string devName )
{
	Assert( variantId in file.variantDefs, "No variant Gametype specified in _settings.nut" )
	file.variantDefs[ variantId ].devName = devName
}

void function GameModeVariant_SetName( int variantId, string nameText )
{
	Assert( variantId in file.variantDefs, "No variant Gametype specified in _settings.nut" )
	file.variantDefs[ variantId ].name_localized = nameText
}

void function GameModeVariant_SetIcon( int variantId, asset icon )
{
	Assert( variantId in file.variantDefs, "No variant Gametype specified in _settings.nut" )
	file.variantDefs[ variantId ].icon = icon
}

void function GameModeVariant_SetPlaylistFlag( int variantId, string playlistFlag )
{
	Assert( variantId in file.variantDefs, "No variant Gametype specified in _settings.nut" )
	file.variantDefs[ variantId ].playlist_flag = playlistFlag
}

void function GameModeVariant_AddServerInit( int variantId, void functionref() initFunc )
{
	file.variantDefs[ variantId ].serverInits.append( initFunc )
}

void function GameModeVariant_AddClientInit( int variantId, void functionref() initFunc )
{
	file.variantDefs[ variantId ].clientInits.append( initFunc )
}

void function GameModeVariant_AddSharedInit( int variantId, void functionref() initFunc )
{
	file.variantDefs[ variantId ].sharedInits.append( initFunc )
}







int function GameMode_FindByDevName( string gamemodeDevName )
{
	if ( !( gamemodeDevName in file.gameModesStringToIdMap ) )
	{
		return eGameModes.invalid
	}

	return file.gameModesStringToIdMap[ gamemodeDevName ]
}

bool function GameMode_IsActive( int modeId )
{
	return GAMETYPE_ID == modeId
}

bool function GameMode_IsActiveForPlaylist( string playlist, int modeId )
{
	for ( int i = 0; i < GetPlaylistGamemodesCount( playlist ); i++ )
	{
		if ( GameMode_FindByDevName( GetPlaylistGamemodeByIndex( playlist, i ) ) == modeId )
		{
			return true
		}
	}

	return false
}



int function GameModeVariant_GetByDevName( string variantDevName )
{
	foreach ( variantId, variantDef in file.variantDefs )
	{
		if ( variantDef.devName == variantDevName )
		{
			return variantId
		}
	}

	return eGameModeVariants.invalid
}

string function GameModeVariant_GetName( int variantId )
{
	Assert( variantId in file.variantDefs, "No variant gametype specified in _settings.nut" )
	return file.variantDefs[ variantId ].name_localized
}

asset function GameModeVariant_GetIcon( int variantId )
{
	Assert( variantId in file.variantDefs, "No variant gametype specified in _settings.nut" )
	return file.variantDefs[ variantId ].icon
}

string function GameModeVariant_GetPlaylistFlag( int variantId )
{
	Assert( variantId in file.variantDefs, "No variant gametype specified in _settings.nut" )
	return file.variantDefs[ variantId ].playlist_flag
}

bool function GameModeVariant_IsDefined( int variantId )
{
	return ( variantId in file.variantDefs )
}

bool function GameModeVariant_IsActiveForPlaylist( string playlist, int variantId )
{
	
	if ( file.variantDefs[ variantId ].devName.len() != 0 && GetPlaylistVarString( playlist, "variant", "" ) == file.variantDefs[ variantId ].devName )
	{
		return true
	}

	return GetPlaylistVarBool( playlist, file.variantDefs[ variantId ].playlist_flag, false )
}

bool function GameModeVariant_IsActive( int variantId )
{
	return GameModeVariant_IsActiveForPlaylist( GetCurrentPlaylistName(), variantId )
}

int function GameModeVariant_GetActiveMode()
{
	foreach( variantId, modeSettings in file.variantDefs )
	{
		if ( GameModeVariant_IsActive( variantId ) )
		{
			return variantId
		}
	}

	return eGameModeVariants.invalid
}






void function GameMode_RunServerInits()
{
	Assert( GAMETYPE_ID in file.gameModeDefs, "No MP Gametype specified in _settings.nut" )
	foreach ( initFunc in file.gameModeDefs[ GAMETYPE_ID ].serverInits )
	{
		initFunc()
	}

	int variantId = GameModeVariant_GetActiveMode()
	if ( variantId != eGameModeVariants.invalid )
	{
		foreach( initFunc in file.variantDefs[ variantId ].serverInits )
		{
			initFunc()
		}
	}
}

void function GameMode_RunClientInits()
{
	Assert( GAMETYPE_ID in file.gameModeDefs, "No MP Gametype specified in _settings.nut" )
	foreach ( initFunc in file.gameModeDefs[ GAMETYPE_ID ].clientInits )
	{
		initFunc()
	}

	int variantId = GameModeVariant_GetActiveMode()
	if ( variantId != eGameModeVariants.invalid )
	{
		foreach( initFunc in file.variantDefs[ variantId ].clientInits )
		{
			initFunc()
		}
	}
}

void function GameMode_RunSharedInits()
{
	Assert( GAMETYPE_ID in file.gameModeDefs, "No MP Gametype specified in _settings.nut" )
	foreach ( initFunc in file.gameModeDefs[ GAMETYPE_ID ].sharedInits )
	{
		initFunc()
	}

	int variantId = GameModeVariant_GetActiveMode()
	if ( variantId != eGameModeVariants.invalid )
	{
		foreach( initFunc in file.variantDefs[ variantId ].sharedInits )
		{
			initFunc()
		}
	}
}

void function GameMode_VerifyModes()
{
	foreach ( gameModeId, gameModeData in file.gameModeDefs )
	{
		Assert( gameModeId > eGameModes.invalid && gameModeId < eGameModes._count, "GAMEMODE not defined properly in eGameModes!" )
	}

	foreach ( variantId, variantDef in file.variantDefs )
	{
		Assert( variantId > eGameModeVariants.invalid && variantId < eGameModeVariants._count, "Variant not defined properly in eGameModeVariants" )
	}
}

void function GameMode_VerifyActiveMode()
{
	Assert( GAMETYPE_ID in file.gameModeDefs, "Active gamemode is invalid" )

	bool hasDef = false
	foreach( variantId, variantDef in file.variantDefs )
	{
		if ( GameModeVariant_IsActive( variantId ) )
		{
			Assert( !hasDef, "Multiple variants are set active!" )
			Assert( variantDef.baseMode == GAMETYPE_ID, "Active variant is based on a different gamemode from the active mode!" )
			hasDef = true
		}
	}
}


bool function GameMode_AreRoundsEnabled()
{
	return GetCurrentPlaylistVarBool( "survival_rounds_enabled", false )
}

bool function GameMode_Rounds_IsWinBy2( string gameModeName )
{
	return GetCurrentPlaylistVarBool( "rounds_win_by_2_enabled", false )
}

int function GameMode_GetWinBy2MinScore( string gameModeName )
{
	return GetCurrentPlaylistVarInt( "rounds_win_by_2_enabled", 0 )
}

int function GameMode_GetWinBy2MaxTies( string gameModeName )
{
	return GetCurrentPlaylistVarInt( "rounds_win_by_2_enabled", 0 )
}

















void function GameMode_AboutDialog_AppendRequeueTab(array<featureTutorialTab> tabs)
{
	if ( GetPlaylistVarBool( GamemodeUtility_GetPlaylist(), "matchmake_from_match", false ) )
	{
		featureTutorialTab tab
		array< featureTutorialData > tabRules
		tab.tabName = "#ABOUT_REQUEUE_TITLE"
		tabRules.append( UI_FeatureTutorialDialog_BuildDetailsData( "#ABOUT_REQUEUE_1_HEADER", "#ABOUT_REQUEUE_1_BODY", $"rui/hud/gametype_icons/ltm/about_quickmatch_no_dull_moment" ) )

		if ( GetConVarBool( "matchSquadRequeue_enabled" ) )
			tabRules.append( UI_FeatureTutorialDialog_BuildDetailsData( "#ABOUT_REQUEUE_2_HEADER", "#ABOUT_REQUEUE_2_BODY", $"rui/hud/gametype_icons/ltm/about_quickmatch_band_together" ) )

		tabRules.append( UI_FeatureTutorialDialog_BuildDetailsData( "#ABOUT_REQUEUE_3_HEADER", "#ABOUT_REQUEUE_3_BODY", $"rui/hud/gametype_icons/ltm/about_quickmatch_lobby_friends" ) )
		tab.rules = tabRules
		tabs.append( tab )
	}
}




	void function GameMode_AboutDialog_AppendFreeSpawnsTab(array<featureTutorialTab> tabs)
	{
		if ( GetPlaylistVarBool( GamemodeUtility_GetPlaylist(), "freerespawns_feature_exists", false ) )
		{
			featureTutorialTab tab
			array< featureTutorialData > tabRules
			tab.tabName = "#ABOUT_REVIVAL_MODE_TITLE"
			tabRules.append( UI_FeatureTutorialDialog_BuildDetailsData( "#ABOUT_REVIVAL_MODE_1_HEADER", "#ABOUT_REVIVAL_MODE_1_BODY", $"rui/hud/gametype_icons/survival/about_revival_mode_second_chance" ) )
			tabRules.append( UI_FeatureTutorialDialog_BuildDetailsData( "#ABOUT_REVIVAL_MODE_2_HEADER", "#ABOUT_REVIVAL_MODE_2_BODY", $"rui/hud/gametype_icons/survival/about_revival_mode_stayin_alive" ) )
			tabRules.append( UI_FeatureTutorialDialog_BuildDetailsData( "#ABOUT_REVIVAL_MODE_3_HEADER", "#ABOUT_REVIVAL_MODE_3_BODY", $"rui/hud/gametype_icons/survival/about_revival_mode_wire" ) )
			tab.rules = tabRules
			tabs.append( tab )
		}
	}



bool function RespawnBeacons_PLV_Enabled()
{
	bool result = GetCurrentPlaylistVarBool( "respawn_beacons_enabled", true )

		result = result && !Freespawns_RespawnBeacons_Disabled()

	return( result )
}