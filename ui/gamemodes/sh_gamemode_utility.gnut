




global function GamemodeUtility_Init
global function GamemodeUtility_RegisterNetworking
global function GamemodeUtility_IsJIPEnabledInPlaylist	
global function GamemodeUtility_GetMixtapeAbandonPenaltyActive
global function GamemodeUtility_ParseCircleString 
global function GamemodeUtility_ParseVectorString 
global function GamemodeUtility_ParseStringOfVectors 
global function GamemodeUtility_GetKillReplayActive 
global function GamemodeUtility_GetIsTeamIndexValidPlayerTeam 
global function GameModeUtility_GetAllowThirdPerson










































































global function GamemodeUtility_GetPlaylist	










global function IsFFAGame
global function IsMultiTeamMission
global function GetExpectedSquadSize
global function IsMultiTeamPvPGame
global function Is2TeamPvPGame
global function IsSingleTeamMode
global function IsLastPlaylistSolo
global function IsDuoMode
global function IsPVEMode

















const float UNSET_PLAYLIST_VAR_FLOAT = -1
const int UNSET_PLAYLIST_VAR_INT = -1
global const int EXPECTED_PARSED_CIRCLE_VALUE_COUNT = 4

















































struct {


























} file

void function GamemodeUtility_Init()
{




































































}

void function GamemodeUtility_RegisterNetworking()
{





	Remote_RegisterClientFunction( "GamemodeUtility_ServerCallback_DisplayMatchTimeLimitWarning", "bool" )
	Remote_RegisterClientFunction( "GamemodeUtility_ServerCallback_PlayMatchEndingCountdownAudio" )
	RegisterNetworkedVariable( "mixtape_isLeaverPenaltyEnabledForMatch", SNDC_GLOBAL, SNVT_BOOL, true )














	
	if ( GamemodeUtility_IsJIPEnabledInPlaylist() )
	{



		Remote_RegisterClientFunction( "GamemodeUtility_ServerCallback_PlayerJoinedMatchInProgress", "entity" )
	}

	if ( GamemodeUtility_ShouldPingVictimSquadLocationOnDown() || GamemodeUtility_ShouldPingVictimSquadLocationOnKill() )
		Remote_RegisterClientFunction( "GamemodeUtility_ServerCallback_TriggerScanOfVictimTeam", "int", 0, TEAM_MULTITEAM_FIRST + MAX_TEAMS + 1 )
}

void function RegisterDocs()
{
	#document( "GamemodeUtility_IsJIPEnabledInPlaylist", "Check if Join In Progress is enabled through playlist vars" )
	
	
	
	#document( "GamemodeUtility_GetKillReplayActive", "Check kill replay in playlist" )
	#document( "GamemodeUtility_GetIsTeamIndexValidPlayerTeam", "Return whether the passed in team index is within the valid player team range for the mode" )








































































		#document( "GamemodeUtility_GetPlaylist", "Return the current playlist name, adjusted for modes to take into account being in the mode or in the lobby ( usually used to get values for the About screen )" )

}























bool function GamemodeUtility_IsJIPEnabledInPlaylist()
{
	return GetCurrentPlaylistVarBool( "match_jip", false )
}


bool function GamemodeUtility_GetShouldTweakDVSForGamemode()
{
	return GetCurrentPlaylistVarBool( "should_tweak_dvs_for_gamemode", false )
}














































































































































































bool function GamemodeUtility_ShouldPingVictimSquadLocationOnDown()
{
	return GetCurrentPlaylistVarBool( "map_ping_victim_squad_on_down", false )
}


bool function GamemodeUtility_ShouldPingVictimSquadLocationOnKill()
{
	return GetCurrentPlaylistVarBool( "map_ping_victim_squad_on_kill", false )
}


float function GamemodeUtility_GetDurationOfVictimSquadMapPing()
{
	return GetCurrentPlaylistVarFloat( "victim_squad_map_ping_duration", 0.0 )
}









bool function GamemodeUtility_GetKillReplayActive()
{
	return GetCurrentPlaylistVarBool( "killreplay_enabled", false )
}






































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































bool function GamemodeUtility_GetMixtapeAbandonPenaltyActive()
{
	return GetCurrentPlaylistVarBool( "mixtape_match_abandon_penalty", false )
}























































































































































































































































































































int function GamemodeUtility_GetMaxDroppedGrenadesOnDeath()
{
	return GetCurrentPlaylistVarInt( "grenade_ondeath_max_spawncount", 1 )
}








































float function GetPlaylistVar_DeathboxDuration()
{
	return GetCurrentPlaylistVarFloat( "deathbox_duration", 60.0 )
}





































































































































bool function GamemodeUtility_GetIsTeamIndexValidPlayerTeam( int teamIndex )
{
	return TEAM_MULTITEAM_FIRST <= teamIndex && teamIndex < MAX_TEAMS + TEAM_MULTITEAM_FIRST
}



string function GamemodeUtility_GetPlaylist()
{
	if ( IsLobby() )
		return LobbyPlaylist_GetSelectedPlaylist()
	else
		return GetCurrentPlaylistName()

	unreachable
}














































































bool function GameModeUtility_GetAllowThirdPerson()
{
	return GetCurrentPlaylistVarBool( "allow_third_person", false )
}























































































array< vector > function GamemodeUtility_ParseStringOfVectors( string positionsRawString )
{
	array<string> positionStrings = GetTrimmedSplitString( positionsRawString, "," )
	array<vector> positions
	foreach( positionString in positionStrings )
	{
		vector pos = GamemodeUtility_ParseVectorString( positionString )
		positions.append( pos )
	}

	return positions
}

vector function GamemodeUtility_ParseVectorString( string vectorString )
{
	array< string > valuesAsStrings = GetTrimmedSplitString( vectorString, WHITESPACE_CHARACTERS )
	Assert( valuesAsStrings.len() == 3, "vectorString should have format \"x y z\"")

	vector vec = < float( valuesAsStrings[0] ), float( valuesAsStrings[1] ), float( valuesAsStrings[2] ) >
	return vec
}


array< float > function GamemodeUtility_ParseCircleString( string circleString )
{
	
	
	
	array< float > circleValuesArray
	
	array< string > circleStringValuesArray = GetTrimmedSplitString( circleString, "," )

	
	circleString            = GamemodeUtility_GetParsedStringForCircleValues( circleStringValuesArray )
	circleStringValuesArray = GetTrimmedSplitString( circleString, "<" )

	
	circleString            = GamemodeUtility_GetParsedStringForCircleValues( circleStringValuesArray )
	circleStringValuesArray = GetTrimmedSplitString( circleString, ">" )

	
	circleString            = GamemodeUtility_GetParsedStringForCircleValues( circleStringValuesArray )
	circleStringValuesArray = GetTrimmedSplitString( circleString, " " )

	
	foreach( item in circleStringValuesArray )
	{
		circleValuesArray.append( float( item ) )
	}

	return circleValuesArray
}


string function GamemodeUtility_GetParsedStringForCircleValues( array< string > stringValuesArray )
{
	string parsedPlaylistString = ""
	foreach( item in stringValuesArray )
	{
		parsedPlaylistString += " " + item
	}

	return parsedPlaylistString
}























































bool function IsFFAGame()
{
	return (MAX_TEAMS == MAX_PLAYERS)
}

bool function IsMultiTeamMission()
{
	if ( IsSingleTeamMode() )
		return false
	return true
}


int function GetExpectedSquadSize( entity player = null )
{
	
	return int ( GetCurrentPlaylistVarFloat( "max_players", 60 ) / GetCurrentPlaylistVarFloat( "max_teams", 20 ) )
}

bool function IsMultiTeamPvPGame()
{
	return (MAX_TEAMS > 2)
}

bool function Is2TeamPvPGame()

{
	return (MAX_TEAMS == 2)
}

bool function IsSingleTeamMode()
{
	return (1 == GetCurrentPlaylistVarInt( "max_teams", 2 ))
}

bool function IsLastPlaylistSolo( entity player )
{
	return GetPersistentLastGameTypeFlag( player, eGameType.SOLO )
}

bool function IsDuoMode()
{
	return (GetCurrentPlaylistVarFloat( "max_players", 60 ) / GetCurrentPlaylistVarFloat( "max_teams", 20 ) == 2.0)
}

bool function IsPVEMode()
{

		{
			string playlistName = GetCurrentPlaylistName()
			if ( playlistName.find( "freelance" ) == 0 )
				return true

			return false
		}







}






























































































