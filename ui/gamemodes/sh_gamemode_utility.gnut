




global function GamemodeUtility_Init
global function GamemodeUtility_RegisterNetworking
global function GamemodeUtility_IsJIPEnabledInPlaylist	
global function GamemodeUtility_GetMixtapeAbandonPenaltyActive
global function GamemodeUtility_ParseCircleString 
global function GamemodeUtility_ParseVectorString 
global function GamemodeUtility_ParseStringOfVectors 
global function GamemodeUtility_GetKillReplayActive 
global function GamemodeUtility_GetIsTeamIndexValidPlayerTeam 

































































global function GamemodeUtility_GetPlaylist	








const float UNSET_PLAYLIST_VAR_FLOAT = -1
const int UNSET_PLAYLIST_VAR_INT = -1
global const int EXPECTED_PARSED_CIRCLE_VALUE_COUNT = 4













































struct {

























} file

void function GamemodeUtility_Init()
{





























































}

void function GamemodeUtility_RegisterNetworking()
{
	Remote_RegisterClientFunction( "GamemodeUtility_ServerCallback_DisplayMatchTimeLimitWarning", "bool" )
	RegisterNetworkedVariable( "mixtape_isLeaverPenaltyEnabledForMatch", SNDC_GLOBAL, SNVT_BOOL, true )












	
	if ( GamemodeUtility_IsJIPEnabledInPlaylist() )
	{



		Remote_RegisterClientFunction( "GamemodeUtility_ServerCallback_PlayerJoinedMatchInProgress", "entity" )
	}

	if ( GamemodeUtility_ShouldPingVictimSquadLocationOnDown() || GamemodeUtility_ShouldPingVictimSquadLocationOnKill() )
		Remote_RegisterClientFunction( "GamemodeUtility_ServerCallback_TriggerScanOfVictimTeam", "int", 0, TEAM_MULTITEAM_FIRST + MAX_TEAMS + 1 )
}























bool function GamemodeUtility_IsJIPEnabledInPlaylist()
{
	return GetCurrentPlaylistVarBool( "match_jip", false )
}


bool function GamemodeUtility_GetShouldTweakDVSForGamemode()
{
	return GetCurrentPlaylistVarBool( "should_tweak_dvs_for_gamemode", false )
}














































































































































































bool function GamemodeUtility_ShouldPingVictimSquadLocationOnDown()
{
	return GetCurrentPlaylistVarBool( "map_ping_victim_squad_on_down", false )
}


bool function GamemodeUtility_ShouldPingVictimSquadLocationOnKill()
{
	return GetCurrentPlaylistVarBool( "map_ping_victim_squad_on_kill", false )
}


float function GamemodeUtility_GetDurationOfVictimSquadMapPing()
{
	return GetCurrentPlaylistVarFloat( "victim_squad_map_ping_duration", 0.0 )
}









bool function GamemodeUtility_GetKillReplayActive()
{
	return GetCurrentPlaylistVarBool( "killreplay_enabled", false )
}










































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































bool function GamemodeUtility_GetMixtapeAbandonPenaltyActive()
{
	return GetCurrentPlaylistVarBool( "mixtape_match_abandon_penalty", false )
}


















































































































































































































































































































int function GamemodeUtility_GetMaxDroppedGrenadesOnDeath()
{
	return GetCurrentPlaylistVarInt( "grenade_ondeath_max_spawncount", 1 )
}







































float function GetPlaylistVar_DeathboxDuration()
{
	return GetCurrentPlaylistVarFloat( "deathbox_duration", 60.0 )
}











































































































bool function GamemodeUtility_GetIsTeamIndexValidPlayerTeam( int teamIndex )
{
	return TEAM_MULTITEAM_FIRST <= teamIndex && teamIndex < MAX_TEAMS + TEAM_MULTITEAM_FIRST
}



string function GamemodeUtility_GetPlaylist()
{
	if ( IsLobby() )
		return LobbyPlaylist_GetSelectedPlaylist()
	else
		return GetCurrentPlaylistName()

	unreachable
}













































array< vector > function GamemodeUtility_ParseStringOfVectors( string positionsRawString )
{
	array<string> positionStrings = GetTrimmedSplitString( positionsRawString, "," )
	array<vector> positions
	foreach( positionString in positionStrings )
	{
		vector pos = GamemodeUtility_ParseVectorString( positionString )
		positions.append( pos )
	}

	return positions
}

vector function GamemodeUtility_ParseVectorString( string vectorString )
{
	array< string > valuesAsStrings = GetTrimmedSplitString( vectorString, WHITESPACE_CHARACTERS )
	Assert( valuesAsStrings.len() == 3, "vectorString should have format \"x y z\"")

	vector vec = < float( valuesAsStrings[0] ), float( valuesAsStrings[1] ), float( valuesAsStrings[2] ) >
	return vec
}


array< float > function GamemodeUtility_ParseCircleString( string circleString )
{
	
	
	
	array< float > circleValuesArray
	
	array< string > circleStringValuesArray = GetTrimmedSplitString( circleString, "," )

	
	circleString            = GamemodeUtility_GetParsedStringForCircleValues( circleStringValuesArray )
	circleStringValuesArray = GetTrimmedSplitString( circleString, "<" )

	
	circleString            = GamemodeUtility_GetParsedStringForCircleValues( circleStringValuesArray )
	circleStringValuesArray = GetTrimmedSplitString( circleString, ">" )

	
	circleString            = GamemodeUtility_GetParsedStringForCircleValues( circleStringValuesArray )
	circleStringValuesArray = GetTrimmedSplitString( circleString, " " )

	
	foreach( item in circleStringValuesArray )
	{
		circleValuesArray.append( float( item ) )
	}

	return circleValuesArray
}


string function GamemodeUtility_GetParsedStringForCircleValues( array< string > stringValuesArray )
{
	string parsedPlaylistString = ""
	foreach( item in stringValuesArray )
	{
		parsedPlaylistString += " " + item
	}

	return parsedPlaylistString
}









