





global function MeleeShared_Init

global function Loadout_MeleeSkin

global function Loadout_Deathbox
global function Deathbox_GetDefaultItemFlavor
global function Deathbox_GetGoldenHorseDeathbox


global function MeleeWeapon_GetMainWeaponClassname
global function MeleeWeapon_GetOffhandWeaponClassname
global function MeleeSkin_GetMenuModel
global function MeleeSkin_GetMenuAnimSeq
global function MeleeSkin_GetKOSound
global function MeleeSkin_GetMenuModelRotation
global function MeleeSkin_HasSpecificCharacterFlavor
global function MeleeSkin_GetCharacterFlavor
global function MeleeSkin_GetSortOrdinal
global function MeleeSkin_GetStoreImage
global function MeleeSkin_GetEquipImage
global function MeleeSkin_GetItemInspectScale
global function MeleeSkin_GetItemInspectOffset
global function MeleeSkin_ShouldHideIfLocked
global function MeleeCustomization_ShouldHideIfLocked




global function Deathbox_GetVideo
global function RequestToggleGoldenHorseDeathboxEquipForMeleeSkin
global function Deathbox_GetEquipped











































#if DEV
global function SetDevMenu_OverrideMenuHeirloomModels
global function SetupChangeOverrideMenuHeirloomModels
#endif

#if DEV
global function DEV_SetMenuHeirloomOverrideGUID
global function DEV_GetMenuHeirloomOverrideGUID
#endif


global enum eMeleeWeaponType {
	HEIRLOOM
	ARTIFACT

	COUNT
}

global const string LOADOUT_CLIENT_CALLBACK_TOGGLE_GOLDEN_HORSE_DEATHBOX = "ClientCallback_Loadouts_ToggleGoldenHorseDeathboxEquipForMeleeSkin"
global const string LOADOUT_SERVER_CALLBACK_GOLDEN_HORSE_DEATHBOX_TOGGLED = "ServerCallback_Loadouts_GoldenHorseDeathboxEquipForMeleeSkinToggled"
global const string ARTIFACT_EQUIPPED_MOD = "artifact_equipped" 

const int DEFAULT_MELEE_WEAPON_GUID = 1222621873
const int GOLDEN_HORSE_DEATHBOX_GUID = 705533011
const int DEFAULT_DEATHBOX_GUID = 989815244

const asset DEFAULT_DEATHBOX = $"settings/itemflav/artifact_components/deathbox_default.rpak"
const asset GOLDEN_HORSE_DEATHBOX = $"settings/itemflav/artifact_components/deathbox_ragold.rpak"

const int NUM_LOADOUT_BACKUPS = 3 
const string WEAPON_TYPE_SETTINGS_BLOCK_KEY = "meleeWeaponType"


const asset DEFAULT_MELEE_SKIN = $"settings/itemflav/melee_skin/default.rpak"
const int MELEE_VIEWHANDS_SLOT = 2
const int MELEE_OFFHAND_SLOT = 5

const float MELEE_CONFIRMATION_SEVERITY_SCALE_WHEN_ENEMY = 1.0
const float MELEE_CONFIRMATION_SEVERITY_SCALE_WHEN_NOT_ENEMY = 0.5

const float MELEE_KNOCKBACK_DURATION = 0.25






struct CharacterAndMeleeWeapons
{
	ItemFlavor& character
	array<ItemFlavor> meleeWeapons
}

struct FileStruct_LifetimeLevel
{
	table<ItemFlavor, LoadoutEntry> characterMeleeSkinLoadoutEntryMap


	table<ItemFlavor, LoadoutEntry> characterDeathboxLoadoutEntryMap
	array<ItemFlavor> fullDeathboxList


	table<ItemFlavor, int> cosmeticFlavorSortOrdinalMap

	table<ItemFlavor, CharacterAndMeleeWeapons > charactersMeleeWeaponsMap 

#if DEV
	int menuHeirloomOverrideGUID = -1
#endif
}
FileStruct_LifetimeLevel& fileLevel


void function MeleeShared_Init()
{
	FileStruct_LifetimeLevel newFileLevel
	fileLevel = newFileLevel

	AddCallback_RegisterRootItemFlavors( void function() {
		foreach ( asset meleeWeaponAsset in GetBaseItemFlavorsFromArray( "meleeWeapons" ) )
			RegisterItemFlavorFromSettingsAsset( meleeWeaponAsset )
	} )

	AddCallback_OnItemFlavorRegistered( eItemType.character, OnItemFlavorRegistered_Character )
	AddCallback_OnItemFlavorRegistered( eItemType.melee_weapon, OnItemFlavorRegistered_Melee_Weapon )

	AddCallback_OnPreAllItemFlavorsRegistered( OnAllItemFlavorsRegistered_Melee_Weapon )
}

void function OnItemFlavorRegistered_Character( ItemFlavor character )
{
	CharacterAndMeleeWeapons obj
	obj.character = character
	obj.meleeWeapons = []

	fileLevel.charactersMeleeWeaponsMap[character] <- obj
}

void function OnItemFlavorRegistered_Melee_Weapon( ItemFlavor meleeWeapon )
{





	array<ItemFlavor> legendsList = RegisterReferencedItemFlavorsFromArray( meleeWeapon, "legends", "flavor" )

	
	if ( legendsList.len() == 0 )
	{

			Assert( ItemFlavor_GetGUID( meleeWeapon ) == DEFAULT_MELEE_WEAPON_GUID || MeleeWeapon_GetWeaponType( meleeWeapon ) == eMeleeWeaponType.ARTIFACT )


		foreach ( obj in fileLevel.charactersMeleeWeaponsMap )
		{
			obj.meleeWeapons.append( meleeWeapon )
		}
	}
	else 
	{
		foreach ( legend in legendsList )
		{
			fileLevel.charactersMeleeWeaponsMap[legend].meleeWeapons.append( meleeWeapon )
		}
	}





}


void function OnAllItemFlavorsRegistered_Deathboxes()
{
	ItemFlavor ornull defaultBox = RegisterItemFlavorFromSettingsAsset( DEFAULT_DEATHBOX )
	Assert( defaultBox != null, "Failed to register default Deathbox from asset " + DEFAULT_DEATHBOX ) 
	fileLevel.fullDeathboxList.append( expect ItemFlavor( defaultBox ) )

	ItemFlavor ornull goldenHorseBox = RegisterItemFlavorFromSettingsAsset( GOLDEN_HORSE_DEATHBOX )
	if ( goldenHorseBox != null ) 
		fileLevel.fullDeathboxList.append( expect ItemFlavor( goldenHorseBox ) )
}


void function OnAllItemFlavorsRegistered_Melee_Weapon()
{

	OnAllItemFlavorsRegistered_Deathboxes()


	
	foreach ( obj in fileLevel.charactersMeleeWeaponsMap )
	{
		array<ItemFlavor> fullMeleeSkinList = []
		ItemFlavor character = obj.character

		foreach ( meleeWeapon in obj.meleeWeapons )
		{
			array<ItemFlavor> meleeSkinList = RegisterReferencedItemFlavorsFromArray( meleeWeapon, "skins", "flavor" )

			foreach ( meleeSkin in meleeSkinList )
			{
				fullMeleeSkinList.append( meleeSkin )
			}
		}

		MakeItemFlavorSet( fullMeleeSkinList, fileLevel.cosmeticFlavorSortOrdinalMap, true )

		LoadoutEntry skinEntry = RegisterLoadoutSlot( eLoadoutEntryType.ITEM_FLAVOR, "character_meleeskin_for_" + ItemFlavor_GetGUIDString( character ), eLoadoutEntryClass.CHARACTER )
		skinEntry.category     = eLoadoutCategory.CHARACTER_MELEESKINS
#if DEV
			skinEntry.pdefSectionKey = "character " + ItemFlavor_GetGUIDString( character )
			skinEntry.DEV_name       = ItemFlavor_GetCharacterRef( character ) + " Melee Skin"
#endif
		skinEntry.defaultItemFlavor         = GetItemFlavorByAsset( DEFAULT_MELEE_SKIN )
		skinEntry.validItemFlavorList       = fullMeleeSkinList

		skinEntry.backupCount 			    = NUM_LOADOUT_BACKUPS

		skinEntry.isSlotLocked              = bool function( EHI playerEHI ) { return !IsLobby() }
		skinEntry.associatedCharacterOrNull = character
		skinEntry.networkTo                 = eLoadoutNetworking.PLAYER_GLOBAL
		skinEntry.networkVarName			= "MeleeSkin"
		skinEntry.stryderCharDataArrayIndex = ePlayerStryderCharDataArraySlots.MELEE_SKIN
		fileLevel.characterMeleeSkinLoadoutEntryMap[character] <- skinEntry








			LoadoutEntry boxEntry = RegisterLoadoutSlot( eLoadoutEntryType.ITEM_FLAVOR, "character_deathbox_for_" + ItemFlavor_GetGUIDString( character ), eLoadoutEntryClass.CHARACTER )
			boxEntry.category     = eLoadoutCategory.DEATHBOX
#if DEV
				boxEntry.pdefSectionKey = "character " + ItemFlavor_GetGUIDString( character )
				boxEntry.DEV_name       = ItemFlavor_GetCharacterRef( character ) + " Death Box"
#endif
			boxEntry.defaultItemFlavor         = fileLevel.fullDeathboxList[0]
			boxEntry.validItemFlavorList       = fileLevel.fullDeathboxList
			boxEntry.backupCount 			   = NUM_LOADOUT_BACKUPS
			boxEntry.isSlotLocked              = bool function( EHI playerEHI ) { return !IsLobby() }
			boxEntry.associatedCharacterOrNull = character
			boxEntry.networkTo                 = eLoadoutNetworking.PLAYER_EXCLUSIVE
			boxEntry.stryderCharDataArrayIndex = ePlayerStryderCharDataArraySlots.INVALID
			fileLevel.characterDeathboxLoadoutEntryMap[character] <- boxEntry

	}
}

int function MeleeSkin_GetSortOrdinal( ItemFlavor flavor )
{
	Assert( ItemFlavor_GetType( flavor ) == eItemType.melee_skin )

	return fileLevel.cosmeticFlavorSortOrdinalMap[flavor]
}


int function MeleeWeapon_GetWeaponType( ItemFlavor flavor )
{
	var flavorBlock = ItemFlavor_GetSettingsBlock( flavor )
	string typeName = GetSettingsBlockString( flavorBlock, WEAPON_TYPE_SETTINGS_BLOCK_KEY )

	Assert ( typeName in eMeleeWeaponType )
	return eMeleeWeaponType[ typeName ]
}

























































































asset function MeleeSkin_GetStoreImage( ItemFlavor flavor )
{
	Assert( ItemFlavor_GetType( flavor ) == eItemType.melee_skin )

	return GetGlobalSettingsAsset( ItemFlavor_GetAsset( flavor ), "storeImage" )
}




asset function MeleeSkin_GetEquipImage( ItemFlavor flavor )
{
	Assert( ItemFlavor_GetType( flavor ) == eItemType.melee_skin )

	return GetGlobalSettingsAsset( ItemFlavor_GetAsset( flavor ), "equipImage" )
}




float function MeleeSkin_GetItemInspectScale( ItemFlavor flavor )
{
	Assert( ItemFlavor_GetType( flavor ) == eItemType.melee_skin)

	return GetGlobalSettingsFloat( ItemFlavor_GetAsset( flavor ), "itemInspectScale" )
}




vector function MeleeSkin_GetItemInspectOffset( ItemFlavor flavor )
{
	Assert( ItemFlavor_GetType( flavor ) == eItemType.melee_skin)

	return GetGlobalSettingsVector( ItemFlavor_GetAsset( flavor ), "itemInspectOffset" )
}



bool function MeleeSkin_ShouldHideIfLocked( ItemFlavor meleeSkin )
{
	if ( ItemFlavor_GetType( meleeSkin ) != eItemType.melee_skin )
		return false

	return GetGlobalSettingsBool( ItemFlavor_GetAsset( meleeSkin ), "shouldHideIfLocked" )
}



bool function MeleeCustomization_ShouldHideIfLocked( ItemFlavor component )
{
	if ( ItemFlavor_GetType( component ) <= eItemType.artifact_component_START || ItemFlavor_GetType( component ) >= eItemType.artifact_component_END )
		return false

	return GetSettingsBlockBool( ItemFlavor_GetSettingsBlock( component ), "shouldHideIfLocked" )
}



LoadoutEntry function Loadout_MeleeSkin( ItemFlavor character )
{
	Assert( ItemFlavor_GetType( character ) == eItemType.character )

	return fileLevel.characterMeleeSkinLoadoutEntryMap[character]
}




LoadoutEntry function Loadout_Deathbox( ItemFlavor character )
{
	Assert( ItemFlavor_GetType( character ) == eItemType.character )

	return fileLevel.characterDeathboxLoadoutEntryMap[character]
}



asset function Deathbox_GetVideo( ItemFlavor deathbox )
{
	Assert( ItemFlavor_GetType( deathbox ) == eItemType.artifact_component_deathbox )

	return GetGlobalSettingsStringAsAsset( ItemFlavor_GetAsset( deathbox ), "video" )
}



ItemFlavor function Deathbox_GetDefaultItemFlavor()
{
	Assert( IsValidItemFlavorGUID( DEFAULT_DEATHBOX_GUID ) )
	return GetItemFlavorByGUID( DEFAULT_DEATHBOX_GUID  )
}

ItemFlavor ornull function Deathbox_GetGoldenHorseDeathbox()
{
	if ( IsValidItemFlavorGUID( GOLDEN_HORSE_DEATHBOX_GUID ) )
		return GetItemFlavorByGUID( GOLDEN_HORSE_DEATHBOX_GUID  )

	return null
}



void function RequestToggleGoldenHorseDeathboxEquipForMeleeSkin( EHI playerEHI, LoadoutEntry entry, ItemFlavor meleeSkin )
{
	Assert( playerEHI == LocalClientEHI(), "Tried to use RequestToggleGoldenHorseDeathboxEquipForMeleeSkin on a different player" )
	int slotContentsIndex = ConvertItemFlavorToLoadoutSlotContentsIndex( entry, meleeSkin )

	ItemFlavor ornull character = entry.associatedCharacterOrNull
	Assert( character != null )
	expect ItemFlavor( character )
	Remote_ServerCallFunction( LOADOUT_CLIENT_CALLBACK_TOGGLE_GOLDEN_HORSE_DEATHBOX, ItemFlavor_GetGUID( character ), slotContentsIndex )
}



ItemFlavor function Deathbox_GetEquipped( ItemFlavor character, ItemFlavor meleeSkin )
{
	EHI playerEHI = LocalClientEHI()
	LoadoutEntry skinSlot = Loadout_MeleeSkin( character )
	LoadoutEntry boxSlot  = Loadout_Deathbox( character )
	array<ItemFlavor> skinBackups = LoadoutSlot_GetBackups( playerEHI, skinSlot )
	array<ItemFlavor> boxBackups  = LoadoutSlot_GetBackups( playerEHI, boxSlot )

	ItemFlavor ornull ghDeathbox = Deathbox_GetGoldenHorseDeathbox()
	bool hasGHBox = false
	for ( int i = 0; i < skinBackups.len() && i < boxBackups.len(); i++ )
	{
		if ( skinBackups[i] == meleeSkin )
		{
			hasGHBox = ( boxBackups[i] == ghDeathbox )
			break
		}
	}

	if ( hasGHBox && ghDeathbox != null )
		return expect ItemFlavor( ghDeathbox )

	return GetDefaultItemFlavorForLoadoutSlot( playerEHI, boxSlot )
}











































































































































































































string function MeleeWeapon_GetMainWeaponClassname( ItemFlavor meleeWeapon )
{
	Assert( ItemFlavor_GetType( meleeWeapon ) == eItemType.melee_weapon )

	return GetGlobalSettingsString( ItemFlavor_GetAsset( meleeWeapon ), "mainWeaponClassname" )
}




string function MeleeWeapon_GetOffhandWeaponClassname( ItemFlavor meleeWeapon )
{
	Assert( ItemFlavor_GetType( meleeWeapon ) == eItemType.melee_weapon )

	return GetGlobalSettingsString( ItemFlavor_GetAsset( meleeWeapon ), "offhandWeaponClassname" )
}




asset function MeleeSkin_GetMenuModel( ItemFlavor meleeSkin )
{
	Assert( ItemFlavor_GetType( meleeSkin ) == eItemType.melee_skin )

	asset meleeWeaponAsset = GetGlobalSettingsAsset( ItemFlavor_GetAsset( meleeSkin ), "parentItemFlavor" )
	ItemFlavor meleeWeapon = GetItemFlavorByAsset( meleeWeaponAsset )
	string mainWeaponClassname = MeleeWeapon_GetMainWeaponClassname( meleeWeapon )
	return GetWeaponInfoFileKeyFieldAsset_Global( mainWeaponClassname, "viewmodel" )
}




asset function MeleeSkin_GetMenuAnimSeq( ItemFlavor meleeSkin )
{
	Assert( ItemFlavor_GetType( meleeSkin ) == eItemType.melee_skin )

	return GetGlobalSettingsAsset( ItemFlavor_GetAsset( meleeSkin ), "menuAnimSeq" )
}




string function MeleeSkin_GetKOSound( ItemFlavor meleeSkin )
{
	Assert( ItemFlavor_GetType( meleeSkin ) == eItemType.melee_skin )

	return GetGlobalSettingsString( ItemFlavor_GetAsset( meleeSkin ), "koSound" )
}




vector function MeleeSkin_GetMenuModelRotation( ItemFlavor meleeSkin )
{
	Assert( ItemFlavor_GetType( meleeSkin ) == eItemType.melee_skin )

	return GetGlobalSettingsVector( ItemFlavor_GetAsset( meleeSkin ), "menuMdlRot" )
}




bool function MeleeSkin_HasSpecificCharacterFlavor( ItemFlavor meleeSkin )
{
	Assert( ItemFlavor_GetType( meleeSkin ) == eItemType.melee_skin )

	asset meleeWeapon = GetGlobalSettingsAsset( ItemFlavor_GetAsset( meleeSkin ), "parentItemFlavor" )
	Assert( ItemFlavor_GetType( GetItemFlavorByAsset( meleeWeapon ) ) == eItemType.melee_weapon )

	asset character = GetGlobalSettingsAsset( meleeWeapon, "parentItemFlavor" )

	if ( character == "" )
		return false

	Assert( ItemFlavor_GetType( GetItemFlavorByAsset( character ) ) == eItemType.character )

	return true
}




ItemFlavor function MeleeSkin_GetCharacterFlavor( ItemFlavor meleeSkin )
{
	Assert( ItemFlavor_GetType( meleeSkin ) == eItemType.melee_skin )

	asset meleeWeapon = GetGlobalSettingsAsset( ItemFlavor_GetAsset( meleeSkin ), "parentItemFlavor" )
	Assert( ItemFlavor_GetType( GetItemFlavorByAsset( meleeWeapon ) ) == eItemType.melee_weapon )

	asset character = GetGlobalSettingsAsset( meleeWeapon, "parentItemFlavor" )
	Assert( character != "", "Implies all characters can use this melee weapon. Check this case with MeleeSkin_HasSpecificCharacterFlavor()" )
	Assert( ItemFlavor_GetType( GetItemFlavorByAsset( character ) ) == eItemType.character )

	return GetItemFlavorByAsset( character )
}



































































































































































































































































































































































































































































































































































































































#if DEV
void function SetDevMenu_OverrideMenuHeirloomModels( var _ )
{
	thread ChangeToThisMenu( SetupChangeOverrideMenuHeirloomModels )
}


void function SetupChangeOverrideMenuHeirloomModels()
{
	SetupDevCommand( "Disable Override", "script_ui DEV_SetMenuHeirloomOverrideGUID( -1 ); script_client DEV_SetMenuHeirloomOverrideGUID( -1 )" )

	array<ItemFlavor> meleeSkins = clone GetAllItemFlavorsOfType( eItemType.melee_skin )
	meleeSkins.removebyvalue( GetItemFlavorByAsset( DEFAULT_MELEE_SKIN ) )

	table<ItemFlavor, string> meleeSkinNames

	foreach ( meleeSkin in meleeSkins )
	{
		string characterName
		asset parentWeapon 	  = GetGlobalSettingsAsset( ItemFlavor_GetAsset( meleeSkin ), "parentItemFlavor" )
		asset parentCharacter = GetGlobalSettingsAsset( parentWeapon, "parentItemFlavor" )
		bool lacksParentCharacter = ( parentCharacter == "" || !IsValidItemFlavorSettingsAsset( parentCharacter ) || ItemFlavor_GetType( GetItemFlavorByAsset( parentCharacter ) ) != eItemType.character )
		if ( lacksParentCharacter )
			characterName = "<UNDEFINED>"
		else
			characterName = Localize( ItemFlavor_GetLongName( MeleeSkin_GetCharacterFlavor( meleeSkin ) ) )

		string meleeSkinName = Localize( ItemFlavor_GetLongName( meleeSkin ) )
		if ( meleeSkinName == "" )
			meleeSkinName = "<UNNAMED>"

		meleeSkinNames[meleeSkin] <- characterName + " - " + meleeSkinName
	}

	meleeSkins.sort( int function( ItemFlavor a, ItemFlavor b ) : ( meleeSkinNames ) {
		if ( meleeSkinNames[a] < meleeSkinNames[b] )
			return -1

		if ( meleeSkinNames[a] > meleeSkinNames[b] )
			return 1

		return 0
	} )

	foreach ( ItemFlavor meleeSkin in meleeSkins )
	{
		SetupDevFunc( meleeSkinNames[meleeSkin], void function( var unused ) : ( meleeSkin ) {
			fileLevel.menuHeirloomOverrideGUID = ItemFlavor_GetGUID( meleeSkin )
			if ( CanRunClientScript() )
				RunClientScript( "DEV_SetMenuHeirloomOverrideGUID", fileLevel.menuHeirloomOverrideGUID )

			int ownedPacks = GRX_IsInventoryReady() ? GRX_GetTotalPackCount() : 0
			if ( ownedPacks < 1 )
				DEV_GRX_TestPurchase( "pack_cosmetic_rare", [100, 0, 0, 0, 0], 50 )
		} )
	}
}
#endif


#if DEV
void function DEV_SetMenuHeirloomOverrideGUID( int guid )
{
	fileLevel.menuHeirloomOverrideGUID = guid
}


int function DEV_GetMenuHeirloomOverrideGUID()
{
	return fileLevel.menuHeirloomOverrideGUID
}
#endif
