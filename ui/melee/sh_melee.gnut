





global function MeleeShared_Init
global function Loadout_MeleeSkin
global function Loadout_Deathbox
global function Deathbox_GetDefaultItemFlavor
global function Deathbox_GetGoldenHorseDeathbox
global function MeleeWeapon_GetWeaponType
global function MeleeWeapon_GetMainWeaponClassname
global function MeleeWeapon_GetOffhandWeaponClassname
global function MeleeSkin_GetMenuModel
global function MeleeSkin_GetMenuAnimSeq
global function MeleeSkin_GetKOSound
global function MeleeSkin_GetMenuModelRotation
global function MeleeSkin_HasSpecificCharacterFlavor
global function MeleeSkin_GetCharacterFlavor
global function MeleeSkin_GetSortOrdinal
global function MeleeSkin_GetStoreImage
global function MeleeSkin_GetEquipImage
global function MeleeSkin_GetItemInspectScale
global function MeleeSkin_GetItemInspectOffset
global function MeleeSkin_GetMilestoneEventOffset
global function MeleeSkin_ShouldHideIfLocked
global function MeleeSkin_IsItemFlavorUnlocked
global function MeleeCustomization_ShouldHideIfLocked

global function Loadout_MeleeAddOns
global function Loadout_GetEquippedMeleeAddOnsForWeapon
global function Loadout_WeaponAddons
global function Loadout_DoesAddOnAutoEquip




global function MeleeSkin_IsRewardForActiveEvent
global function MeleeSkin_IsRewardForActiveCollectionEvent


global function ArtifactsCallback_AddArtifactDeathboxesToCharacterLoadouts

global function Deathbox_GetVideo
global function RequestSetDeathboxEquipForMeleeSkin
global function Deathbox_GetEquipped



























































#if DEV
global function SetDevMenu_OverrideMenuHeirloomModels
global function SetupChangeOverrideMenuHeirloomModels
#endif

#if DEV
global function DEV_SetMenuHeirloomOverrideGUID
global function DEV_GetMenuHeirloomOverrideGUID
#endif

global enum eMeleeWeaponType {
	HEIRLOOM
	ARTIFACT

		UNIVERSAL

	COUNT
}

global const string LOADOUT_CLIENT_CALLBACK_TOGGLE_DEATHBOX = "ClientCallback_Loadouts_ToggleDeathboxEquipForMeleeSkin"
global const string LOADOUT_SERVER_CALLBACK_DEATHBOX_TOGGLED = "ServerCallback_Loadouts_DeathboxEquipForMeleeSkinToggled"
global const string ARTIFACT_EQUIPPED_MOD = "artifact_equipped" 

global const GH_DEATHBOX_FX = $"P_death_box_fx_gh" 

global const int DEFAULT_MELEE_WEAPON_SKIN_GUID = 519356259
const int DEFAULT_MELEE_WEAPON_GUID = 1222621873
const int GOLDEN_HORSE_DEATHBOX_GUID = 705533011
const int DEFAULT_DEATHBOX_GUID = 989815244

const string FX_CORE = "FX_CORE"
const string FX_CENTER = "FX_CENTER"

const asset DEFAULT_DEATHBOX = $"settings/itemflav/artifact_components/deathbox_default.rpak"
const asset GOLDEN_HORSE_DEATHBOX = $"settings/itemflav/artifact_components/deathbox_ragold.rpak"

const int NUM_LOADOUT_BACKUPS = 4 
const string WEAPON_TYPE_SETTINGS_BLOCK_KEY = "meleeWeaponType"





const asset DEFAULT_MELEE_SKIN = $"settings/itemflav/melee_skin/default.rpak"
const int MELEE_VIEWHANDS_SLOT = 2
const int MELEE_OFFHAND_SLOT = 5

const float MELEE_CONFIRMATION_SEVERITY_SCALE_WHEN_ENEMY = 1.0
const float MELEE_CONFIRMATION_SEVERITY_SCALE_WHEN_NOT_ENEMY = 0.5

const float MELEE_KNOCKBACK_DURATION = 0.25



global const int MELEE_ADDONS_IS_OWNED = 1 << 0
const int LOADOUTS_MAX_ADDONS = 5
const asset DEFAULT_EMPTY_MELEE_ADDON = $"settings/itemflav/melee_addon/_empty.rpak"







struct CharacterAndMeleeWeapons
{
	ItemFlavor& character
	array<ItemFlavor> meleeWeapons
}

struct FileStruct_LifetimeLevel
{
	table<ItemFlavor, LoadoutEntry> characterMeleeSkinLoadoutEntryMap


	table<ItemFlavor, LoadoutEntry> characterDeathboxLoadoutEntryMap
	array<ItemFlavor> fullDeathboxList


	table<ItemFlavor, int> cosmeticFlavorSortOrdinalMap

	table<ItemFlavor, CharacterAndMeleeWeapons > charactersMeleeWeaponsMap 


	table< ItemFlavor, array< ItemFlavor > > weaponAddOnsMap 
	array< ItemFlavor > allMeleeAddOns = [] 
	array< LoadoutEntry > meleeAddOnLoadoutSlots = [] 






#if DEV
	int menuHeirloomOverrideGUID = -1
#endif
}
FileStruct_LifetimeLevel& fileLevel


void function MeleeShared_Init()
{
	FileStruct_LifetimeLevel newFileLevel
	fileLevel = newFileLevel






	AddCallback_RegisterRootItemFlavors( void function() {
		foreach ( asset meleeWeaponAsset in GetBaseItemFlavorsFromArray( "meleeWeapons" ) )
			RegisterItemFlavorFromSettingsAsset( meleeWeaponAsset )
	} )

	AddCallback_OnItemFlavorRegistered( eItemType.character, OnItemFlavorRegistered_Character )
	AddCallback_OnItemFlavorRegistered( eItemType.melee_weapon, OnItemFlavorRegistered_Melee_Weapon )

	AddCallback_OnPreAllItemFlavorsRegistered( OnAllItemFlavorsRegistered_Melee_Weapon )
}

void function OnItemFlavorRegistered_Character( ItemFlavor character )
{
	CharacterAndMeleeWeapons obj
	obj.character = character
	obj.meleeWeapons = []

	fileLevel.charactersMeleeWeaponsMap[character] <- obj
}

void function OnItemFlavorRegistered_Melee_Weapon( ItemFlavor meleeWeapon )
{





	array<ItemFlavor> legendsList = RegisterReferencedItemFlavorsFromArray( meleeWeapon, "legends", "flavor" )

	
	if ( legendsList.len() == 0 )
	{

		Assert( ItemFlavor_GetGUID( meleeWeapon ) == DEFAULT_MELEE_WEAPON_GUID || MeleeWeapon_GetWeaponType( meleeWeapon ) == eMeleeWeaponType.ARTIFACT || MeleeWeapon_GetWeaponType( meleeWeapon ) == eMeleeWeaponType.UNIVERSAL )




		foreach ( obj in fileLevel.charactersMeleeWeaponsMap )
		{
			obj.meleeWeapons.append( meleeWeapon )
		}
	}
	else 
	{
		foreach ( legend in legendsList )
		{
			fileLevel.charactersMeleeWeaponsMap[legend].meleeWeapons.append( meleeWeapon )
		}
	}

	if ( MeleeWeapon_GetWeaponType( meleeWeapon ) == eMeleeWeaponType.ARTIFACT && Artifacts_GetConfigurationFramework( meleeWeapon ) == eArtifactConfigurationType.COMPONENT )
		RegisterArtifactComponentsForWeapon( meleeWeapon )


	RegisterMeleeAddOnsForWeapon( meleeWeapon )

}

void function OnAllItemFlavorsRegistered_Deathboxes()
{
	ItemFlavor ornull defaultBox = RegisterItemFlavorFromSettingsAsset( DEFAULT_DEATHBOX )
	Assert( defaultBox != null, "Failed to register default Deathbox from asset " + DEFAULT_DEATHBOX ) 
	fileLevel.fullDeathboxList.append( expect ItemFlavor( defaultBox ) )

	ItemFlavor ornull goldenHorseBox = RegisterItemFlavorFromSettingsAsset( GOLDEN_HORSE_DEATHBOX )
	if ( goldenHorseBox != null ) 
	{
		expect ItemFlavor( goldenHorseBox )

		fileLevel.fullDeathboxList.append( goldenHorseBox )







	}
}

void function OnAllItemFlavorsRegistered_Melee_Weapon()
{
	OnAllItemFlavorsRegistered_Deathboxes()

	
	foreach ( obj in fileLevel.charactersMeleeWeaponsMap )
	{
		array<ItemFlavor> fullMeleeSkinList = []
		ItemFlavor character = obj.character

		foreach ( meleeWeapon in obj.meleeWeapons )
		{
			array<ItemFlavor> meleeSkinList = RegisterReferencedItemFlavorsFromArray( meleeWeapon, "skins", "flavor" )

			foreach ( meleeSkin in meleeSkinList )
			{





				fullMeleeSkinList.append( meleeSkin )
			}
		}

		MakeItemFlavorSet( fullMeleeSkinList, fileLevel.cosmeticFlavorSortOrdinalMap, true )

		LoadoutEntry skinEntry = RegisterLoadoutSlot( eLoadoutEntryType.ITEM_FLAVOR, "character_meleeskin_for_" + ItemFlavor_GetGUIDString( character ), eLoadoutEntryClass.CHARACTER )
		skinEntry.category     = eLoadoutCategory.CHARACTER_MELEESKINS
#if DEV
			skinEntry.pdefSectionKey = "character " + ItemFlavor_GetGUIDString( character )
			skinEntry.DEV_name       = ItemFlavor_GetCharacterRef( character ) + " Melee Skin"
#endif
		skinEntry.defaultItemFlavor         = GetItemFlavorByAsset( DEFAULT_MELEE_SKIN )
		skinEntry.validItemFlavorList       = fullMeleeSkinList

		skinEntry.backupCount 			    = NUM_LOADOUT_BACKUPS

		skinEntry.isSlotLocked              = bool function( EHI playerEHI ) { return !IsLobby() }
		skinEntry.associatedCharacterOrNull = character
		skinEntry.networkTo                 = eLoadoutNetworking.PLAYER_GLOBAL
		skinEntry.networkVarName			= "MeleeSkin"
		skinEntry.stryderCharDataArrayIndex = ePlayerStryderCharDataArraySlots.MELEE_SKIN
		skinEntry.isItemFlavorUnlocked      = MeleeSkin_IsItemFlavorUnlocked
		fileLevel.characterMeleeSkinLoadoutEntryMap[character] <- skinEntry








			LoadoutEntry boxEntry = RegisterLoadoutSlot( eLoadoutEntryType.ITEM_FLAVOR, "character_deathbox_for_" + ItemFlavor_GetGUIDString( character ), eLoadoutEntryClass.CHARACTER )
			boxEntry.category     = eLoadoutCategory.DEATHBOX
#if DEV
				boxEntry.pdefSectionKey = "character " + ItemFlavor_GetGUIDString( character )
				boxEntry.DEV_name       = ItemFlavor_GetCharacterRef( character ) + " Death Box"
#endif
			boxEntry.defaultItemFlavor         = fileLevel.fullDeathboxList[0]
			boxEntry.validItemFlavorList       = fileLevel.fullDeathboxList
			boxEntry.backupCount 			   = NUM_LOADOUT_BACKUPS
			boxEntry.isSlotLocked              = bool function( EHI playerEHI ) { return !IsLobby() }
			boxEntry.associatedCharacterOrNull = character
			boxEntry.networkTo                 = eLoadoutNetworking.PLAYER_EXCLUSIVE
			boxEntry.stryderCharDataArrayIndex = ePlayerStryderCharDataArraySlots.INVALID
			fileLevel.characterDeathboxLoadoutEntryMap[character] <- boxEntry

	}


	OnAllItemFlavorsRegistered_MeleeAddOns()

}

int function MeleeSkin_GetSortOrdinal( ItemFlavor flavor )
{
	Assert( ItemFlavor_GetType( flavor ) == eItemType.melee_skin )

	return fileLevel.cosmeticFlavorSortOrdinalMap[flavor]
}

int function MeleeWeapon_GetWeaponType( ItemFlavor flavor )
{
	var flavorBlock = ItemFlavor_GetSettingsBlock( flavor )
	string typeName = GetSettingsBlockString( flavorBlock, WEAPON_TYPE_SETTINGS_BLOCK_KEY )

	Assert ( typeName in eMeleeWeaponType )
	return eMeleeWeaponType[ typeName ]
}




























































































asset function MeleeSkin_GetStoreImage( ItemFlavor flavor )
{
	Assert( ItemFlavor_GetType( flavor ) == eItemType.melee_skin )

	if ( Artifacts_Loadouts_IsConfigPointerItemFlavor( flavor ) )
	{
		
		asset meleeWeaponAsset = GetGlobalSettingsAsset( ItemFlavor_GetAsset( flavor ), "parentItemFlavor" )
		flavor = GetItemFlavorByAsset( meleeWeaponAsset )
	}

	return GetGlobalSettingsAsset( ItemFlavor_GetAsset( flavor ), "storeImage" )
}




asset function MeleeSkin_GetEquipImage( ItemFlavor flavor )
{
	Assert( ItemFlavor_GetType( flavor ) == eItemType.melee_skin )

	if ( Artifacts_Loadouts_IsConfigPointerItemFlavor( flavor ) )
	{
		
		asset meleeWeaponAsset = GetGlobalSettingsAsset( ItemFlavor_GetAsset( flavor ), "parentItemFlavor" )
		flavor = GetItemFlavorByAsset( meleeWeaponAsset )
	}

	return GetGlobalSettingsAsset( ItemFlavor_GetAsset( flavor ), "equipImage" )
}




float function MeleeSkin_GetItemInspectScale( ItemFlavor flavor )
{
	Assert( ItemFlavor_GetType( flavor ) == eItemType.melee_skin)

	if ( Artifacts_Loadouts_IsConfigPointerItemFlavor( flavor ) )
	{
		
		asset meleeWeaponAsset = GetGlobalSettingsAsset( ItemFlavor_GetAsset( flavor ), "parentItemFlavor" )
		flavor = GetItemFlavorByAsset( meleeWeaponAsset )
	}

	return GetGlobalSettingsFloat( ItemFlavor_GetAsset( flavor ), "itemInspectScale" )
}




vector function MeleeSkin_GetItemInspectOffset( ItemFlavor flavor )
{
	Assert( ItemFlavor_GetType( flavor ) == eItemType.melee_skin)

	if ( Artifacts_Loadouts_IsConfigPointerItemFlavor( flavor ) )
	{
		
		asset meleeWeaponAsset = GetGlobalSettingsAsset( ItemFlavor_GetAsset( flavor ), "parentItemFlavor" )
		flavor = GetItemFlavorByAsset( meleeWeaponAsset )
	}

	return GetGlobalSettingsVector( ItemFlavor_GetAsset( flavor ), "itemInspectOffset" )
}


vector function MeleeSkin_GetMilestoneEventOffset( ItemFlavor flavor )
{
	Assert( ItemFlavor_GetType( flavor ) == eItemType.melee_skin )

	if ( Artifacts_Loadouts_IsConfigPointerItemFlavor( flavor ) )
	{
		
		asset meleeWeaponAsset = GetGlobalSettingsAsset( ItemFlavor_GetAsset( flavor ), "parentItemFlavor" )
		flavor = GetItemFlavorByAsset( meleeWeaponAsset )
	}

	return GetGlobalSettingsVector( ItemFlavor_GetAsset( flavor ), "milestoneItemOffset" )
}


bool function MeleeSkin_ShouldHideIfLocked( ItemFlavor meleeSkin )
{
	if ( ItemFlavor_GetType( meleeSkin ) != eItemType.melee_skin )
		return false

	return GetGlobalSettingsBool( ItemFlavor_GetAsset( meleeSkin ), "shouldHideIfLocked" )
}



bool function MeleeSkin_IsItemFlavorUnlocked( EHI playerEHI, ItemFlavor meleeSkin, bool shouldIgnoreGRX = false, bool shouldIgnoreOtherSlots = false )
{
	if ( Artifacts_Loadouts_IsConfigPointerItemFlavor( meleeSkin ) )
		return Artifacts_Loadouts_IsAnyArtifactUnlocked( playerEHI, shouldIgnoreGRX )

	return IsItemFlavorGRXUnlockedForLoadoutSlot( playerEHI, meleeSkin, shouldIgnoreGRX, shouldIgnoreOtherSlots )
}



bool function MeleeSkin_IsRewardForActiveEvent( ItemFlavor itemFlav )
{
	if ( ItemFlavor_GetGRXMode( itemFlav ) == eItemFlavorGRXMode.NONE )
		return false

	array<ItemFlavor> activeEvents = GetAllActiveMilestoneEvents( GetUnixTimestamp() )
	if ( activeEvents.len() > 0 )
	{
		foreach ( activeEvent in activeEvents )
		{
			if ( ItemFlavor_GetType( itemFlav ) == eItemType.melee_skin && Artifacts_Loadouts_IsConfigPointerItemFlavor( itemFlav ) )
				return MilestoneEvent_EventAwardsArtifact( activeEvent )
			else
				return MilestoneEvent_IsMythicEventItem( activeEvent, ItemFlavor_GetGRXIndex( itemFlav ) )
		}
	}

	if ( MeleeSkin_IsRewardForActiveCollectionEvent( itemFlav ) )
		return true

	return false
}

bool function MeleeSkin_IsRewardForActiveCollectionEvent( ItemFlavor itemFlav )
{
	if ( ItemFlavor_GetGRXMode( itemFlav ) == eItemFlavorGRXMode.NONE )
		return false

	ItemFlavor ornull activeCollectionEvent = GetActiveCollectionEvent( GetUnixTimestamp() )
	if ( activeCollectionEvent != null )
	{
		expect ItemFlavor( activeCollectionEvent )
		ItemFlavor reward = HeirloomEvent_GetPrimaryCompletionRewardItem( activeCollectionEvent )
		return ( reward == itemFlav )
	}

	return false
}



bool function MeleeCustomization_ShouldHideIfLocked( ItemFlavor component )
{
	if ( ItemFlavor_GetType( component ) <= eItemType.artifact_component_START || ItemFlavor_GetType( component ) >= eItemType.artifact_component_END )
		return false

	return GetSettingsBlockBool( ItemFlavor_GetSettingsBlock( component ), "shouldHideIfLocked" )
}



LoadoutEntry function Loadout_MeleeSkin( ItemFlavor character )
{
	Assert( ItemFlavor_GetType( character ) == eItemType.character )

	return fileLevel.characterMeleeSkinLoadoutEntryMap[character]
}



LoadoutEntry function Loadout_Deathbox( ItemFlavor character )
{
	Assert( ItemFlavor_GetType( character ) == eItemType.character )

	return fileLevel.characterDeathboxLoadoutEntryMap[character]
}



void function ArtifactsCallback_AddArtifactDeathboxesToCharacterLoadouts( array< ItemFlavor > deathboxList )
{
	foreach ( ItemFlavor character, CharacterAndMeleeWeapons unused in fileLevel.charactersMeleeWeaponsMap )
		Loadout_Deathbox( character ).validItemFlavorList = deathboxList
}



asset function Deathbox_GetVideo( ItemFlavor deathbox )
{
	Assert( ItemFlavor_GetType( deathbox ) == eItemType.artifact_component_deathbox )

	return GetGlobalSettingsStringAsAsset( ItemFlavor_GetAsset( deathbox ), "video" )
}



ItemFlavor function Deathbox_GetDefaultItemFlavor()
{
	Assert( IsValidItemFlavorGUID( DEFAULT_DEATHBOX_GUID ) )
	return GetItemFlavorByGUID( DEFAULT_DEATHBOX_GUID  )
}

ItemFlavor ornull function Deathbox_GetGoldenHorseDeathbox()
{
	if ( IsValidItemFlavorGUID( GOLDEN_HORSE_DEATHBOX_GUID ) )
		return GetItemFlavorByGUID( GOLDEN_HORSE_DEATHBOX_GUID  )

	return null
}



void function RequestSetDeathboxEquipForMeleeSkin( EHI playerEHI, LoadoutEntry entry, ItemFlavor meleeSkin, ItemFlavor deathbox )
{
	Assert( playerEHI == LocalClientEHI(), "Tried to use RequestSetDeathboxEquipForMeleeSkin on a different player" )
	int slotContentsIndex = ConvertItemFlavorToLoadoutSlotContentsIndex( entry, meleeSkin )

	ItemFlavor ornull character = entry.associatedCharacterOrNull
	Assert( character != null )
	expect ItemFlavor( character )
	Remote_ServerCallFunction( LOADOUT_CLIENT_CALLBACK_TOGGLE_DEATHBOX, ItemFlavor_GetGUID( character ), slotContentsIndex, deathbox.guid )
}



ItemFlavor function Deathbox_GetEquipped( ItemFlavor character, ItemFlavor meleeSkin )
{
	EHI playerEHI = LocalClientEHI()

	if ( Artifacts_Loadouts_IsConfigPointerItemFlavor( meleeSkin ) )
	{
		int configIdx = Artifacts_Loadouts_GetConfigIndex( meleeSkin )
		LoadoutEntry loadoutSlot = Artifacts_Loadouts_GetEntryForConfigIndexAndType( configIdx, eArtifactComponentType.DEATHBOX )
		return LoadoutSlot_GetItemFlavor( playerEHI, loadoutSlot )
	}

	LoadoutEntry skinSlot = Loadout_MeleeSkin( character )
	LoadoutEntry boxSlot  = Loadout_Deathbox( character )
	array<ItemFlavor> skinBackups = LoadoutSlot_GetBackups( playerEHI, skinSlot )
	array<ItemFlavor> boxBackups  = LoadoutSlot_GetBackups( playerEHI, boxSlot )

	for ( int i = 0; i < skinBackups.len() && i < boxBackups.len(); i++ )
	{
		if ( skinBackups[i] == meleeSkin )
			return boxBackups[i]
	}

	return GetDefaultItemFlavorForLoadoutSlot( boxSlot )
}












































































































































































































































































































































































































string function MeleeWeapon_GetMainWeaponClassname( ItemFlavor meleeWeapon )
{
	Assert( ItemFlavor_GetType( meleeWeapon ) == eItemType.melee_weapon )

	return GetGlobalSettingsString( ItemFlavor_GetAsset( meleeWeapon ), "mainWeaponClassname" )
}




string function MeleeWeapon_GetOffhandWeaponClassname( ItemFlavor meleeWeapon )
{
	Assert( ItemFlavor_GetType( meleeWeapon ) == eItemType.melee_weapon )

	return GetGlobalSettingsString( ItemFlavor_GetAsset( meleeWeapon ), "offhandWeaponClassname" )
}




asset function MeleeSkin_GetMenuModel( ItemFlavor meleeSkin )
{
	Assert( ItemFlavor_GetType( meleeSkin ) == eItemType.melee_skin )

	asset meleeWeaponAsset = GetGlobalSettingsAsset( ItemFlavor_GetAsset( meleeSkin ), "parentItemFlavor" )
	ItemFlavor meleeWeapon = GetItemFlavorByAsset( meleeWeaponAsset )
	string mainWeaponClassname = MeleeWeapon_GetMainWeaponClassname( meleeWeapon )
	return GetWeaponInfoFileKeyFieldAsset_Global( mainWeaponClassname, "viewmodel" )
}




asset function MeleeSkin_GetMenuAnimSeq( ItemFlavor meleeSkin )
{
	Assert( ItemFlavor_GetType( meleeSkin ) == eItemType.melee_skin )

	if ( Artifacts_Loadouts_IsConfigPointerItemFlavor( meleeSkin ) )
	{
		
		asset meleeWeaponAsset = GetGlobalSettingsAsset( ItemFlavor_GetAsset( meleeSkin ), "parentItemFlavor" )
		meleeSkin = GetItemFlavorByAsset( meleeWeaponAsset )
	}

	return GetGlobalSettingsAsset( ItemFlavor_GetAsset( meleeSkin ), "menuAnimSeq" )
}




string function MeleeSkin_GetKOSound( ItemFlavor meleeSkin )
{
	Assert( ItemFlavor_GetType( meleeSkin ) == eItemType.melee_skin )

	if ( Artifacts_Loadouts_IsConfigPointerItemFlavor( meleeSkin ) )
	{
		
		asset meleeWeaponAsset = GetGlobalSettingsAsset( ItemFlavor_GetAsset( meleeSkin ), "parentItemFlavor" )
		meleeSkin = GetItemFlavorByAsset( meleeWeaponAsset )
	}

	return GetGlobalSettingsString( ItemFlavor_GetAsset( meleeSkin ), "koSound" )
}




vector function MeleeSkin_GetMenuModelRotation( ItemFlavor meleeSkin )
{
	Assert( ItemFlavor_GetType( meleeSkin ) == eItemType.melee_skin )

	if ( Artifacts_Loadouts_IsConfigPointerItemFlavor( meleeSkin ) )
	{
		
		asset meleeWeaponAsset = GetGlobalSettingsAsset( ItemFlavor_GetAsset( meleeSkin ), "parentItemFlavor" )
		meleeSkin = GetItemFlavorByAsset( meleeWeaponAsset )
	}

	return GetGlobalSettingsVector( ItemFlavor_GetAsset( meleeSkin ), "menuMdlRot" )
}




bool function MeleeSkin_HasSpecificCharacterFlavor( ItemFlavor meleeSkin )
{
	Assert( ItemFlavor_GetType( meleeSkin ) == eItemType.melee_skin )

	asset meleeWeapon = GetGlobalSettingsAsset( ItemFlavor_GetAsset( meleeSkin ), "parentItemFlavor" )
	Assert( ItemFlavor_GetType( GetItemFlavorByAsset( meleeWeapon ) ) == eItemType.melee_weapon )

	asset character = GetGlobalSettingsAsset( meleeWeapon, "parentItemFlavor" )

	if ( character == "" )
		return false

	Assert( ItemFlavor_GetType( GetItemFlavorByAsset( character ) ) == eItemType.character )

	return true
}




ItemFlavor function MeleeSkin_GetCharacterFlavor( ItemFlavor meleeSkin )
{
	Assert( ItemFlavor_GetType( meleeSkin ) == eItemType.melee_skin )

	asset meleeWeapon = GetGlobalSettingsAsset( ItemFlavor_GetAsset( meleeSkin ), "parentItemFlavor" )
	Assert( ItemFlavor_GetType( GetItemFlavorByAsset( meleeWeapon ) ) == eItemType.melee_weapon )

	asset character = GetGlobalSettingsAsset( meleeWeapon, "parentItemFlavor" )
	Assert( character != "", "Implies all characters can use this melee weapon. Check this case with MeleeSkin_HasSpecificCharacterFlavor()" )
	Assert( ItemFlavor_GetType( GetItemFlavorByAsset( character ) ) == eItemType.character )

	return GetItemFlavorByAsset( character )
}
























































void function RegisterMeleeAddOnsForWeapon( ItemFlavor meleeWeapon )
{
	fileLevel.weaponAddOnsMap[ meleeWeapon ] <- []
	var settingsBlock = ItemFlavor_GetSettingsBlock( meleeWeapon )
	foreach ( var addOnBlock in IterateSettingsArray( GetSettingsBlockArray( settingsBlock, "meleeAddOns" ) ) )
	{
		ItemFlavor ornull addOnFlav = RegisterItemFlavorFromSettingsAsset( GetSettingsBlockAsset( addOnBlock, "flavor" ) )
		if ( addOnFlav != null )
		{
			expect ItemFlavor( addOnFlav )
			fileLevel.weaponAddOnsMap[ meleeWeapon ].append( addOnFlav )
			fileLevel.allMeleeAddOns.append( addOnFlav )
		}
		else Warning( format( "Melee Weapon %s refers to Invalid Asset ", ItemFlavor_GetGUIDString( meleeWeapon), string( GetSettingsBlockAsset( addOnBlock, "flavor" ) ) ) )
	}
}



void function OnAllItemFlavorsRegistered_MeleeAddOns()
{
	ItemFlavor ornull emptyAddOn = RegisterItemFlavorFromSettingsAsset( DEFAULT_EMPTY_MELEE_ADDON )
	Assert( emptyAddOn != null, "Failed to register default Melee Add On from asset " + DEFAULT_EMPTY_MELEE_ADDON ) 
	expect ItemFlavor( emptyAddOn )
	fileLevel.allMeleeAddOns.append( emptyAddOn )

	for ( int i = 0; i < LOADOUTS_MAX_ADDONS; i++ )
	{
		LoadoutEntry addOnEntry 			 = RegisterLoadoutSlot( eLoadoutEntryType.ITEM_FLAVOR, format( "melee_addon_%d", i ) , eLoadoutEntryClass.ACCOUNT )
		addOnEntry.category     			 = eLoadoutCategory.MELEE_ADDONS
		addOnEntry.defaultItemFlavor         = emptyAddOn
		addOnEntry.validItemFlavorList       = fileLevel.allMeleeAddOns
		addOnEntry.isSlotLocked              = bool function( EHI playerEHI ) { return !IsLobby() }
		addOnEntry.associatedCharacterOrNull = null
		addOnEntry.networkTo                 = eLoadoutNetworking.PLAYER_EXCLUSIVE
		addOnEntry.stryderCharDataArrayIndex = ePlayerStryderCharDataArraySlots.INVALID

		fileLevel.meleeAddOnLoadoutSlots.append( addOnEntry )
	}
}



array< LoadoutEntry > function Loadout_MeleeAddOns()
{
	return fileLevel.meleeAddOnLoadoutSlots
}



bool function Loadout_DoesAddOnAutoEquip( ItemFlavor addOn )
{
	Assert( ItemFlavor_GetType( addOn ) == eItemType.melee_addon )
	return GetGlobalSettingsBool( ItemFlavor_GetAsset( addOn ), "autoEquip" )
}



array< ItemFlavor > function Loadout_GetEquippedMeleeAddOnsForWeapon( EHI playerEHI, ItemFlavor meleeWeapon )
{
	array< ItemFlavor > equippedAddOns = []
	foreach ( LoadoutEntry entry in Loadout_MeleeAddOns() )
	{
		ItemFlavor equippedItem = LoadoutSlot_GetItemFlavor( playerEHI, entry )
		if ( fileLevel.weaponAddOnsMap[ meleeWeapon ].contains( equippedItem ) )
			equippedAddOns.append( equippedItem )
	}

	return equippedAddOns
}

table< ItemFlavor, array< ItemFlavor > > function Loadout_WeaponAddons()
{
	return fileLevel.weaponAddOnsMap
}
















































































































































































































































































































































































































































































































































































































































































#if DEV
void function SetDevMenu_OverrideMenuHeirloomModels( var _ )
{
	thread ChangeToThisMenu( SetupChangeOverrideMenuHeirloomModels )
}


void function SetupChangeOverrideMenuHeirloomModels()
{
	SetupDevCommand( "Disable Override", "script_ui DEV_SetMenuHeirloomOverrideGUID( -1 ); script_client DEV_SetMenuHeirloomOverrideGUID( -1 )" )

	array<ItemFlavor> meleeSkins = clone GetAllItemFlavorsOfType( eItemType.melee_skin )
	meleeSkins.removebyvalue( GetItemFlavorByAsset( DEFAULT_MELEE_SKIN ) )

	table<ItemFlavor, string> meleeSkinNames

	foreach ( meleeSkin in meleeSkins )
	{
		string characterName
		asset parentWeapon 	  = GetGlobalSettingsAsset( ItemFlavor_GetAsset( meleeSkin ), "parentItemFlavor" )
		asset parentCharacter = GetGlobalSettingsAsset( parentWeapon, "parentItemFlavor" )
		bool lacksParentCharacter = ( parentCharacter == "" || !IsValidItemFlavorSettingsAsset( parentCharacter ) || ItemFlavor_GetType( GetItemFlavorByAsset( parentCharacter ) ) != eItemType.character )
		if ( lacksParentCharacter )
			characterName = "<UNDEFINED>"
		else
			characterName = Localize( ItemFlavor_GetLongName( MeleeSkin_GetCharacterFlavor( meleeSkin ) ) )

		string meleeSkinName = Localize( ItemFlavor_GetLongName( meleeSkin ) )
		if ( meleeSkinName == "" )
			meleeSkinName = "<UNNAMED>"

		meleeSkinNames[meleeSkin] <- characterName + " - " + meleeSkinName
	}

	meleeSkins.sort( int function( ItemFlavor a, ItemFlavor b ) : ( meleeSkinNames ) {
		if ( meleeSkinNames[a] < meleeSkinNames[b] )
			return -1

		if ( meleeSkinNames[a] > meleeSkinNames[b] )
			return 1

		return 0
	} )

	foreach ( ItemFlavor meleeSkin in meleeSkins )
	{
		SetupDevFunc( meleeSkinNames[meleeSkin], void function( var unused ) : ( meleeSkin ) {
			fileLevel.menuHeirloomOverrideGUID = ItemFlavor_GetGUID( meleeSkin )
			if ( CanRunClientScript() )
				RunClientScript( "DEV_SetMenuHeirloomOverrideGUID", fileLevel.menuHeirloomOverrideGUID )

			int ownedPacks = GRX_IsInventoryReady() ? GRX_GetTotalPackCount() : 0
			if ( ownedPacks < 1 )
				DEV_GRX_TestPurchase( "pack_cosmetic_rare", [100, 0, 0, 0, 0], 50 )
		} )
	}
}
#endif


#if DEV
void function DEV_SetMenuHeirloomOverrideGUID( int guid )
{
	fileLevel.menuHeirloomOverrideGUID = guid
}


int function DEV_GetMenuHeirloomOverrideGUID()
{
	return fileLevel.menuHeirloomOverrideGUID
}
#endif
