



global function Sh_Kepler_Init
global function Kepler_IsPlayerInVariant
global function Kepler_IsPlayerEligibleForItemFlavor
global function Kepler_GetAssetForScenario
global function Kepler_GetAssetForScenarioKey
global function Kepler_GetScenarioFromKey


global function Kepler_LevelShutdown
global function UICodeCallback_GetKnownKeplerScenarios
global function UICodeCallback_IsKeplerInitialized
global function UICodeCallback_GetScenarioGUID
global function UICodeCallback_GetScenarioVariantId












global enum eKeplerScenario
{
	APEX_TAB_ORDERING,
	KEYART_WEAPONS,
	KEYART_LEGEND_LAUNCH,
	BATTLEPASS_DAILIES_CHALLENGE_21_0,
	FTUE_LANDING_FLOW_22_0,
	KEYART_PACKS_V_SKINS,

	COUNT
}

table<int, string> keplerActiveScenarios = {
	[eKeplerScenario.APEX_TAB_ORDERING] = "apex-tab-ordering",
	[eKeplerScenario.KEYART_WEAPONS] = "keyart_weapons",
	[eKeplerScenario.KEYART_LEGEND_LAUNCH] = "keyart_legendlaunch",
	[eKeplerScenario.BATTLEPASS_DAILIES_CHALLENGE_21_0] = "21-0-battle-pass-dailies",
	[eKeplerScenario.FTUE_LANDING_FLOW_22_0] = "22-0-ftue-landing-flow",
	[eKeplerScenario.KEYART_PACKS_V_SKINS] = "keyart_packsvskins",
}

struct KeplerVariantData
{
	string variantName
	array<asset> controlledAssets
}

struct KeplerScenarioData
{
	ItemFlavor& flavor
	string scenarioKey
	array<KeplerVariantData> variants
}

struct FileStruct_Kepler
{
	table<string, KeplerScenarioData> loadedScenarios
	bool isInitialized = false




}

FileStruct_Kepler& file

void function AddControlledAssetToVariant( var variant, KeplerVariantData variantData, string field )
{
	asset controlledAsset = GetSettingsBlockAsset( variant, field )
	if ( controlledAsset != $"" )
	{
		variantData.controlledAssets.append( controlledAsset )
	}
}


void function InitializeScenarioData( asset scenarioAsset, ItemFlavor flavor )
{
	var settingsBlock = GetSettingsBlockForAsset( scenarioAsset )

	KeplerScenarioData scenario
	scenario.scenarioKey = GetSettingsBlockString( settingsBlock, "scenarioKey" )
	scenario.flavor = flavor

	var variantArray = GetSettingsBlockArray( settingsBlock, "variants" )
	foreach ( var variant in IterateSettingsArray( variantArray ) )
	{
		KeplerVariantData variantData
		variantData.variantName = GetSettingsBlockString( variant, "variantName" )

		
		AddControlledAssetToVariant( variant, variantData, "controlledCollection" )
		AddControlledAssetToVariant( variant, variantData, "controlledImage" )

		scenario.variants.append( variantData )
	}

	var challengeArray = GetSettingsBlockArray( settingsBlock, "scenarioChallenges" )
	foreach ( var challengeBlock in IterateSettingsArray( challengeArray ) )
	{
		asset challenge = GetSettingsBlockAsset( challengeBlock, "scenarioChallenge" )

		ItemFlavor newChallenge = expect ItemFlavor(RegisterItemFlavorFromSettingsAsset( challenge ))

		Assert( ItemFlavor_GetType( newChallenge ) == eItemType.challenge )
	}

	file.loadedScenarios[scenario.scenarioKey] <- scenario
}

void function Sh_Kepler_Init()
{
	if ( !GetConVarBool( "kepler_isEnabled" ) )
	{
		return
	}

	AddCallback_RegisterRootItemFlavors( void function()
	{
		foreach ( asset scenario in GetBaseItemFlavorsFromArray( "keplerScenarios" ) )
		{
			ItemFlavor ornull flavor = RegisterItemFlavorFromSettingsAsset( scenario )
			InitializeScenarioData( scenario, expect ItemFlavor( flavor ) )
		}

		file.isInitialized = true
		printf( "Kepler initialized with %d scenarios", file.loadedScenarios.len() )
	} )




}

bool function Kepler_IsPlayerEligibleForItemFlavor( entity player, ItemFlavor itemFlavor )
{
	AssertLocalOrServerValidPlayer( player )

	bool isReferencedByAnyScenario = false

	asset itemAsset = GetSettingsAssetForUniqueId( itemFlavor.guid )
	if( itemAsset == $"" )
	{
		Warning( "Checking Kepler eligibility of unknown item flavor" )
		return true
	}

	foreach ( int scenario, string scenarioKey in keplerActiveScenarios )
	{
		if ( !( scenarioKey in file.loadedScenarios ) )
		{
			Warning( "Active scenario %s does not have a loaded Bakery asset", scenarioKey )
			continue
		}

		KeplerScenarioData scenarioData = file.loadedScenarios[scenarioKey]
		foreach (KeplerVariantData variant in scenarioData.variants )
		{
			foreach ( asset controlledAsset in variant.controlledAssets )
			{
				if ( controlledAsset == itemAsset )
				{
					isReferencedByAnyScenario = true
					if ( Kepler_IsPlayerInVariant( player, scenario, variant.variantName ) )
					{
						return true
					}
				}
			}
		}
	}

	return !isReferencedByAnyScenario
}

int function Kepler_GetScenarioFromKey( string scenarioKey )
{
	foreach( int scenario, string key in keplerActiveScenarios )
	{
		if ( scenarioKey == key )
			return scenario
	}

#if DEV
	Assert( false, "The scenario key " + scenarioKey + " is invalid" )
#endif
	return -1
}

asset ornull function Kepler_GetAssetForScenarioKey( entity player, string scenarioKey )
{
	if ( !( scenarioKey in file.loadedScenarios ) )
	{
		Warning( "Active scenario %s does not have a loaded Bakery asset", scenarioKey )
		return null
	}

	KeplerScenarioData scenarioData = file.loadedScenarios[scenarioKey]

	foreach ( KeplerVariantData variant in scenarioData.variants )
	{
		if ( Kepler_IsPlayerInVariant( player, Kepler_GetScenarioFromKey( scenarioKey ), variant.variantName ) )
		{
			if ( variant.controlledAssets.len() > 0 )
			{
#if DEV
					if ( variant.controlledAssets.len() > 1 )
					{
						Warning( "Scenario \"%s\" has multiple controlled assets and is trying to fetch only one", scenarioKey )
					}
#endif
				return variant.controlledAssets[0]
			}

			break
		}
	}

	return null
}

asset ornull function Kepler_GetAssetForScenario( entity player, int scenario )
{
	string scenarioKey = keplerActiveScenarios[scenario]

	return Kepler_GetAssetForScenarioKey( player, scenarioKey )
}

bool function AllowCheckForVariant( int scenario, string variantName )
{
	Assert( scenario >= 0 && scenario < eKeplerScenario.COUNT, "Checking variant for invalid Kepler scenario, are you using eKeplerScenario?" )
	Assert( variantName != "", "Checking for empty Kepler variant name" )

	if ( !GetConVarBool( "kepler_isEnabled" ) )
	{
		return false
	}

	Assert( file.isInitialized, "Attempting to check Kepler variants before Kepler has been initialized" )

	if ( !( scenario in keplerActiveScenarios ) )
	{
		Assert( false, "Attempting to look up a Kepler scenario that has not been defined as active" );
		return false
	}

	return true
}



bool function Kepler_IsPlayerInVariant( entity player, int scenario, string variantName )
{
	AssertLocalOrServerValidPlayer( player )

	if ( !AllowCheckForVariant( scenario, variantName ) )
	{
		return false
	}

#if DEV
	string variantOverride = GetConVarString( "kepler_forceVariant" )
	if ( variantOverride != "" )
	{
		return variantOverride == variantName
	}
#endif

	string scenarioKey = keplerActiveScenarios[scenario]


	return Kepler_IsPlayerInVariant_Internal( scenarioKey, variantName )















}


void function Kepler_LevelShutdown()
{
	printf( "Kepler shutting down" )

	FileStruct_Kepler newFile
	file = newFile
}



array<string> function UICodeCallback_GetKnownKeplerScenarios()
{
	array<string> scenarioKeys
	scenarioKeys.resize( keplerActiveScenarios.len() )

	int i = 0
	foreach ( int _, string scenarioKey in keplerActiveScenarios )
	{
		scenarioKeys[i++] = scenarioKey
	}

	return scenarioKeys
}



bool function UICodeCallback_IsKeplerInitialized()
{
	return file.isInitialized
}




SettingsAssetGUID function UICodeCallback_GetScenarioGUID( string scenarioKey )



{
	if ( file.loadedScenarios.len() == 0 )
	{
		Warning( "Attempting to fetch Kepler scenario GUID before scenarios are loaded" )
		return ASSET_SETTINGS_UNIQUE_ID_INVALID
	}

	if ( !( scenarioKey in file.loadedScenarios ) )
	{
		Assert( false, format( "Attempting to fetch Kepler scenario GUID for unknown scenario \"%s\"", scenarioKey ) )
		return ASSET_SETTINGS_UNIQUE_ID_INVALID
	}

	KeplerScenarioData scenario = file.loadedScenarios[ scenarioKey ]
	return ItemFlavor_GetGUID( scenario.flavor )
}




int function UICodeCallback_GetScenarioVariantId( string scenarioKey, string variantName )



{
	if ( file.loadedScenarios.len() == 0 )
	{
		Warning( "Attempting to fetch Kepler variant id before scenarios are loaded" )
		return -1
	}

	if ( !( scenarioKey in file.loadedScenarios ) )
	{
		Assert( false, "Attempting to fetch Kepler variant id for unknown scenario" )
		return -1
	}

	KeplerScenarioData scenario = file.loadedScenarios[ scenarioKey ]

	for ( int i = 0; i < scenario.variants.len(); ++i )
	{
		if ( variantName == scenario.variants[i].variantName )
		{
			return i
		}
	}

	Assert( false, format( "No Kepler variant found for %s with %s name", scenarioKey, variantName ) )
	return -1
}





































































