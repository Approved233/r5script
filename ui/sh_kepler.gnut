




global function Sh_Kepler_Init
global function Kepler_IsPlayerInVariant


global function Kepler_LevelShutdown
global function UICodeCallback_GetKnownKeplerScenarios
global function UICodeCallback_IsKeplerInitialized
global function UICodeCallback_GetScenarioGUID
global function UICodeCallback_GetScenarioVariantId












global enum eKeplerScenario
{
	APEX_TAB_ORDERING,

	COUNT
}

table<int, string> keplerActiveScenarios = {
	[eKeplerScenario.APEX_TAB_ORDERING] = "apex-tab-ordering"
}

struct KeplerScenarioData
{
	ItemFlavor& flavor
	string scenarioKey
	array<string> variants
}

struct FileStruct_Kepler
{
	table<string, KeplerScenarioData> loadedScenarios
	bool isInitialized = false




}

FileStruct_Kepler& file


void function InitializeScenarioData( asset scenarioAsset, ItemFlavor flavor )
{
	var settingsBlock = GetSettingsBlockForAsset( scenarioAsset )

	KeplerScenarioData scenario
	scenario.scenarioKey = GetSettingsBlockString( settingsBlock, "scenarioKey" )
	scenario.flavor = flavor

	var variantArray = GetSettingsBlockArray( settingsBlock, "variants" )
	foreach ( var variant in IterateSettingsArray( variantArray ) )
	{
		scenario.variants.append( GetSettingsBlockString( variant, "variantName" ) )
	}

	file.loadedScenarios[scenario.scenarioKey] <- scenario
}

void function Sh_Kepler_Init()
{
	if ( !GetConVarBool( "kepler_isEnabled" ) )
	{
		return
	}

	AddCallback_RegisterRootItemFlavors( void function()
	{
		foreach ( asset scenario in GetBaseItemFlavorsFromArray( "keplerScenarios" ) )
		{
			ItemFlavor ornull flavor = RegisterItemFlavorFromSettingsAsset( scenario )
			InitializeScenarioData( scenario, expect ItemFlavor( flavor ) )
		}

		file.isInitialized = true
		printf( "Kepler initialized with %d scenarios", file.loadedScenarios.len() )
	} )




}

bool function AllowCheckForVariant( int scenario, string variantName )
{
	Assert( scenario >= 0 && scenario < eKeplerScenario.COUNT, "Checking variant for invalid Kepler scenario, are you using eKeplerScenario?" )
	Assert( variantName != "", "Checking for empty Kepler variant name" )

	if ( !GetConVarBool( "kepler_isEnabled" ) )
	{
		return false
	}

	Assert( file.isInitialized, "Attempting to check Kepler variants before Kepler has been initialized" )

	if ( !( scenario in keplerActiveScenarios ) )
	{
		Assert( false, "Attempting to look up a Kepler scenario that has not been defined as active" );
		return false
	}

	return true
}




bool function Kepler_IsPlayerInVariant( int scenario, string variantName )
{
	if ( !AllowCheckForVariant( scenario, variantName ) )
	{
		return false
	}

#if DEV
	string variantOverride = GetConVarString( "kepler_forceVariant" )
	if ( variantOverride != "" )
	{
		return variantOverride == variantName
	}
#endif

	string scenarioKey = keplerActiveScenarios[scenario]
	return Kepler_IsPlayerInVariant_Internal( scenarioKey, variantName )
}






































void function Kepler_LevelShutdown()
{
	printf( "Kepler shutting down" )

	FileStruct_Kepler newFile
	file = newFile
}



array<string> function UICodeCallback_GetKnownKeplerScenarios()
{
	array<string> scenarioKeys
	scenarioKeys.resize( keplerActiveScenarios.len() )

	int i = 0
	foreach ( int _, string scenarioKey in keplerActiveScenarios )
	{
		scenarioKeys[i++] = scenarioKey
	}

	return scenarioKeys
}



bool function UICodeCallback_IsKeplerInitialized()
{
	return file.isInitialized
}




SettingsAssetGUID function UICodeCallback_GetScenarioGUID( string scenarioKey )



{
	if ( file.loadedScenarios.len() == 0 )
	{
		Warning( "Attempting to fetch Kepler scenario GUID before scenarios are loaded" )
		return ASSET_SETTINGS_UNIQUE_ID_INVALID
	}

	if ( !( scenarioKey in file.loadedScenarios ) )
	{
		Assert( false, format( "Attempting to fetch Kepler scenario GUID for unknown scenario \"%s\"", scenarioKey ) )
		return ASSET_SETTINGS_UNIQUE_ID_INVALID
	}

	KeplerScenarioData scenario = file.loadedScenarios[ scenarioKey ]
	return ItemFlavor_GetGUID( scenario.flavor )
}




int function UICodeCallback_GetScenarioVariantId( string scenarioKey, string variantName )



{
	if ( file.loadedScenarios.len() == 0 )
	{
		Warning( "Attempting to fetch Kepler variant id before scenarios are loaded" )
		return -1
	}

	if ( !( scenarioKey in file.loadedScenarios ) )
	{
		Assert( false, "Attempting to fetch Kepler variant id for unknown scenario" )
		return -1
	}

	KeplerScenarioData scenario = file.loadedScenarios[ scenarioKey ]

	for ( int i = 0; i < scenario.variants.len(); ++i )
	{
		if ( variantName == scenario.variants[i] )
		{
			return i
		}
	}

	Assert( false, format( "No Kepler variant found for %s with %s name", scenarioKey, variantName ) )
	return -1
}






































































                    