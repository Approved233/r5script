global function ShStats_Beginner_LevelInit
global function StatsRegister_Beginner





























struct FileStruct_FileLevel
{

		table< string, int > botQueueGraduationRequirements

}
FileStruct_FileLevel& fileLevel

void function ShStats_Beginner_LevelInit()
{
	FileStruct_FileLevel newFileLevel
	fileLevel = newFileLevel





















}

void function StatsRegister_Beginner()
{

		CAREER_STATS.slide_count = RegisterAccumulatedStat_Int( null, "slide_count", eChallengeGameMode.ANY, CHALLENGES_CALC_DEPENDS )
		CAREER_STATS.armor_upgaraded_count = RegisterAccumulatedStat_Int( null, "armor_upgaraded_count", eChallengeGameMode.ANY, CHALLENGES_CALC_DEPENDS )
		CAREER_STATS.doors_broken_by_melee = RegisterAccumulatedStat_Int( null, "doors_broken_by_melee", eChallengeGameMode.ANY, CHALLENGES_CALC_DEPENDS )
		CAREER_STATS.phoenix_kits_used = RegisterAccumulatedStat_Int( null, "phoenix_kits_used", eChallengeGameMode.BATTLE_ROYALE, CHALLENGES_CALC_DEPENDS )
		CAREER_STATS.beginner_distance_kill = RegisterAccumulatedStat_Int( null, "beginner_distance_kill", eChallengeGameMode.BATTLE_ROYALE, CHALLENGES_CALC_DEPENDS )





















		CAREER_STATS.graduated_bot_queue = RegisterExpensiveCalculatedStat_Int( null, "graduated_bot_queue", TRACKERS_NEED, SetupGraduatedBotQueueStat, [], eChallengeGameMode.NON_MODE )

}














































































































table< string, int > function GetBotQueueGradStatValues()
{
	
	string botQueueGradOverrides = GetPlaylistVarString( PLAYLIST_NEW_PLAYER_ORIENTATION, "botQueueGraduationOverrides", "" )
	foreach ( string pair in split( botQueueGradOverrides, WHITESPACE_CHARACTERS ) )
	{
		array<string> splitPair = split( pair, ":" )
		Assert ( splitPair.len() == 2 && splitPair[1].isnumeric(), "Playlist Var \"botQueueGraduationOverrides\" has invalid pair ("+pair+") should be in the format: <StatRef>:<Value>" )
		fileLevel.botQueueGraduationRequirements[ splitPair[0] ] <- int( splitPair[1] )
	}

	return fileLevel.botQueueGraduationRequirements
}

StatCalcFuncInfo function SetupGraduatedBotQueueStat( StatEntry calcEntry, array<StatTemplate> sourceTemplates )
{
	StatCalcFuncInfo info

	info.calcFunc_Int = ( int function ( entity player, array<StatEntry> sourceEntries, int when ) : ( calcEntry ) {
		foreach ( string statRef, int value in GetBotQueueGradStatValues() )
		{
			Assert( IsValidStatEntryRef(statRef) )
			StatEntry statEntry = GetStatEntryByRef( statRef )
			Assert( statEntry != calcEntry, "Trying to use this stat as a requirement for it's own value ("+statRef+")" )
			if ( GetStat_Int( player, statEntry, when ) >= value )
				return 1
		}
		return 0
	} )

	return info
}













































































































































































































